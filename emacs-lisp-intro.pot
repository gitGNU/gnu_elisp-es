# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2015-03-12 02:35+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: titlefont{#1}
#: emacs-lisp-intro.texi:6 emacs-lisp-intro.texi:288
#, no-wrap
msgid "Programming in Emacs Lisp"
msgstr ""

#. type: ifset
#: emacs-lisp-intro.texi:18
msgid "@smallbook"
msgstr ""

#. type: tex
#: emacs-lisp-intro.texi:36
#, no-wrap
msgid "\\global\\hbadness=6666 % don't worry about not-too-underfull boxes\n"
msgstr ""

#. type: tex
#: emacs-lisp-intro.texi:199
#, no-wrap
msgid "\\global\\parskip 6pt plus 1pt\n"
msgstr ""

#. type: tex
#: emacs-lisp-intro.texi:215
#, no-wrap
msgid ""
"\\if \\xrefprintnodename\n"
" \\global\\def\\xrefprintnodename#1{\\unskip, ``#1''}\n"
" \\else\n"
" \\global\\def\\xrefprintnodename#1{ ``#1''}\n"
"\\fi\n"
"% \\global\\def\\xrefprintnodename#1{, ``#1''}\n"
msgstr ""

#. type: dircategory
#: emacs-lisp-intro.texi:219
#, no-wrap
msgid "GNU Emacs Lisp"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:223
msgid "Emacs Lisp Intro: (eintr)"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:223
msgid "A simple introduction to Emacs Lisp programming."
msgstr ""

#. type: copying
#: emacs-lisp-intro.texi:228
msgid ""
"This is an @cite{Introduction to Programming in Emacs Lisp}, for people who "
"are not programmers."
msgstr ""

#. type: copying
#: emacs-lisp-intro.texi:230
msgid "Edition @value{edition-number}, @value{update-date}"
msgstr ""

#. type: copying
#: emacs-lisp-intro.texi:233
msgid ""
"Copyright @copyright{} 1990--1995, 1997, 2001--2013 Free Software "
"Foundation, Inc."
msgstr ""

#. type: iftex
#: emacs-lisp-intro.texi:237
msgid "Published by the:@*"
msgstr ""

#. type: iftex
#: emacs-lisp-intro.texi:243
msgid ""
"GNU Press, @hfill @uref{http://www.fsf.org/campaigns/gnu-press/}@* a "
"division of the @hfill email: @email{sales@@fsf.org}@* Free Software "
"Foundation, Inc.  @hfill Tel: +1 (617) 542-5942@* 51 Franklin Street, Fifth "
"Floor @hfill Fax: +1 (617) 542-2652@* Boston, MA 02110-1301 USA"
msgstr ""

#. type: ifnottex
#: emacs-lisp-intro.texi:247
msgid "Published by the:"
msgstr ""

#. type: example
#: emacs-lisp-intro.texi:254
#, no-wrap
msgid ""
"GNU Press,                        http://www.fsf.org/campaigns/gnu-press/\n"
"a division of the                 email: sales@@fsf.org\n"
"Free Software Foundation, Inc.    Tel: +1 (617) 542-5942\n"
"51 Franklin Street, Fifth Floor   Fax: +1 (617) 542-2652\n"
"Boston, MA 02110-1301 USA\n"
msgstr ""

#. type: copying
#: emacs-lisp-intro.texi:260
msgid "ISBN 1-882114-43-4"
msgstr ""

#. type: copying
#: emacs-lisp-intro.texi:268
msgid ""
"Permission is granted to copy, distribute and/or modify this document under "
"the terms of the GNU Free Documentation License, Version 1.3 or any later "
"version published by the Free Software Foundation; there being no Invariant "
"Section, with the Front-Cover Texts being ``A GNU Manual'', and with the "
"Back-Cover Texts as in (a) below.  A copy of the license is included in the "
"section entitled ``GNU Free Documentation License''."
msgstr ""

#. type: copying
#: emacs-lisp-intro.texi:272
msgid ""
"(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and modify "
"this GNU manual.  Buying copies from the FSF supports it in developing GNU "
"and promoting software freedom.''"
msgstr ""

#. type: tex
#: emacs-lisp-intro.texi:282
#, no-wrap
msgid ""
"{\\begingroup%\n"
"    \\hbox{}\\vskip 1.5in \\chaprm \\centerline{An Introduction to}%\n"
"        \\endgroup}%\n"
"{\\begingroup\\hbox{}\\vskip 0.25in \\chaprm%\n"
"        \\centerline{Programming in Emacs Lisp}%\n"
"        \\endgroup\\page\\hbox{}\\page}\n"
msgstr ""

#. type: titlefont{#1}
#: emacs-lisp-intro.texi:286
#, no-wrap
msgid "An Introduction to"
msgstr ""

#. type: center
#: emacs-lisp-intro.texi:290
#, no-wrap
msgid "Revised Third Edition"
msgstr ""

#. type: center
#: emacs-lisp-intro.texi:292
#, no-wrap
msgid "by Robert J. Chassell"
msgstr ""

#. type: iftex
#: emacs-lisp-intro.texi:303
msgid ""
"@evenheading @thispage @| @| @thischapter @oddheading @thissection @| @| "
"@thispage"
msgstr ""

#. type: tex
#: emacs-lisp-intro.texi:311
#, no-wrap
msgid ""
"\\global\\parskip 2pt plus 1pt\n"
"\\global\\advance\\baselineskip by -1pt\n"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:319
#, no-wrap
msgid "Top"
msgstr ""

#. type: top
#: emacs-lisp-intro.texi:320
#, no-wrap
msgid "An Introduction to Programming in Emacs Lisp"
msgstr ""

#. type: ifnottex
#: emacs-lisp-intro.texi:326
msgid ""
"This master menu first lists each chapter and index; then it lists every "
"node in every chapter."
msgstr ""

#. type: unnumbered
#: emacs-lisp-intro.texi:369 emacs-lisp-intro.texi:374 emacs-lisp-intro.texi:833 emacs-lisp-intro.texi:834
#, no-wrap
msgid "Preface"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "What to look for."
msgstr ""

#. type: chapter
#: emacs-lisp-intro.texi:369 emacs-lisp-intro.texi:383 emacs-lisp-intro.texi:1098 emacs-lisp-intro.texi:1099
#, no-wrap
msgid "List Processing"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "What is Lisp?"
msgstr ""

#. type: chapter
#: emacs-lisp-intro.texi:369 emacs-lisp-intro.texi:438 emacs-lisp-intro.texi:2620 emacs-lisp-intro.texi:2621
#, no-wrap
msgid "Practicing Evaluation"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "Running several programs."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:369 emacs-lisp-intro.texi:3032
#, no-wrap
msgid "Writing Defuns"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "How to write function definitions."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:369 emacs-lisp-intro.texi:4640
#, no-wrap
msgid "Buffer Walk Through"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "Exploring a few buffer-related functions."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:369 emacs-lisp-intro.texi:5535
#, no-wrap
msgid "More Complex"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "A few, even more complex functions."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:369 emacs-lisp-intro.texi:6556
#, no-wrap
msgid "Narrowing & Widening"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "Restricting your and Emacs attention to a region."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:369 emacs-lisp-intro.texi:6882
#, no-wrap
msgid "car cdr & cons"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "Fundamental functions in Lisp."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:369 emacs-lisp-intro.texi:7535
#, no-wrap
msgid "Cutting & Storing Text"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "Removing text and saving it."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:369 emacs-lisp-intro.texi:9562
#, no-wrap
msgid "List Implementation"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "How lists are implemented in the computer."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:369 emacs-lisp-intro.texi:10035
#, no-wrap
msgid "Yanking"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "Pasting stored text."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:369 emacs-lisp-intro.texi:10265
#, no-wrap
msgid "Loops & Recursion"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "How to repeat a process."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:369 emacs-lisp-intro.texi:12259
#, no-wrap
msgid "Regexp Search"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "Regular expression searches."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:369 emacs-lisp-intro.texi:13684
#, no-wrap
msgid "Counting Words"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "A review of repetition and regexps."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:369 emacs-lisp-intro.texi:14562
#, no-wrap
msgid "Words in a defun"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "Counting words in a @code{defun}."
msgstr ""

#. type: chapter
#: emacs-lisp-intro.texi:369 emacs-lisp-intro.texi:746 emacs-lisp-intro.texi:16161 emacs-lisp-intro.texi:16162
#, no-wrap
msgid "Readying a Graph"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "A prototype graph printing function."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:369 emacs-lisp-intro.texi:16830
#, no-wrap
msgid "Emacs Initialization"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "How to write a @file{.emacs} file."
msgstr ""

#. type: chapter
#: emacs-lisp-intro.texi:369 emacs-lisp-intro.texi:772 emacs-lisp-intro.texi:18284 emacs-lisp-intro.texi:18285
#, no-wrap
msgid "Debugging"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "How to run the Emacs Lisp debuggers."
msgstr ""

#. type: chapter
#: emacs-lisp-intro.texi:369 emacs-lisp-intro.texi:18790 emacs-lisp-intro.texi:18791
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "Now you have the basics."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:369 emacs-lisp-intro.texi:18910 emacs-lisp-intro.texi:18912
#, no-wrap
msgid "the-the"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "An appendix: how to find reduplicated words."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:369 emacs-lisp-intro.texi:19007
#, no-wrap
msgid "Kill Ring"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "An appendix: how the kill ring works."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:369 emacs-lisp-intro.texi:19616
#, no-wrap
msgid "Full Graph"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "How to create a graph with labeled axes."
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "Free Software and Free Manuals::"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "GNU Free Documentation License::"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:369
msgid "Index::"
msgstr ""

#. type: unnumbered
#: emacs-lisp-intro.texi:369 emacs-lisp-intro.texi:22094 emacs-lisp-intro.texi:22099 emacs-lisp-intro.texi:22100
#, no-wrap
msgid "About the Author"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:372
msgid "--- The Detailed Node Listing ---"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:381 emacs-lisp-intro.texi:859 emacs-lisp-intro.texi:862
#, no-wrap
msgid "Why"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:381 emacs-lisp-intro.texi:859
msgid "Why learn Emacs Lisp?"
msgstr ""

#. type: unnumberedsec
#: emacs-lisp-intro.texi:381 emacs-lisp-intro.texi:859 emacs-lisp-intro.texi:876 emacs-lisp-intro.texi:877
#, no-wrap
msgid "On Reading this Text"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:381 emacs-lisp-intro.texi:859
msgid "Read, gain familiarity, pick up habits...."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:381 emacs-lisp-intro.texi:859 emacs-lisp-intro.texi:926
#, no-wrap
msgid "Who You Are"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:381 emacs-lisp-intro.texi:859
msgid "For whom this is written."
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:381 emacs-lisp-intro.texi:859
msgid "Lisp History::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:381 emacs-lisp-intro.texi:859 emacs-lisp-intro.texi:1005
#, no-wrap
msgid "Note for Novices"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:381 emacs-lisp-intro.texi:859
msgid "You can read this as a novice."
msgstr ""

#. type: unnumberedsec
#: emacs-lisp-intro.texi:381 emacs-lisp-intro.texi:859 emacs-lisp-intro.texi:1052 emacs-lisp-intro.texi:1053
#, no-wrap
msgid "Thank You"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:395 emacs-lisp-intro.texi:397 emacs-lisp-intro.texi:1125 emacs-lisp-intro.texi:1127 emacs-lisp-intro.texi:1128 emacs-lisp-intro.texi:1129
#, no-wrap
msgid "Lisp Lists"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:395 emacs-lisp-intro.texi:1125
msgid "What are lists?"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:395 emacs-lisp-intro.texi:1125 emacs-lisp-intro.texi:1329 emacs-lisp-intro.texi:1330
#, no-wrap
msgid "Run a Program"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:395 emacs-lisp-intro.texi:1125
msgid "Any list in Lisp is a program ready to run."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:395 emacs-lisp-intro.texi:1125 emacs-lisp-intro.texi:1391
#, no-wrap
msgid "Making Errors"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:395 emacs-lisp-intro.texi:1125
msgid "Generating an error message."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:395 emacs-lisp-intro.texi:1125 emacs-lisp-intro.texi:1541
#, no-wrap
msgid "Names & Definitions"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:395 emacs-lisp-intro.texi:1125
msgid "Names of symbols and function definitions."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:395 emacs-lisp-intro.texi:1125 emacs-lisp-intro.texi:1575
#, no-wrap
msgid "Lisp Interpreter"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:395 emacs-lisp-intro.texi:1125
msgid "What the Lisp interpreter does."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:395 emacs-lisp-intro.texi:409 emacs-lisp-intro.texi:1125 emacs-lisp-intro.texi:1655 emacs-lisp-intro.texi:1656 emacs-lisp-intro.texi:1657
#, no-wrap
msgid "Evaluation"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:395 emacs-lisp-intro.texi:1125
msgid "Running a program."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:395 emacs-lisp-intro.texi:414 emacs-lisp-intro.texi:1125 emacs-lisp-intro.texi:1761 emacs-lisp-intro.texi:1762 emacs-lisp-intro.texi:1763
#, no-wrap
msgid "Variables"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:395 emacs-lisp-intro.texi:1125
msgid "Returning a value from a variable."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:395 emacs-lisp-intro.texi:421 emacs-lisp-intro.texi:1125 emacs-lisp-intro.texi:1956 emacs-lisp-intro.texi:1957 emacs-lisp-intro.texi:1958
#, no-wrap
msgid "Arguments"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:395 emacs-lisp-intro.texi:1125
msgid "Passing information to a function."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:395 emacs-lisp-intro.texi:1125 emacs-lisp-intro.texi:2354
#, no-wrap
msgid "set & setq"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:395 emacs-lisp-intro.texi:1125
msgid "Setting the value of a variable."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:395 emacs-lisp-intro.texi:1125 emacs-lisp-intro.texi:2536 emacs-lisp-intro.texi:2537
#, no-wrap
msgid "Summary"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:395 emacs-lisp-intro.texi:1125
msgid "The major points."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:395 emacs-lisp-intro.texi:1125 emacs-lisp-intro.texi:2598
#, no-wrap
msgid "Error Message Exercises"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:402 emacs-lisp-intro.texi:1156 emacs-lisp-intro.texi:1159
#, no-wrap
msgid "Numbers Lists"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:402 emacs-lisp-intro.texi:1156
msgid "List have numbers, other lists, in them."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:402 emacs-lisp-intro.texi:1156 emacs-lisp-intro.texi:1187 emacs-lisp-intro.texi:1188 emacs-lisp-intro.texi:1189
#, no-wrap
msgid "Lisp Atoms"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:402 emacs-lisp-intro.texi:1156
msgid "Elemental entities."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:402 emacs-lisp-intro.texi:1156 emacs-lisp-intro.texi:1267 emacs-lisp-intro.texi:1268
#, no-wrap
msgid "Whitespace in Lists"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:402 emacs-lisp-intro.texi:1156
msgid "Formatting lists to be readable."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:402 emacs-lisp-intro.texi:1156 emacs-lisp-intro.texi:1307
#, no-wrap
msgid "Typing Lists"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:402 emacs-lisp-intro.texi:1156
msgid "How GNU Emacs helps you type lists."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:404 emacs-lisp-intro.texi:1576
#, no-wrap
msgid "The Lisp Interpreter"
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:407 emacs-lisp-intro.texi:1598 emacs-lisp-intro.texi:1601 emacs-lisp-intro.texi:1602
#, no-wrap
msgid "Complications"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:407 emacs-lisp-intro.texi:1598
msgid "Variables, Special forms, Lists within."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:407 emacs-lisp-intro.texi:1598 emacs-lisp-intro.texi:1632 emacs-lisp-intro.texi:1633
#, no-wrap
msgid "Byte Compiling"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:407 emacs-lisp-intro.texi:1598
msgid "Specially processing code for speed."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:412 emacs-lisp-intro.texi:1669 emacs-lisp-intro.texi:1672
#, no-wrap
msgid "How the Interpreter Acts"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:412 emacs-lisp-intro.texi:1669
msgid "Returns and Side Effects..."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:412 emacs-lisp-intro.texi:1669 emacs-lisp-intro.texi:1698 emacs-lisp-intro.texi:1699
#, no-wrap
msgid "Evaluating Inner Lists"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:412 emacs-lisp-intro.texi:1669
msgid "Lists within lists..."
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:419 emacs-lisp-intro.texi:1798
msgid "fill-column Example::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:419 emacs-lisp-intro.texi:1798 emacs-lisp-intro.texi:1838
#, no-wrap
msgid "Void Function"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:419 emacs-lisp-intro.texi:1798
msgid "The error message for a symbol without a function."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:419 emacs-lisp-intro.texi:1798 emacs-lisp-intro.texi:1890
#, no-wrap
msgid "Void Variable"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:419 emacs-lisp-intro.texi:1798
msgid "The error message for a symbol without a value."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:430 emacs-lisp-intro.texi:2007 emacs-lisp-intro.texi:2009 emacs-lisp-intro.texi:2011
#, no-wrap
msgid "Data types"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:430 emacs-lisp-intro.texi:2007
msgid "Types of data passed to a function."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:430 emacs-lisp-intro.texi:2007 emacs-lisp-intro.texi:2063
#, no-wrap
msgid "Args as Variable or List"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:430 emacs-lisp-intro.texi:2007
msgid "An argument can be the value of a variable or list."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:430 emacs-lisp-intro.texi:2007 emacs-lisp-intro.texi:2104 emacs-lisp-intro.texi:2105
#, no-wrap
msgid "Variable Number of Arguments"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:430 emacs-lisp-intro.texi:2007
msgid "Some functions may take a variable number of arguments."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:430 emacs-lisp-intro.texi:2007 emacs-lisp-intro.texi:2148
#, no-wrap
msgid "Wrong Type of Argument"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:430 emacs-lisp-intro.texi:2007
msgid "Passing an argument of the wrong type to a function."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:430 emacs-lisp-intro.texi:2007 emacs-lisp-intro.texi:2242 emacs-lisp-intro.texi:2244 emacs-lisp-intro.texi:4565
#, no-wrap
msgid "message"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:430 emacs-lisp-intro.texi:2007
msgid "A useful function for sending messages."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:432 emacs-lisp-intro.texi:2355
#, no-wrap
msgid "Setting the Value of a Variable"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:436 emacs-lisp-intro.texi:2372 emacs-lisp-intro.texi:2374
#, no-wrap
msgid "Using set"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:436 emacs-lisp-intro.texi:2372
msgid "Setting values."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:436 emacs-lisp-intro.texi:2372 emacs-lisp-intro.texi:2430
#, no-wrap
msgid "Using setq"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:436 emacs-lisp-intro.texi:2372
msgid "Setting a quoted value."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:436 emacs-lisp-intro.texi:2372 emacs-lisp-intro.texi:2490 emacs-lisp-intro.texi:2491 emacs-lisp-intro.texi:2492
#, no-wrap
msgid "Counting"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:436 emacs-lisp-intro.texi:2372
msgid "Using @code{setq} to count."
msgstr ""

#. type: unnumberedsec
#: emacs-lisp-intro.texi:447 emacs-lisp-intro.texi:2643 emacs-lisp-intro.texi:2646 emacs-lisp-intro.texi:2647
#, no-wrap
msgid "How to Evaluate"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:447 emacs-lisp-intro.texi:2643
msgid "Typing editing commands or @kbd{C-x C-e} causes evaluation."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:447 emacs-lisp-intro.texi:2643 emacs-lisp-intro.texi:2677 emacs-lisp-intro.texi:2678
#, no-wrap
msgid "Buffer Names"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:447 emacs-lisp-intro.texi:2643
msgid "Buffers and files are different."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:447 emacs-lisp-intro.texi:2643 emacs-lisp-intro.texi:2802 emacs-lisp-intro.texi:2803
#, no-wrap
msgid "Getting Buffers"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:447 emacs-lisp-intro.texi:2643
msgid "Getting a buffer itself, not merely its name."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:447 emacs-lisp-intro.texi:2643 emacs-lisp-intro.texi:2870 emacs-lisp-intro.texi:2871
#, no-wrap
msgid "Switching Buffers"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:447 emacs-lisp-intro.texi:2643
msgid "How to change to another buffer."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:447 emacs-lisp-intro.texi:2643 emacs-lisp-intro.texi:2959
#, no-wrap
msgid "Buffer Size & Locations"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:447 emacs-lisp-intro.texi:2643
msgid "Where point is located and the size of the buffer."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:447 emacs-lisp-intro.texi:2643 emacs-lisp-intro.texi:3026
#, no-wrap
msgid "Evaluation Exercise"
msgstr ""

#. type: chapter
#: emacs-lisp-intro.texi:449 emacs-lisp-intro.texi:3033
#, no-wrap
msgid "How To Write Function Definitions"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:463 emacs-lisp-intro.texi:3060
msgid "Primitive Functions::"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:463 emacs-lisp-intro.texi:3060 emacs-lisp-intro.texi:3088 emacs-lisp-intro.texi:3090 emacs-lisp-intro.texi:4387
#, no-wrap
msgid "defun"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:463 emacs-lisp-intro.texi:3060
msgid "The @code{defun} special form."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:463 emacs-lisp-intro.texi:3060 emacs-lisp-intro.texi:3260 emacs-lisp-intro.texi:20178
#, no-wrap
msgid "Install"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:463 emacs-lisp-intro.texi:3060
msgid "Install a function definition."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:463 emacs-lisp-intro.texi:3060 emacs-lisp-intro.texi:3373
#, no-wrap
msgid "Interactive"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:463 emacs-lisp-intro.texi:3060
msgid "Making a function interactive."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:463 emacs-lisp-intro.texi:3060 emacs-lisp-intro.texi:3522
#, no-wrap
msgid "Interactive Options"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:463 emacs-lisp-intro.texi:3060
msgid "Different options for @code{interactive}."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:463 emacs-lisp-intro.texi:3060 emacs-lisp-intro.texi:3600
#, no-wrap
msgid "Permanent Installation"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:463 emacs-lisp-intro.texi:3060
msgid "Installing code permanently."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:463 emacs-lisp-intro.texi:475 emacs-lisp-intro.texi:3060 emacs-lisp-intro.texi:3648 emacs-lisp-intro.texi:3649 emacs-lisp-intro.texi:3650 emacs-lisp-intro.texi:4457
#, no-wrap
msgid "let"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:463 emacs-lisp-intro.texi:3060
msgid "Creating and initializing local variables."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:463 emacs-lisp-intro.texi:3060 emacs-lisp-intro.texi:3865 emacs-lisp-intro.texi:3867 emacs-lisp-intro.texi:4496
#, no-wrap
msgid "if"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:463 emacs-lisp-intro.texi:3060
msgid "What if?"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:463 emacs-lisp-intro.texi:3060 emacs-lisp-intro.texi:4065
#, no-wrap
msgid "else"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:463 emacs-lisp-intro.texi:3060
msgid "If--then--else expressions."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:463 emacs-lisp-intro.texi:3060 emacs-lisp-intro.texi:4153
#, no-wrap
msgid "Truth & Falsehood"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:463 emacs-lisp-intro.texi:3060
msgid "What Lisp considers false and true."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:463 emacs-lisp-intro.texi:491 emacs-lisp-intro.texi:3060 emacs-lisp-intro.texi:4240 emacs-lisp-intro.texi:4241 emacs-lisp-intro.texi:4242 emacs-lisp-intro.texi:4479 emacs-lisp-intro.texi:5483
#, no-wrap
msgid "save-excursion"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:463 emacs-lisp-intro.texi:3060
msgid "Keeping track of point, mark, and buffer."
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:463 emacs-lisp-intro.texi:3060
msgid "Review::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:463 emacs-lisp-intro.texi:3060 emacs-lisp-intro.texi:4626
#, no-wrap
msgid "defun Exercises"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:465 emacs-lisp-intro.texi:3261 emacs-lisp-intro.texi:3262
#, no-wrap
msgid "Install a Function Definition"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:468 emacs-lisp-intro.texi:3295
msgid "Effect of installation::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:468 emacs-lisp-intro.texi:3295 emacs-lisp-intro.texi:3328
#, no-wrap
msgid "Change a defun"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:468 emacs-lisp-intro.texi:3295
msgid "How to change a function definition."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:470 emacs-lisp-intro.texi:3374
#, no-wrap
msgid "Make a Function Interactive"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:473 emacs-lisp-intro.texi:3395 emacs-lisp-intro.texi:3398
#, no-wrap
msgid "Interactive multiply-by-seven"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:473 emacs-lisp-intro.texi:3395
msgid "An overview."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:473 emacs-lisp-intro.texi:3395 emacs-lisp-intro.texi:3453
#, no-wrap
msgid "multiply-by-seven in detail"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:473 emacs-lisp-intro.texi:3395
msgid "The interactive version."
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:480 emacs-lisp-intro.texi:3678
msgid "Prevent confusion::"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:480 emacs-lisp-intro.texi:3678
msgid "Parts of let Expression::"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:480 emacs-lisp-intro.texi:3678
msgid "Sample let Expression::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:480 emacs-lisp-intro.texi:3678 emacs-lisp-intro.texi:3817
#, no-wrap
msgid "Uninitialized let Variables"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:482 emacs-lisp-intro.texi:3866
#, no-wrap
msgid "The @code{if} Special Form"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:485 emacs-lisp-intro.texi:3885
msgid "if in more detail::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:485 emacs-lisp-intro.texi:3885 emacs-lisp-intro.texi:3978
#, no-wrap
msgid "type-of-animal in detail"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:485 emacs-lisp-intro.texi:3885
msgid "An example of an @code{if} expression."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:487 emacs-lisp-intro.texi:4154
#, no-wrap
msgid "Truth and Falsehood in Emacs Lisp"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:489 emacs-lisp-intro.texi:4174 emacs-lisp-intro.texi:4177
#, no-wrap
msgid "nil explained"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:489 emacs-lisp-intro.texi:4174
msgid "@code{nil} has two meanings."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:494 emacs-lisp-intro.texi:4262 emacs-lisp-intro.texi:4265
#, no-wrap
msgid "Point and mark"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:494 emacs-lisp-intro.texi:4262
msgid "A review of various locations."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:494 emacs-lisp-intro.texi:4262 emacs-lisp-intro.texi:4322
#, no-wrap
msgid "Template for save-excursion"
msgstr ""

#. type: chapter
#: emacs-lisp-intro.texi:496 emacs-lisp-intro.texi:4641
#, no-wrap
msgid "A Few Buffer--Related Functions"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:505 emacs-lisp-intro.texi:4660 emacs-lisp-intro.texi:4662
#, no-wrap
msgid "Finding More"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:505 emacs-lisp-intro.texi:4660
msgid "How to find more information."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:505 emacs-lisp-intro.texi:4660 emacs-lisp-intro.texi:4758 emacs-lisp-intro.texi:4760
#, no-wrap
msgid "simplified-beginning-of-buffer"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:505 emacs-lisp-intro.texi:526 emacs-lisp-intro.texi:4660 emacs-lisp-intro.texi:5553
msgid "Shows @code{goto-char}, @code{point-min}, and @code{push-mark}."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:505 emacs-lisp-intro.texi:4660 emacs-lisp-intro.texi:4886 emacs-lisp-intro.texi:4888 emacs-lisp-intro.texi:5502
#, no-wrap
msgid "mark-whole-buffer"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:505 emacs-lisp-intro.texi:4660
msgid "Almost the same as @code{beginning-of-buffer}."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:505 emacs-lisp-intro.texi:4660 emacs-lisp-intro.texi:5025 emacs-lisp-intro.texi:5027
#, no-wrap
msgid "append-to-buffer"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:505 emacs-lisp-intro.texi:4660
msgid "Uses @code{save-excursion} and @code{insert-buffer-substring}."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:505 emacs-lisp-intro.texi:4660 emacs-lisp-intro.texi:5466
#, no-wrap
msgid "Buffer Related Review"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:505 emacs-lisp-intro.texi:4660
msgid "Review."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:505 emacs-lisp-intro.texi:4660 emacs-lisp-intro.texi:5518
#, no-wrap
msgid "Buffer Exercises"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:507 emacs-lisp-intro.texi:4887
#, no-wrap
msgid "The Definition of @code{mark-whole-buffer}"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:510 emacs-lisp-intro.texi:4903
msgid "mark-whole-buffer overview::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:510 emacs-lisp-intro.texi:4903 emacs-lisp-intro.texi:4952
#, no-wrap
msgid "Body of mark-whole-buffer"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:510 emacs-lisp-intro.texi:4903
msgid "Only three lines of code."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:512 emacs-lisp-intro.texi:5026
#, no-wrap
msgid "The Definition of @code{append-to-buffer}"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:517 emacs-lisp-intro.texi:5039
msgid "append-to-buffer overview::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:517 emacs-lisp-intro.texi:5039 emacs-lisp-intro.texi:5122
#, no-wrap
msgid "append interactive"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:517 emacs-lisp-intro.texi:5039
msgid "A two part interactive expression."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:517 emacs-lisp-intro.texi:5039 emacs-lisp-intro.texi:5190
#, no-wrap
msgid "append-to-buffer body"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:517 emacs-lisp-intro.texi:5039
msgid "Incorporates a @code{let} expression."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:517 emacs-lisp-intro.texi:5039 emacs-lisp-intro.texi:5289
#, no-wrap
msgid "append save-excursion"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:517 emacs-lisp-intro.texi:5039
msgid "How the @code{save-excursion} works."
msgstr ""

#. type: chapter
#: emacs-lisp-intro.texi:519 emacs-lisp-intro.texi:5536
#, no-wrap
msgid "A Few More Complex Functions"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:526 emacs-lisp-intro.texi:5553 emacs-lisp-intro.texi:5555 emacs-lisp-intro.texi:5557
#, no-wrap
msgid "copy-to-buffer"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:526 emacs-lisp-intro.texi:5553
msgid "With @code{set-buffer}, @code{get-buffer-create}."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:526 emacs-lisp-intro.texi:5553 emacs-lisp-intro.texi:5633 emacs-lisp-intro.texi:5635
#, no-wrap
msgid "insert-buffer"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:526 emacs-lisp-intro.texi:5553
msgid "Read-only, and with @code{or}."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:526 emacs-lisp-intro.texi:5553 emacs-lisp-intro.texi:6063 emacs-lisp-intro.texi:6065
#, no-wrap
msgid "beginning-of-buffer"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:526 emacs-lisp-intro.texi:5553
msgid "Second Buffer Related Review::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:526 emacs-lisp-intro.texi:5553 emacs-lisp-intro.texi:6547
#, no-wrap
msgid "optional Exercise"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:528 emacs-lisp-intro.texi:5634
#, no-wrap
msgid "The Definition of @code{insert-buffer}"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:536 emacs-lisp-intro.texi:5660
msgid "insert-buffer code::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:536 emacs-lisp-intro.texi:5660 emacs-lisp-intro.texi:5707
#, no-wrap
msgid "insert-buffer interactive"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:536 emacs-lisp-intro.texi:5660
msgid "When you can read, but not write."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:536 emacs-lisp-intro.texi:5660 emacs-lisp-intro.texi:5754
#, no-wrap
msgid "insert-buffer body"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:536 emacs-lisp-intro.texi:5660
msgid "The body has an @code{or} and a @code{let}."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:536 emacs-lisp-intro.texi:5660 emacs-lisp-intro.texi:5789
#, no-wrap
msgid "if & or"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:536 emacs-lisp-intro.texi:5660
msgid "Using an @code{if} instead of an @code{or}."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:536 emacs-lisp-intro.texi:5660 emacs-lisp-intro.texi:5869
#, no-wrap
msgid "Insert or"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:536 emacs-lisp-intro.texi:5660
msgid "How the @code{or} expression works."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:536 emacs-lisp-intro.texi:5660 emacs-lisp-intro.texi:5927
#, no-wrap
msgid "Insert let"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:536 emacs-lisp-intro.texi:5660
msgid "Two @code{save-excursion} expressions."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:536 emacs-lisp-intro.texi:5660 emacs-lisp-intro.texi:6025
#, no-wrap
msgid "New insert-buffer"
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:538 emacs-lisp-intro.texi:5708
#, no-wrap
msgid "The Interactive Expression in @code{insert-buffer}"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:541 emacs-lisp-intro.texi:5718 emacs-lisp-intro.texi:5720 emacs-lisp-intro.texi:5722
#, no-wrap
msgid "Read-only buffer"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:541 emacs-lisp-intro.texi:5718
msgid "When a buffer cannot be modified."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:541 emacs-lisp-intro.texi:5718 emacs-lisp-intro.texi:5734
#, no-wrap
msgid "b for interactive"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:541 emacs-lisp-intro.texi:5718
msgid "An existing buffer or else its name."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:543 emacs-lisp-intro.texi:6064
#, no-wrap
msgid "Complete Definition of @code{beginning-of-buffer}"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:547 emacs-lisp-intro.texi:6093
msgid "Optional Arguments::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:547 emacs-lisp-intro.texi:6093 emacs-lisp-intro.texi:6178
#, no-wrap
msgid "beginning-of-buffer opt arg"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:547 emacs-lisp-intro.texi:6093
msgid "Example with optional argument."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:547 emacs-lisp-intro.texi:6093 emacs-lisp-intro.texi:6376
#, no-wrap
msgid "beginning-of-buffer complete"
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:549 emacs-lisp-intro.texi:6179
#, no-wrap
msgid "@code{beginning-of-buffer} with an Argument"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:553 emacs-lisp-intro.texi:6204
msgid "Disentangle beginning-of-buffer::"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:553 emacs-lisp-intro.texi:6204
msgid "Large buffer case::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:553 emacs-lisp-intro.texi:6204 emacs-lisp-intro.texi:6319
#, no-wrap
msgid "Small buffer case"
msgstr ""

#. type: chapter
#: emacs-lisp-intro.texi:555 emacs-lisp-intro.texi:6557
#, no-wrap
msgid "Narrowing and Widening"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:560 emacs-lisp-intro.texi:6572 emacs-lisp-intro.texi:6575
#, no-wrap
msgid "Narrowing advantages"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:560 emacs-lisp-intro.texi:6572
msgid "The advantages of narrowing"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:560 emacs-lisp-intro.texi:6572 emacs-lisp-intro.texi:6609 emacs-lisp-intro.texi:6611 emacs-lisp-intro.texi:9495
#, no-wrap
msgid "save-restriction"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:560 emacs-lisp-intro.texi:6572
msgid "The @code{save-restriction} special form."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:560 emacs-lisp-intro.texi:6572 emacs-lisp-intro.texi:6726 emacs-lisp-intro.texi:6727 emacs-lisp-intro.texi:6728
#, no-wrap
msgid "what-line"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:560 emacs-lisp-intro.texi:6572
msgid "The number of the line that point is on."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:560 emacs-lisp-intro.texi:6572 emacs-lisp-intro.texi:6859
#, no-wrap
msgid "narrow Exercise"
msgstr ""

#. type: chapter
#: emacs-lisp-intro.texi:562 emacs-lisp-intro.texi:6883
#, no-wrap
msgid "@code{car}, @code{cdr}, @code{cons}: Fundamental Functions"
msgstr ""

#. type: unnumberedsec
#: emacs-lisp-intro.texi:571 emacs-lisp-intro.texi:6904 emacs-lisp-intro.texi:6907 emacs-lisp-intro.texi:6908
#, no-wrap
msgid "Strange Names"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:571 emacs-lisp-intro.texi:6904
msgid "An historical aside: why the strange names?"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:571 emacs-lisp-intro.texi:6904 emacs-lisp-intro.texi:6926
#, no-wrap
msgid "car & cdr"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:571 emacs-lisp-intro.texi:6904
msgid "Functions for extracting part of a list."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:571 emacs-lisp-intro.texi:573 emacs-lisp-intro.texi:6904 emacs-lisp-intro.texi:7048 emacs-lisp-intro.texi:7049 emacs-lisp-intro.texi:9418
#, no-wrap
msgid "cons"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:571 emacs-lisp-intro.texi:6904
msgid "Constructing a list."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:571 emacs-lisp-intro.texi:6904 emacs-lisp-intro.texi:7217 emacs-lisp-intro.texi:7218 emacs-lisp-intro.texi:7219 emacs-lisp-intro.texi:8364 emacs-lisp-intro.texi:9436
#, no-wrap
msgid "nthcdr"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:571 emacs-lisp-intro.texi:6904
msgid "Calling @code{cdr} repeatedly."
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:571 emacs-lisp-intro.texi:6904
msgid "nth::"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:571 emacs-lisp-intro.texi:6904 emacs-lisp-intro.texi:7393 emacs-lisp-intro.texi:7394 emacs-lisp-intro.texi:7395 emacs-lisp-intro.texi:9457
#, no-wrap
msgid "setcar"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:571 emacs-lisp-intro.texi:6904
msgid "Changing the first element of a list."
msgstr ""

#. type: itemx
#: emacs-lisp-intro.texi:571 emacs-lisp-intro.texi:6904 emacs-lisp-intro.texi:7468 emacs-lisp-intro.texi:7469 emacs-lisp-intro.texi:7470 emacs-lisp-intro.texi:9458
#, no-wrap
msgid "setcdr"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:571 emacs-lisp-intro.texi:6904
msgid "Changing the rest of a list."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:571 emacs-lisp-intro.texi:6904 emacs-lisp-intro.texi:7527
#, no-wrap
msgid "cons Exercise"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:576 emacs-lisp-intro.texi:7083
msgid "Build a list::"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:576 emacs-lisp-intro.texi:7083 emacs-lisp-intro.texi:7136 emacs-lisp-intro.texi:7138
#, no-wrap
msgid "length"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:576 emacs-lisp-intro.texi:7083
msgid "How to find the length of a list."
msgstr ""

#. type: chapter
#: emacs-lisp-intro.texi:578 emacs-lisp-intro.texi:7536
#, no-wrap
msgid "Cutting and Storing Text"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:587 emacs-lisp-intro.texi:7565 emacs-lisp-intro.texi:7568
#, no-wrap
msgid "Storing Text"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:587 emacs-lisp-intro.texi:7565
msgid "Text is stored in a list."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:587 emacs-lisp-intro.texi:589 emacs-lisp-intro.texi:7565 emacs-lisp-intro.texi:7634 emacs-lisp-intro.texi:7635 emacs-lisp-intro.texi:7636
#, no-wrap
msgid "zap-to-char"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:587 emacs-lisp-intro.texi:7565
msgid "Cutting out text up to a character."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:587 emacs-lisp-intro.texi:598 emacs-lisp-intro.texi:7565 emacs-lisp-intro.texi:7932 emacs-lisp-intro.texi:7933 emacs-lisp-intro.texi:7934 emacs-lisp-intro.texi:9526
#, no-wrap
msgid "kill-region"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:587 emacs-lisp-intro.texi:7565
msgid "Cutting text out of a region."
msgstr ""

#. type: itemx
#: emacs-lisp-intro.texi:587 emacs-lisp-intro.texi:604 emacs-lisp-intro.texi:7565 emacs-lisp-intro.texi:8361 emacs-lisp-intro.texi:8362 emacs-lisp-intro.texi:8363 emacs-lisp-intro.texi:9528
#, no-wrap
msgid "copy-region-as-kill"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:587 emacs-lisp-intro.texi:7565
msgid "A definition for copying text."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:587 emacs-lisp-intro.texi:7565 emacs-lisp-intro.texi:9101 emacs-lisp-intro.texi:9102 emacs-lisp-intro.texi:9105
#, no-wrap
msgid "Digression into C"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:587 emacs-lisp-intro.texi:7565
msgid "Minor note on C programming language macros."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:587 emacs-lisp-intro.texi:7565 emacs-lisp-intro.texi:9248 emacs-lisp-intro.texi:9250
#, no-wrap
msgid "defvar"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:587 emacs-lisp-intro.texi:7565
msgid "How to give a variable an initial value."
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:587 emacs-lisp-intro.texi:7565
msgid "cons & search-fwd Review::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:587 emacs-lisp-intro.texi:7565 emacs-lisp-intro.texi:9544
#, no-wrap
msgid "search Exercises"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:596 emacs-lisp-intro.texi:7660 emacs-lisp-intro.texi:7663
#, no-wrap
msgid "Complete zap-to-char"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:596 emacs-lisp-intro.texi:7660
msgid "The complete implementation."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:596 emacs-lisp-intro.texi:7660 emacs-lisp-intro.texi:7723
#, no-wrap
msgid "zap-to-char interactive"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:596 emacs-lisp-intro.texi:7660
msgid "A three part interactive expression."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:596 emacs-lisp-intro.texi:7660 emacs-lisp-intro.texi:7758
#, no-wrap
msgid "zap-to-char body"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:596 emacs-lisp-intro.texi:7660
msgid "A short overview."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:596 emacs-lisp-intro.texi:7660 emacs-lisp-intro.texi:7796 emacs-lisp-intro.texi:7798 emacs-lisp-intro.texi:9499
#, no-wrap
msgid "search-forward"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:596 emacs-lisp-intro.texi:7660
msgid "How to search for a string."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:596 emacs-lisp-intro.texi:7660 emacs-lisp-intro.texi:7871 emacs-lisp-intro.texi:7873 emacs-lisp-intro.texi:9481
#, no-wrap
msgid "progn"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:596 emacs-lisp-intro.texi:7660
msgid "The @code{progn} special form."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:596 emacs-lisp-intro.texi:7660 emacs-lisp-intro.texi:7911
#, no-wrap
msgid "Summing up zap-to-char"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:596 emacs-lisp-intro.texi:7660
msgid "Using @code{point} and @code{search-forward}."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:602 emacs-lisp-intro.texi:8014 emacs-lisp-intro.texi:8017
#, no-wrap
msgid "Complete kill-region"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:602 emacs-lisp-intro.texi:8014
msgid "The function definition."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:602 emacs-lisp-intro.texi:8014 emacs-lisp-intro.texi:8204 emacs-lisp-intro.texi:8205 emacs-lisp-intro.texi:8206
#, no-wrap
msgid "condition-case"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:602 emacs-lisp-intro.texi:8014
msgid "Dealing with a problem."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:602 emacs-lisp-intro.texi:8014 emacs-lisp-intro.texi:8290 emacs-lisp-intro.texi:8291 emacs-lisp-intro.texi:8293
#, no-wrap
msgid "Lisp macro"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:607 emacs-lisp-intro.texi:8380 emacs-lisp-intro.texi:8383
#, no-wrap
msgid "Complete copy-region-as-kill"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:607 emacs-lisp-intro.texi:8380
msgid "The complete function definition."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:607 emacs-lisp-intro.texi:8380 emacs-lisp-intro.texi:8461
#, no-wrap
msgid "copy-region-as-kill body"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:607 emacs-lisp-intro.texi:8380
msgid "The body of @code{copy-region-as-kill}."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:609 emacs-lisp-intro.texi:8462
#, no-wrap
msgid "The Body of @code{copy-region-as-kill}"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:613 emacs-lisp-intro.texi:8482
msgid "last-command & this-command::"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:613 emacs-lisp-intro.texi:8482
msgid "kill-append function::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:613 emacs-lisp-intro.texi:8482 emacs-lisp-intro.texi:8672
#, no-wrap
msgid "kill-new function"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:615 emacs-lisp-intro.texi:9249
#, no-wrap
msgid "Initializing a Variable with @code{defvar}"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:618 emacs-lisp-intro.texi:9295
msgid "See variable current value::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:618 emacs-lisp-intro.texi:9295 emacs-lisp-intro.texi:9349
#, no-wrap
msgid "defvar and asterisk"
msgstr ""

#. type: chapter
#: emacs-lisp-intro.texi:620 emacs-lisp-intro.texi:9563
#, no-wrap
msgid "How Lists are Implemented"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:624 emacs-lisp-intro.texi:9584
msgid "Lists diagrammed::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:624 emacs-lisp-intro.texi:9584 emacs-lisp-intro.texi:9926
#, no-wrap
msgid "Symbols as Chest"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:624 emacs-lisp-intro.texi:9584
msgid "Exploring a powerful metaphor."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:624 emacs-lisp-intro.texi:9584 emacs-lisp-intro.texi:10027
#, no-wrap
msgid "List Exercise"
msgstr ""

#. type: chapter
#: emacs-lisp-intro.texi:626 emacs-lisp-intro.texi:10036
#, no-wrap
msgid "Yanking Text Back"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:630 emacs-lisp-intro.texi:10064
msgid "Kill Ring Overview::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:630 emacs-lisp-intro.texi:10064 emacs-lisp-intro.texi:10109
#, no-wrap
msgid "kill-ring-yank-pointer"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:630 emacs-lisp-intro.texi:10064
msgid "The kill ring is a list."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:630 emacs-lisp-intro.texi:10064 emacs-lisp-intro.texi:10248
#, no-wrap
msgid "yank nthcdr Exercises"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:630 emacs-lisp-intro.texi:10064
msgid "The @code{kill-ring-yank-pointer} variable."
msgstr ""

#. type: chapter
#: emacs-lisp-intro.texi:632 emacs-lisp-intro.texi:10266
#, no-wrap
msgid "Loops and Recursion"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:637 emacs-lisp-intro.texi:639 emacs-lisp-intro.texi:10299 emacs-lisp-intro.texi:10301 emacs-lisp-intro.texi:10302 emacs-lisp-intro.texi:10304 emacs-lisp-intro.texi:13581
#, no-wrap
msgid "while"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:637 emacs-lisp-intro.texi:10299
msgid "Causing a stretch of code to repeat."
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:637 emacs-lisp-intro.texi:10299
msgid "dolist dotimes::"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:637 emacs-lisp-intro.texi:665 emacs-lisp-intro.texi:10299 emacs-lisp-intro.texi:11246 emacs-lisp-intro.texi:11247 emacs-lisp-intro.texi:11248
#, no-wrap
msgid "Recursion"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:637 emacs-lisp-intro.texi:10299
msgid "Causing a function to call itself."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:637 emacs-lisp-intro.texi:10299 emacs-lisp-intro.texi:12212
#, no-wrap
msgid "Looping exercise"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:646 emacs-lisp-intro.texi:10337 emacs-lisp-intro.texi:10340
#, no-wrap
msgid "Looping with while"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:646 emacs-lisp-intro.texi:10337
msgid "Repeat so long as test returns true."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:646 emacs-lisp-intro.texi:10337 emacs-lisp-intro.texi:10373
#, no-wrap
msgid "Loop Example"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:646 emacs-lisp-intro.texi:10337
msgid "A @code{while} loop that uses a list."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:646 emacs-lisp-intro.texi:10337 emacs-lisp-intro.texi:10477 emacs-lisp-intro.texi:10479
#, no-wrap
msgid "print-elements-of-list"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:646 emacs-lisp-intro.texi:10337
msgid "Uses @code{while}, @code{car}, @code{cdr}."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:646 emacs-lisp-intro.texi:10337 emacs-lisp-intro.texi:10556
#, no-wrap
msgid "Incrementing Loop"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:646 emacs-lisp-intro.texi:10337
msgid "A loop with an incrementing counter."
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:646 emacs-lisp-intro.texi:10337
msgid "Incrementing Loop Details::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:646 emacs-lisp-intro.texi:10337 emacs-lisp-intro.texi:10876
#, no-wrap
msgid "Decrementing Loop"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:646 emacs-lisp-intro.texi:10337
msgid "A loop with a decrementing counter."
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:648 emacs-lisp-intro.texi:10568
#, no-wrap
msgid "Details of an Incrementing Loop"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:652 emacs-lisp-intro.texi:10603 emacs-lisp-intro.texi:10605
#, no-wrap
msgid "Incrementing Example"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:652 emacs-lisp-intro.texi:10603
msgid "Counting pebbles in a triangle."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:652 emacs-lisp-intro.texi:10603 emacs-lisp-intro.texi:10672
#, no-wrap
msgid "Inc Example parts"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:652 emacs-lisp-intro.texi:658 emacs-lisp-intro.texi:10603 emacs-lisp-intro.texi:10910
msgid "The parts of the function definition."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:652 emacs-lisp-intro.texi:10603 emacs-lisp-intro.texi:10766
#, no-wrap
msgid "Inc Example altogether"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:652 emacs-lisp-intro.texi:658 emacs-lisp-intro.texi:10603 emacs-lisp-intro.texi:10910
msgid "Putting the function definition together."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:654 emacs-lisp-intro.texi:10877
#, no-wrap
msgid "Loop with a Decrementing Counter"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:658 emacs-lisp-intro.texi:10910 emacs-lisp-intro.texi:10912
#, no-wrap
msgid "Decrementing Example"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:658 emacs-lisp-intro.texi:10910
msgid "More pebbles on the beach."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:658 emacs-lisp-intro.texi:10910 emacs-lisp-intro.texi:10939
#, no-wrap
msgid "Dec Example parts"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:658 emacs-lisp-intro.texi:10910 emacs-lisp-intro.texi:11001
#, no-wrap
msgid "Dec Example altogether"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:660 emacs-lisp-intro.texi:11073
#, no-wrap
msgid "Save your time: @code{dolist} and @code{dotimes}"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:663 emacs-lisp-intro.texi:11090
msgid "dolist::"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:663 emacs-lisp-intro.texi:11090 emacs-lisp-intro.texi:11196 emacs-lisp-intro.texi:11198
#, no-wrap
msgid "dotimes"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:674 emacs-lisp-intro.texi:11270 emacs-lisp-intro.texi:11272
#, no-wrap
msgid "Building Robots"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:674 emacs-lisp-intro.texi:11270
msgid "Same model, different serial number ..."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:674 emacs-lisp-intro.texi:11270 emacs-lisp-intro.texi:11309 emacs-lisp-intro.texi:11312
#, no-wrap
msgid "Recursive Definition Parts"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:674 emacs-lisp-intro.texi:11270
msgid "Walk until you stop ..."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:674 emacs-lisp-intro.texi:11270 emacs-lisp-intro.texi:11373
#, no-wrap
msgid "Recursion with list"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:674 emacs-lisp-intro.texi:11270
msgid "Using a list as the test whether to recurse."
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:674 emacs-lisp-intro.texi:11270
msgid "Recursive triangle function::"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:674 emacs-lisp-intro.texi:11270
msgid "Recursion with cond::"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:674 emacs-lisp-intro.texi:681 emacs-lisp-intro.texi:11270 emacs-lisp-intro.texi:11732 emacs-lisp-intro.texi:11733 emacs-lisp-intro.texi:11734
#, no-wrap
msgid "Recursive Patterns"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:674 emacs-lisp-intro.texi:11270
msgid "Often used templates."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:674 emacs-lisp-intro.texi:11270 emacs-lisp-intro.texi:11965
#, no-wrap
msgid "No Deferment"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:674 emacs-lisp-intro.texi:11270
msgid "Don't store up work ..."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:674 emacs-lisp-intro.texi:11270 emacs-lisp-intro.texi:12048 emacs-lisp-intro.texi:12050
#, no-wrap
msgid "No deferment solution"
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:676 emacs-lisp-intro.texi:11466
#, no-wrap
msgid "Recursion in Place of a Counter"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:679 emacs-lisp-intro.texi:11501
msgid "Recursive Example arg of 1 or 2::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:679 emacs-lisp-intro.texi:11501 emacs-lisp-intro.texi:11566
#, no-wrap
msgid "Recursive Example arg of 3 or 4"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:685 emacs-lisp-intro.texi:11744
msgid "Every::"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:685 emacs-lisp-intro.texi:11744
msgid "Accumulate::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:685 emacs-lisp-intro.texi:11744 emacs-lisp-intro.texi:11896
#, no-wrap
msgid "Keep"
msgstr ""

#. type: chapter
#: emacs-lisp-intro.texi:687 emacs-lisp-intro.texi:12260
#, no-wrap
msgid "Regular Expression Searches"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:695 emacs-lisp-intro.texi:12303 emacs-lisp-intro.texi:12305 emacs-lisp-intro.texi:12307
#, no-wrap
msgid "sentence-end"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:695 emacs-lisp-intro.texi:12303
msgid "The regular expression for @code{sentence-end}."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:695 emacs-lisp-intro.texi:12303 emacs-lisp-intro.texi:12456 emacs-lisp-intro.texi:12458 emacs-lisp-intro.texi:13608
#, no-wrap
msgid "re-search-forward"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:695 emacs-lisp-intro.texi:12303
msgid "Very similar to @code{search-forward}."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:695 emacs-lisp-intro.texi:697 emacs-lisp-intro.texi:12303 emacs-lisp-intro.texi:12530 emacs-lisp-intro.texi:12531 emacs-lisp-intro.texi:12532
#, no-wrap
msgid "forward-sentence"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:695 emacs-lisp-intro.texi:12303
msgid "A straightforward example of regexp search."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:695 emacs-lisp-intro.texi:12303 emacs-lisp-intro.texi:12823 emacs-lisp-intro.texi:12825
#, no-wrap
msgid "forward-paragraph"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:695 emacs-lisp-intro.texi:12303
msgid "A somewhat complex example."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:695 emacs-lisp-intro.texi:12303 emacs-lisp-intro.texi:13451 emacs-lisp-intro.texi:13453
#, no-wrap
msgid "etags"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:695 emacs-lisp-intro.texi:12303
msgid "How to create your own @file{TAGS} table."
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:695 emacs-lisp-intro.texi:12303
msgid "Regexp Review::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:695 emacs-lisp-intro.texi:12303 emacs-lisp-intro.texi:13666
#, no-wrap
msgid "re-search Exercises"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:701 emacs-lisp-intro.texi:12545
msgid "Complete forward-sentence::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:701 emacs-lisp-intro.texi:12545 emacs-lisp-intro.texi:12674
#, no-wrap
msgid "fwd-sentence while loops"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:701 emacs-lisp-intro.texi:12545
msgid "Two @code{while} loops."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:701 emacs-lisp-intro.texi:12545 emacs-lisp-intro.texi:12775
#, no-wrap
msgid "fwd-sentence re-search"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:701 emacs-lisp-intro.texi:12545
msgid "A regular expression search."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:703 emacs-lisp-intro.texi:12824
#, no-wrap
msgid "@code{forward-paragraph}: a Goldmine of Functions"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:707 emacs-lisp-intro.texi:13004 emacs-lisp-intro.texi:13007
#, no-wrap
msgid "forward-paragraph in brief"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:707 emacs-lisp-intro.texi:13004
msgid "Key parts of the function definition."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:707 emacs-lisp-intro.texi:13004 emacs-lisp-intro.texi:13046
#, no-wrap
msgid "fwd-para let"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:707 emacs-lisp-intro.texi:13004
msgid "The @code{let*} expression."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:707 emacs-lisp-intro.texi:13004 emacs-lisp-intro.texi:13178
#, no-wrap
msgid "fwd-para while"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:707 emacs-lisp-intro.texi:13004
msgid "The forward motion @code{while} loop."
msgstr ""

#. type: chapter
#: emacs-lisp-intro.texi:709 emacs-lisp-intro.texi:13685
#, no-wrap
msgid "Counting: Repetition and Regexps"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:714 emacs-lisp-intro.texi:13699
msgid "Why Count Words::"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:714 emacs-lisp-intro.texi:13699 emacs-lisp-intro.texi:13723 emacs-lisp-intro.texi:13725
#, no-wrap
msgid "@value{COUNT-WORDS}"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:714 emacs-lisp-intro.texi:13699
msgid "Use a regexp, but find a problem."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:714 emacs-lisp-intro.texi:13699 emacs-lisp-intro.texi:14177 emacs-lisp-intro.texi:14495
#, no-wrap
msgid "recursive-count-words"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:714 emacs-lisp-intro.texi:13699
msgid "Start with case of no words in region."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:714 emacs-lisp-intro.texi:13699 emacs-lisp-intro.texi:14555
#, no-wrap
msgid "Counting Exercise"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:716 emacs-lisp-intro.texi:13724
#, no-wrap
msgid "The @code{@value{COUNT-WORDS}} Function"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:719 emacs-lisp-intro.texi:13746 emacs-lisp-intro.texi:13749
#, no-wrap
msgid "Design @value{COUNT-WORDS}"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:719 emacs-lisp-intro.texi:13746
msgid "The definition using a @code{while} loop."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:719 emacs-lisp-intro.texi:13746 emacs-lisp-intro.texi:13925
#, no-wrap
msgid "Whitespace Bug"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:719 emacs-lisp-intro.texi:13746
msgid "The Whitespace Bug in @code{@value{COUNT-WORDS}}."
msgstr ""

#. type: chapter
#: emacs-lisp-intro.texi:721 emacs-lisp-intro.texi:14563
#, no-wrap
msgid "Counting Words in a @code{defun}"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:732 emacs-lisp-intro.texi:14593
msgid "Divide and Conquer::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:732 emacs-lisp-intro.texi:14593 emacs-lisp-intro.texi:14633
#, no-wrap
msgid "Words and Symbols"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:732 emacs-lisp-intro.texi:14593
msgid "What to count?"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:732 emacs-lisp-intro.texi:14593 emacs-lisp-intro.texi:14687
#, no-wrap
msgid "Syntax"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:732 emacs-lisp-intro.texi:14593
msgid "What constitutes a word or symbol?"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:732 emacs-lisp-intro.texi:14593 emacs-lisp-intro.texi:14771 emacs-lisp-intro.texi:14887
#, no-wrap
msgid "count-words-in-defun"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:732 emacs-lisp-intro.texi:14593
msgid "Very like @code{@value{COUNT-WORDS}}."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:732 emacs-lisp-intro.texi:14593 emacs-lisp-intro.texi:14965
#, no-wrap
msgid "Several defuns"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:732 emacs-lisp-intro.texi:14593
msgid "Counting several defuns in a file."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:732 emacs-lisp-intro.texi:14593 emacs-lisp-intro.texi:15020 emacs-lisp-intro.texi:15021 emacs-lisp-intro.texi:15022
#, no-wrap
msgid "Find a File"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:732 emacs-lisp-intro.texi:14593
msgid "Do you want to look at a file?"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:732 emacs-lisp-intro.texi:14593 emacs-lisp-intro.texi:15103 emacs-lisp-intro.texi:15112
#, no-wrap
msgid "lengths-list-file"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:732 emacs-lisp-intro.texi:14593
msgid "A list of the lengths of many definitions."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:732 emacs-lisp-intro.texi:14593 emacs-lisp-intro.texi:15244
#, no-wrap
msgid "Several files"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:732 emacs-lisp-intro.texi:14593
msgid "Counting in definitions in different files."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:732 emacs-lisp-intro.texi:14593 emacs-lisp-intro.texi:15392
#, no-wrap
msgid "Several files recursively"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:732 emacs-lisp-intro.texi:14593
msgid "Recursively counting in different files."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:732 emacs-lisp-intro.texi:14593 emacs-lisp-intro.texi:15475
#, no-wrap
msgid "Prepare the data"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:732 emacs-lisp-intro.texi:14593
msgid "Prepare the data for display in a graph."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:734 emacs-lisp-intro.texi:15245
#, no-wrap
msgid "Count Words in @code{defuns} in Different Files"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:737 emacs-lisp-intro.texi:15258 emacs-lisp-intro.texi:15261 emacs-lisp-intro.texi:15297
#, no-wrap
msgid "lengths-list-many-files"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:737 emacs-lisp-intro.texi:15258
msgid "Return a list of the lengths of defuns."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:737 emacs-lisp-intro.texi:15258 emacs-lisp-intro.texi:15357
#, no-wrap
msgid "append"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:737 emacs-lisp-intro.texi:15258
msgid "Attach one list to another."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:739 emacs-lisp-intro.texi:15476
#, no-wrap
msgid "Prepare the Data for Display in a Graph"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:744 emacs-lisp-intro.texi:15496
msgid "Data for Display in Detail::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:744 emacs-lisp-intro.texi:15496 emacs-lisp-intro.texi:15517
#, no-wrap
msgid "Sorting"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:744 emacs-lisp-intro.texi:15496
msgid "Sorting lists."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:744 emacs-lisp-intro.texi:15496 emacs-lisp-intro.texi:15596
#, no-wrap
msgid "Files List"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:744 emacs-lisp-intro.texi:15496
msgid "Making a list of files."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:744 emacs-lisp-intro.texi:15496 emacs-lisp-intro.texi:15857 emacs-lisp-intro.texi:15858
#, no-wrap
msgid "Counting function definitions"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:752 emacs-lisp-intro.texi:16191
msgid "Columns of a graph::"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:752 emacs-lisp-intro.texi:16191 emacs-lisp-intro.texi:16566 emacs-lisp-intro.texi:16568
#, no-wrap
msgid "graph-body-print"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:752 emacs-lisp-intro.texi:16191
msgid "How to print the body of a graph."
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:752 emacs-lisp-intro.texi:16191
msgid "recursive-graph-body-print::"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:752 emacs-lisp-intro.texi:16191
msgid "Printed Axes::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:752 emacs-lisp-intro.texi:16191 emacs-lisp-intro.texi:16825
#, no-wrap
msgid "Line Graph Exercise"
msgstr ""

#. type: chapter
#: emacs-lisp-intro.texi:754 emacs-lisp-intro.texi:16831
#, no-wrap
msgid "Your @file{.emacs} File"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860
msgid "Default Configuration::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860 emacs-lisp-intro.texi:16909
#, no-wrap
msgid "Site-wide Init"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860
msgid "You can write site-wide init files."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860 emacs-lisp-intro.texi:16955 emacs-lisp-intro.texi:16957
#, no-wrap
msgid "defcustom"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860
msgid "Emacs will write code for you."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860 emacs-lisp-intro.texi:17120
#, no-wrap
msgid "Beginning a .emacs File"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860
msgid "How to write a @code{.emacs file}."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860 emacs-lisp-intro.texi:17203
#, no-wrap
msgid "Text and Auto-fill"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860
msgid "Automatically wrap lines."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860 emacs-lisp-intro.texi:17325 emacs-lisp-intro.texi:17326
#, no-wrap
msgid "Mail Aliases"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860
msgid "Use abbreviations for email addresses."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860 emacs-lisp-intro.texi:17359 emacs-lisp-intro.texi:17360
#, no-wrap
msgid "Indent Tabs Mode"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860
msgid "Don't use tabs with @TeX{}"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860 emacs-lisp-intro.texi:17397
#, no-wrap
msgid "Keybindings"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860
msgid "Create some personal keybindings."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860 emacs-lisp-intro.texi:17510 emacs-lisp-intro.texi:17511 emacs-lisp-intro.texi:17512
#, no-wrap
msgid "Keymaps"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860
msgid "More about key binding."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860 emacs-lisp-intro.texi:17578 emacs-lisp-intro.texi:17579
#, no-wrap
msgid "Loading Files"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860
msgid "Load (i.e., evaluate) files automatically."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860 emacs-lisp-intro.texi:17670
#, no-wrap
msgid "Autoload"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860
msgid "Make functions available."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860 emacs-lisp-intro.texi:17739
#, no-wrap
msgid "Simple Extension"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860
msgid "Define a function; bind it to a key."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860 emacs-lisp-intro.texi:17851 emacs-lisp-intro.texi:17852
#, no-wrap
msgid "X11 Colors"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860
msgid "Colors in X."
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860
msgid "Miscellaneous::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860 emacs-lisp-intro.texi:18121
#, no-wrap
msgid "Mode Line"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:770 emacs-lisp-intro.texi:16860
msgid "How to customize your mode line."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:778 emacs-lisp-intro.texi:18302 emacs-lisp-intro.texi:18304 emacs-lisp-intro.texi:18305 emacs-lisp-intro.texi:18306
#, no-wrap
msgid "debug"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:778 emacs-lisp-intro.texi:18302
msgid "How to use the built-in debugger."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:778 emacs-lisp-intro.texi:18302 emacs-lisp-intro.texi:18431 emacs-lisp-intro.texi:18432 emacs-lisp-intro.texi:18433
#, no-wrap
msgid "debug-on-entry"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:778 emacs-lisp-intro.texi:18302
msgid "Start debugging when you call a function."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:778 emacs-lisp-intro.texi:18302 emacs-lisp-intro.texi:18570 emacs-lisp-intro.texi:18576
#, no-wrap
msgid "debug-on-quit"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:778 emacs-lisp-intro.texi:18302
msgid "Start debugging when you quit with @kbd{C-g}."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:778 emacs-lisp-intro.texi:18302 emacs-lisp-intro.texi:18602 emacs-lisp-intro.texi:18605
#, no-wrap
msgid "edebug"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:778 emacs-lisp-intro.texi:18302
msgid "How to use Edebug, a source level debugger."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:778 emacs-lisp-intro.texi:18302 emacs-lisp-intro.texi:18745 emacs-lisp-intro.texi:18746
#, no-wrap
msgid "Debugging Exercises"
msgstr ""

#. type: appendix
#: emacs-lisp-intro.texi:780 emacs-lisp-intro.texi:19008
#, no-wrap
msgid "Handling the Kill Ring"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:786 emacs-lisp-intro.texi:19027
msgid "What the Kill Ring Does::"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:786 emacs-lisp-intro.texi:19027
msgid "current-kill::"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:786 emacs-lisp-intro.texi:10037 emacs-lisp-intro.texi:19027 emacs-lisp-intro.texi:19452 emacs-lisp-intro.texi:19453 emacs-lisp-intro.texi:19454
#, no-wrap
msgid "yank"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:786 emacs-lisp-intro.texi:19027
msgid "Paste a copy of a clipped element."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:786 emacs-lisp-intro.texi:19027 emacs-lisp-intro.texi:19537 emacs-lisp-intro.texi:19538 emacs-lisp-intro.texi:19539
#, no-wrap
msgid "yank-pop"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:786 emacs-lisp-intro.texi:19027
msgid "Insert element pointed to."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:786 emacs-lisp-intro.texi:19027 emacs-lisp-intro.texi:19607
#, no-wrap
msgid "ring file"
msgstr ""

#. type: appendixsec
#: emacs-lisp-intro.texi:788 emacs-lisp-intro.texi:19105
#, no-wrap
msgid "The @code{current-kill} Function"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:791 emacs-lisp-intro.texi:19119
msgid "Code for current-kill::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:791 emacs-lisp-intro.texi:19119 emacs-lisp-intro.texi:19183
#, no-wrap
msgid "Understanding current-kill"
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:793 emacs-lisp-intro.texi:19184
#, no-wrap
msgid "@code{current-kill} in Outline"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:797 emacs-lisp-intro.texi:19207
msgid "Body of current-kill::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:797 emacs-lisp-intro.texi:19207 emacs-lisp-intro.texi:19293
#, no-wrap
msgid "Digression concerning error"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:797 emacs-lisp-intro.texi:19207
msgid "How to mislead humans, but not computers."
msgstr ""

#. type: unnumberedsubsubsec
#: emacs-lisp-intro.texi:797 emacs-lisp-intro.texi:19207 emacs-lisp-intro.texi:19315 emacs-lisp-intro.texi:19316
#, no-wrap
msgid "Determining the Element"
msgstr ""

#. type: appendix
#: emacs-lisp-intro.texi:799 emacs-lisp-intro.texi:19617
#, no-wrap
msgid "A Graph with Labeled Axes"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:805 emacs-lisp-intro.texi:19631
msgid "Labeled Example::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:805 emacs-lisp-intro.texi:19631 emacs-lisp-intro.texi:19721
#, no-wrap
msgid "print-graph Varlist"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:805 emacs-lisp-intro.texi:19631
msgid "@code{let} expression in @code{print-graph}."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:805 emacs-lisp-intro.texi:19631 emacs-lisp-intro.texi:19762 emacs-lisp-intro.texi:20147
#, no-wrap
msgid "print-Y-axis"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:805 emacs-lisp-intro.texi:19631
msgid "Print a label for the vertical axis."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:805 emacs-lisp-intro.texi:19631 emacs-lisp-intro.texi:20217 emacs-lisp-intro.texi:20479
#, no-wrap
msgid "print-X-axis"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:805 emacs-lisp-intro.texi:19631
msgid "Print a horizontal label."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:805 emacs-lisp-intro.texi:19631 emacs-lisp-intro.texi:20568
#, no-wrap
msgid "Print Whole Graph"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:805 emacs-lisp-intro.texi:19631
msgid "The function to print a complete graph."
msgstr ""

#. type: appendixsec
#: emacs-lisp-intro.texi:807 emacs-lisp-intro.texi:19763
#, no-wrap
msgid "The @code{print-Y-axis} Function"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:814 emacs-lisp-intro.texi:19798
msgid "print-Y-axis in Detail::"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:814 emacs-lisp-intro.texi:19798 emacs-lisp-intro.texi:19817
#, no-wrap
msgid "Height of label"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:814 emacs-lisp-intro.texi:19798
msgid "What height for the Y axis?"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:814 emacs-lisp-intro.texi:19798 emacs-lisp-intro.texi:19854
#, no-wrap
msgid "Compute a Remainder"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:814 emacs-lisp-intro.texi:19798
msgid "How to compute the remainder of a division."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:814 emacs-lisp-intro.texi:19798 emacs-lisp-intro.texi:19988
#, no-wrap
msgid "Y Axis Element"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:814 emacs-lisp-intro.texi:19798
msgid "Construct a line for the Y axis."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:814 emacs-lisp-intro.texi:19798 emacs-lisp-intro.texi:20094 emacs-lisp-intro.texi:20101
#, no-wrap
msgid "Y-axis-column"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:814 emacs-lisp-intro.texi:19798
msgid "Generate a list of Y axis labels."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:814 emacs-lisp-intro.texi:19798 emacs-lisp-intro.texi:20141
#, no-wrap
msgid "print-Y-axis Penultimate"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:814 emacs-lisp-intro.texi:19798
msgid "A not quite final version."
msgstr ""

#. type: appendixsec
#: emacs-lisp-intro.texi:816 emacs-lisp-intro.texi:20218
#, no-wrap
msgid "The @code{print-X-axis} Function"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:819 emacs-lisp-intro.texi:20251 emacs-lisp-intro.texi:20254
#, no-wrap
msgid "Similarities differences"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:819 emacs-lisp-intro.texi:20251
msgid "Much like @code{print-Y-axis}, but not exactly."
msgstr ""

#. type: appendixsubsec
#: emacs-lisp-intro.texi:819 emacs-lisp-intro.texi:20251 emacs-lisp-intro.texi:20279 emacs-lisp-intro.texi:20280
#, no-wrap
msgid "X Axis Tic Marks"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:819 emacs-lisp-intro.texi:20251
msgid "Create tic marks for the horizontal axis."
msgstr ""

#. type: appendixsec
#: emacs-lisp-intro.texi:821 emacs-lisp-intro.texi:20569
#, no-wrap
msgid "Printing the Whole Graph"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:829 emacs-lisp-intro.texi:20605 emacs-lisp-intro.texi:20608
#, no-wrap
msgid "The final version"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:829 emacs-lisp-intro.texi:20605
msgid "A few changes."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:829 emacs-lisp-intro.texi:20605 emacs-lisp-intro.texi:20759
#, no-wrap
msgid "Test print-graph"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:829 emacs-lisp-intro.texi:20605
msgid "Run a short test."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:829 emacs-lisp-intro.texi:20605 emacs-lisp-intro.texi:20849
#, no-wrap
msgid "Graphing words in defuns"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:829 emacs-lisp-intro.texi:20605
msgid "Executing the final code."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:829 emacs-lisp-intro.texi:20605 emacs-lisp-intro.texi:20937 emacs-lisp-intro.texi:20940
#, no-wrap
msgid "lambda"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:829 emacs-lisp-intro.texi:20605
msgid "How to write an anonymous function."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:829 emacs-lisp-intro.texi:20605 emacs-lisp-intro.texi:21103 emacs-lisp-intro.texi:21105
#, no-wrap
msgid "mapcar"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:829 emacs-lisp-intro.texi:20605
msgid "Apply a function to elements of a list."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:829 emacs-lisp-intro.texi:20605 emacs-lisp-intro.texi:21187
#, no-wrap
msgid "Another Bug"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:829 emacs-lisp-intro.texi:20605
msgid "Yet another bug @dots{} most insidious."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:829 emacs-lisp-intro.texi:20605 emacs-lisp-intro.texi:21884
#, no-wrap
msgid "Final printed graph"
msgstr ""

#. type: menuentry
#: emacs-lisp-intro.texi:829 emacs-lisp-intro.texi:20605
msgid "The graph itself!"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:842
msgid ""
"Most of the GNU Emacs integrated environment is written in the programming "
"language called Emacs Lisp.  The code written in this programming language "
"is the software---the sets of instructions---that tell the computer what to "
"do when you give it commands.  Emacs is designed so that you can write new "
"code in Emacs Lisp and easily install it as an extension to the editor."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:851
msgid ""
"(GNU Emacs is sometimes called an ``extensible editor'', but it does much "
"more than provide editing capabilities.  It is better to refer to Emacs as "
"an ``extensible computing environment''.  However, that phrase is quite a "
"mouthful.  It is easier to refer to Emacs simply as an editor.  Moreover, "
"everything you do in Emacs---find the Mayan date and phases of the moon, "
"simplify polynomials, debug code, manage files, read letters, write "
"books---all these activities are kinds of editing in the most general sense "
"of the word.)"
msgstr ""

#. type: unnumberedsec
#: emacs-lisp-intro.texi:863
#, no-wrap
msgid "Why Study Emacs Lisp?"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:869
msgid ""
"Although Emacs Lisp is usually thought of in association only with Emacs, it "
"is a full computer programming language.  You can use Emacs Lisp as you "
"would any other programming language."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:875
msgid ""
"Perhaps you want to understand programming; perhaps you want to extend "
"Emacs; or perhaps you want to become a programmer.  This introduction to "
"Emacs Lisp is designed to get you started: to guide you in learning the "
"fundamentals of programming, and more importantly, to show you how you can "
"teach yourself to go further."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:889
msgid ""
"All through this document, you will see little sample programs you can run "
"inside of Emacs.  If you read this document in Info inside of GNU Emacs, you "
"can run the programs as they appear.  (This is easy to do and is explained "
"when the examples are presented.)  Alternatively, you can read this "
"introduction as a printed book while sitting beside a computer running "
"Emacs.  (This is what I like to do; I like printed books.)  If you don't "
"have a running Emacs beside you, you can still read this book, but in this "
"case, it is best to treat it as a novel or as a travel guide to a country "
"not yet visited: interesting, but not the same as being there."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:900
msgid ""
"Much of this introduction is dedicated to walkthroughs or guided tours of "
"code used in GNU Emacs.  These tours are designed for two purposes: first, "
"to give you familiarity with real, working code (code you use every day); "
"and, second, to give you familiarity with the way Emacs works.  It is "
"interesting to see how a working environment is implemented.  Also, I hope "
"that you will pick up the habit of browsing through source code.  You can "
"learn from it and mine it for ideas.  Having GNU Emacs is like having a "
"dragon's cave of treasures."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:910
msgid ""
"In addition to learning about Emacs as an editor and Emacs Lisp as a "
"programming language, the examples and guided tours will give you an "
"opportunity to get acquainted with Emacs as a Lisp programming environment.  "
"GNU Emacs supports programming and provides tools that you will want to "
"become comfortable using, such as @kbd{M-.} (the key which invokes the "
"@code{find-tag} command).  You will also learn about buffers and other "
"objects that are part of the environment.  Learning about these features of "
"Emacs is like learning new routes around your home town."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:925
msgid ""
"Finally, I hope to convey some of the skills for using Emacs to learn "
"aspects of programming that you don't know.  You can often use Emacs to help "
"you understand what puzzles you or to find out how to do something new.  "
"This self-reliance is not only a pleasure, but an advantage."
msgstr ""

#. type: unnumberedsec
#: emacs-lisp-intro.texi:927
#, no-wrap
msgid "For Whom This is Written"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:933
msgid ""
"This text is written as an elementary introduction for people who are not "
"programmers.  If you are a programmer, you may not be satisfied with this "
"primer.  The reason is that you may have become expert at reading reference "
"manuals and be put off by the way this text is organized."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:935
msgid "An expert programmer who reviewed this text said to me:"
msgstr ""

#. type: i{#1}
#: emacs-lisp-intro.texi:939
msgid ""
"I prefer to learn from reference manuals.  I ``dive into'' each paragraph, "
"and ``come up for air'' between paragraphs."
msgstr ""

#. type: i{#1}
#: emacs-lisp-intro.texi:946
msgid ""
"When I get to the end of a paragraph, I assume that that subject is done, "
"finished, that I know everything I need (with the possible exception of the "
"case when the next paragraph starts talking about it in more detail).  I "
"expect that a well written reference manual will not have a lot of "
"redundancy, and that it will have excellent pointers to the (one) place "
"where the information I want is."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:949
msgid "This introduction is not written for this person!"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:953
msgid ""
"Firstly, I try to say everything at least three times: first, to introduce "
"it; second, to show it in context; and third, to show it in a different "
"context, or to review it."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:960
msgid ""
"Secondly, I hardly ever put all the information about a subject in one "
"place, much less in one paragraph.  To my way of thinking, that imposes too "
"heavy a burden on the reader.  Instead I try to explain only what you need "
"to know at the time.  (Sometimes I include a little extra information so you "
"won't be surprised later when the additional information is formally "
"introduced.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:966
msgid ""
"When you read this text, you are not expected to learn everything the first "
"time.  Frequently, you need only make, as it were, a `nodding acquaintance' "
"with some of the items mentioned.  My hope is that I have structured the "
"text and given you enough hints that you will be alert to what is important, "
"and concentrate on it."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:971
msgid ""
"You will need to ``dive into'' some paragraphs; there is no other way to "
"read them.  But I have tried to keep down the number of such paragraphs.  "
"This book is intended as an approachable hill, rather than as a daunting "
"mountain."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:974
msgid ""
"This introduction to @cite{Programming in Emacs Lisp} has a companion "
"document,"
msgstr ""

#. type: ifnotinfo
#: emacs-lisp-intro.texi:976 emacs-lisp-intro.texi:18809
msgid "@cite{The GNU Emacs Lisp Reference Manual}."
msgstr ""

#. type: ifinfo
#: emacs-lisp-intro.texi:980 emacs-lisp-intro.texi:18813
msgid ""
"@ref{Top, , The GNU Emacs Lisp Reference Manual, elisp, The GNU Emacs Lisp "
"Reference Manual}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:987
msgid ""
"The reference manual has more detail than this introduction.  In the "
"reference manual, all the information about one topic is concentrated in one "
"place.  You should turn to it if you are like the programmer quoted above.  "
"And, of course, after you have read this @cite{Introduction}, you will find "
"the @cite{Reference Manual} useful when you are writing your own programs."
msgstr ""

#. type: unnumberedsec
#: emacs-lisp-intro.texi:988 emacs-lisp-intro.texi:989
#, no-wrap
msgid "Lisp History"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:990
#, no-wrap
msgid "Lisp history"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:996
msgid ""
"Lisp was first developed in the late 1950s at the Massachusetts Institute of "
"Technology for research in artificial intelligence.  The great power of the "
"Lisp language makes it superior for other purposes as well, such as writing "
"editor commands and integrated environments."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:997
#, no-wrap
msgid "Maclisp"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:998
#, no-wrap
msgid "Common Lisp"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1004
msgid ""
"GNU Emacs Lisp is largely inspired by Maclisp, which was written at MIT in "
"the 1960s.  It is somewhat inspired by Common Lisp, which became a standard "
"in the 1980s.  However, Emacs Lisp is much simpler than Common Lisp.  (The "
"standard Emacs distribution contains an optional extensions file, "
"@file{cl.el}, that adds many Common Lisp features to Emacs Lisp.)"
msgstr ""

#. type: unnumberedsec
#: emacs-lisp-intro.texi:1006
#, no-wrap
msgid "A Note for Novices"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1014
msgid ""
"If you don't know GNU Emacs, you can still read this document profitably.  "
"However, I recommend you learn Emacs, if only to learn to move around your "
"computer screen.  You can teach yourself how to use Emacs with the on-line "
"tutorial.  To use it, type @kbd{C-h t}.  (This means you press and release "
"the @key{CTRL} key and the @kbd{h} at the same time, and then press and "
"release @kbd{t}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1034
msgid ""
"Also, I often refer to one of Emacs's standard commands by listing the keys "
"which you press to invoke the command and then giving the name of the "
"command in parentheses, like this: @kbd{M-C-\\} (@code{indent-region}).  "
"What this means is that the @code{indent-region} command is customarily "
"invoked by typing @kbd{M-C-\\}.  (You can, if you wish, change the keys that "
"are typed to invoke the command; this is called @dfn{rebinding}.  "
"@xref{Keymaps, , Keymaps}.)  The abbreviation @kbd{M-C-\\} means that you "
"type your @key{META} key, @key{CTRL} key and @key{\\} key all at the same "
"time.  (On many modern keyboards the @key{META} key is labeled @key{ALT}.)  "
"Sometimes a combination like this is called a keychord, since it is similar "
"to the way you play a chord on a piano.  If your keyboard does not have a "
"@key{META} key, the @key{ESC} key prefix is used in place of it.  In this "
"case, @kbd{M-C-\\} means that you press and release your @key{ESC} key and "
"then type the @key{CTRL} key and the @key{\\} key at the same time.  But "
"usually @kbd{M-C-\\} means press the @key{CTRL} key along with the key that "
"is labeled @key{ALT} and, at the same time, press the @key{\\} key."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1043
msgid ""
"In addition to typing a lone keychord, you can prefix what you type with "
"@kbd{C-u}, which is called the `universal argument'.  The @kbd{C-u} keychord "
"passes an argument to the subsequent command.  Thus, to indent a region of "
"plain text by 6 spaces, mark the region, and then type @w{@kbd{C-u 6 "
"M-C-\\}}.  (If you do not specify a number, Emacs either passes the number 4 "
"to the command or otherwise runs the command differently than it would "
"otherwise.)  @xref{Arguments, , Numeric Arguments, emacs, The GNU Emacs "
"Manual}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1047
msgid ""
"If you are reading this in Info using GNU Emacs, you can read through this "
"whole document just by pressing the space bar, @key{SPC}.  (To learn about "
"Info, type @kbd{C-h i} and then select Info.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1051
msgid ""
"A note on terminology: when I use the word Lisp alone, I often am referring "
"to the various dialects of Lisp in general, but when I speak of Emacs Lisp, "
"I am referring to GNU Emacs Lisp in particular."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1061
msgid ""
"My thanks to all who helped me with this book.  My especial thanks to @r{Jim "
"Blandy}, @r{Noah Friedman}, @w{Jim Kingdon}, @r{Roland McGrath}, @w{Frank "
"Ritter}, @w{Randy Smith}, @w{Richard M.  Stallman}, and @w{Melissa "
"Weisshaus}.  My thanks also go to both @w{Philip Johnson} and @w{David "
"Stampe} for their patient encouragement.  My mistakes are my own."
msgstr ""

#. type: flushright
#: emacs-lisp-intro.texi:1065
#, no-wrap
msgid ""
"Robert J. Chassell\n"
"@email{bob@@gnu.org}\n"
msgstr ""

#. type: tex
#: emacs-lisp-intro.texi:1081
#, no-wrap
msgid ""
"\\par\\vfill\\supereject\n"
"\\headings off\n"
"\\ifodd\\pageno\n"
"    \\par\\vfill\\supereject\n"
"\\else\n"
"    \\par\\vfill\\supereject\n"
"    \\page\\hbox{}\\page\n"
"    \\par\\vfill\\supereject\n"
"\\fi\n"
msgstr ""

#. type: iftex
#: emacs-lisp-intro.texi:1096
msgid ""
"@evenheading @thispage @| @| @thischapter @oddheading @thissection @| @| "
"@thispage @global@pageno = 1"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1112
msgid ""
"To the untutored eye, Lisp is a strange programming language.  In Lisp code "
"there are parentheses everywhere.  Some people even claim that the name "
"stands for `Lots of Isolated Silly Parentheses'.  But the claim is "
"unwarranted.  Lisp stands for LISt Processing, and the programming language "
"handles @emph{lists} (and lists of lists) by putting them between "
"parentheses.  The parentheses mark the boundaries of the list.  Sometimes a "
"list is preceded by a single apostrophe or quotation mark, "
"@samp{'}@footnote{The single apostrophe or quotation mark is an abbreviation "
"for the function @code{quote}; you need not think about functions now; "
"functions are defined in @ref{Making Errors, , Generate an Error Message}.} "
"Lists are the basis of Lisp."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1135
msgid ""
"In Lisp, a list looks like this: @code{'(rose violet daisy buttercup)}.  "
"This list is preceded by a single apostrophe.  It could just as well be "
"written as follows, which looks more like the kind of list you are likely to "
"be familiar with:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:1142
#, no-wrap
msgid ""
"'(rose\n"
"  violet\n"
"  daisy\n"
"  buttercup)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1149
msgid ""
"The elements of this list are the names of the four different flowers, "
"separated from each other by whitespace and surrounded by parentheses, like "
"flowers in a field with a stone wall around them."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1149
#, no-wrap
msgid "Flowers in a field"
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:1160
#, no-wrap
msgid "Numbers, Lists inside of Lists"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1166
msgid ""
"Lists can also have numbers in them, as in this list: @code{(+ 2 2)}.  This "
"list has a plus-sign, @samp{+}, followed by two @samp{2}s, each separated by "
"whitespace."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1174
msgid ""
"In Lisp, both data and programs are represented the same way; that is, they "
"are both lists of words, numbers, or other lists, separated by whitespace "
"and surrounded by parentheses.  (Since a program looks like data, one "
"program may easily serve as data for another; this is a very powerful "
"feature of Lisp.)  (Incidentally, these two parenthetical remarks are "
"@emph{not} Lisp lists, because they contain @samp{;} and @samp{.} as "
"punctuation marks.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1177
msgid "Here is another list, this time with a list inside of it:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:1180
#, no-wrap
msgid "'(this list has (a list inside of it))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1186
msgid ""
"The components of this list are the words @samp{this}, @samp{list}, "
"@samp{has}, and the list @samp{(a list inside of it)}.  The interior list is "
"made up of the words @samp{a}, @samp{list}, @samp{inside}, @samp{of}, "
"@samp{it}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1199
msgid ""
"In Lisp, what we have been calling words are called @dfn{atoms}.  This term "
"comes from the historical meaning of the word atom, which means "
"`indivisible'.  As far as Lisp is concerned, the words we have been using in "
"the lists cannot be divided into any smaller parts and still mean the same "
"thing as part of a program; likewise with numbers and single character "
"symbols like @samp{+}.  On the other hand, unlike an ancient atom, a list "
"can be split into parts.  (@xref{car cdr & cons, , @code{car} @code{cdr} & "
"@code{cons} Fundamental Functions}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1202
msgid ""
"In a list, atoms are separated from each other by whitespace.  They can be "
"right next to a parenthesis."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1203
#, no-wrap
msgid "@samp{empty list} defined"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1210
msgid ""
"Technically speaking, a list in Lisp consists of parentheses surrounding "
"atoms separated by whitespace or surrounding other lists or surrounding both "
"atoms and other lists.  A list can have just one atom in it or have nothing "
"in it at all.  A list with nothing in it looks like this: @code{()}, and is "
"called the @dfn{empty list}.  Unlike anything else, an empty list is "
"considered both an atom and a list at the same time."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1211
#, no-wrap
msgid "Symbolic expressions, introduced"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1212
#, no-wrap
msgid "@samp{expression} defined"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1213
#, no-wrap
msgid "@samp{form} defined"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1221
msgid ""
"The printed representation of both atoms and lists are called @dfn{symbolic "
"expressions} or, more concisely, @dfn{s-expressions}.  The word "
"@dfn{expression} by itself can refer to either the printed representation, "
"or to the atom or list as it is held internally in the computer.  Often, "
"people use the term @dfn{expression} indiscriminately.  (Also, in many "
"texts, the word @dfn{form} is used as a synonym for expression.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1231
msgid ""
"Incidentally, the atoms that make up our universe were named such when they "
"were thought to be indivisible; but it has been found that physical atoms "
"are not indivisible.  Parts can split off an atom or it can fission into two "
"parts of roughly equal size.  Physical atoms were named prematurely, before "
"their truer nature was found.  In Lisp, certain kinds of atom, such as an "
"array, can be separated into parts; but the mechanism for doing this is "
"different from the mechanism for splitting a list.  As far as list "
"operations are concerned, the atoms of a list are unsplittable."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1236
msgid ""
"As in English, the meanings of the component letters of a Lisp atom are "
"different from the meaning the letters make as a word.  For example, the "
"word for the South American sloth, the @samp{ai}, is completely different "
"from the two words, @samp{a}, and @samp{i}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1248
msgid ""
"There are many kinds of atom in nature but only a few in Lisp: for example, "
"@dfn{numbers}, such as 37, 511, or 1729, and @dfn{symbols}, such as "
"@samp{+}, @samp{foo}, or @samp{forward-line}.  The words we have listed in "
"the examples above are all symbols.  In everyday Lisp conversation, the word "
"``atom'' is not often used, because programmers usually try to be more "
"specific about what kind of atom they are dealing with.  Lisp programming is "
"mostly about symbols (and sometimes numbers)  within lists.  (Incidentally, "
"the preceding three word parenthetical remark is a proper list in Lisp, "
"since it consists of atoms, which in this case are symbols, separated by "
"whitespace and enclosed by parentheses, without any non-Lisp punctuation.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1252
msgid ""
"Text between double quotation marks---even sentences or paragraphs---is also "
"an atom.  Here is an example:"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1252
#, no-wrap
msgid "Text between double quotation marks"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:1256
#, no-wrap
msgid "'(this list includes \"text between quotation marks.\")\n"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1258
#, no-wrap
msgid "@samp{string} defined"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1266
msgid ""
"In Lisp, all of the quoted text including the punctuation mark and the blank "
"spaces is a single atom.  This kind of atom is called a @dfn{string} (for "
"`string of characters') and is the sort of thing that is used for messages "
"that a computer can print for a human to read.  Strings are a different kind "
"of atom than numbers or symbols and are used differently."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1269
#, no-wrap
msgid "Whitespace in lists"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1274
msgid ""
"The amount of whitespace in a list does not matter.  From the point of view "
"of the Lisp language,"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:1279
#, no-wrap
msgid ""
"'(this list\n"
"   looks like this)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1285
msgid "is exactly the same as this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:1288
#, no-wrap
msgid "'(this list looks like this)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1293
msgid ""
"Both examples show what to Lisp is the same list, the list made up of the "
"symbols @samp{this}, @samp{list}, @samp{looks}, @samp{like}, and @samp{this} "
"in that order."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1298
msgid ""
"Extra whitespace and newlines are designed to make a list more readable by "
"humans.  When Lisp reads the expression, it gets rid of all the extra "
"whitespace (but it needs to have at least one space between atoms in order "
"to tell them apart.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1306
msgid ""
"Odd as it seems, the examples we have seen cover almost all of what Lisp "
"lists look like! Every other list in Lisp looks more or less like one of "
"these examples, except that the list may be longer and more complex.  In "
"brief, a list is between parentheses, a string is between quotation marks, a "
"symbol looks like a word, and a number looks like a number.  (For certain "
"situations, square brackets, dots and a few other special characters may be "
"used; however, we will go quite far without them.)"
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:1308
#, no-wrap
msgid "GNU Emacs Helps You Type Lists"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1309
#, no-wrap
msgid "Help typing lists"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1310
#, no-wrap
msgid "Formatting help"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1321
msgid ""
"When you type a Lisp expression in GNU Emacs using either Lisp Interaction "
"mode or Emacs Lisp mode, you have available to you several commands to "
"format the Lisp expression so it is easy to read.  For example, pressing the "
"@key{TAB} key automatically indents the line the cursor is on by the right "
"amount.  A command to properly indent the code in a region is customarily "
"bound to @kbd{M-C-\\}.  Indentation is designed so that you can see which "
"elements of a list belong to which list---elements of a sub-list are "
"indented more than the elements of the enclosing list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1328
msgid ""
"In addition, when you type a closing parenthesis, Emacs momentarily jumps "
"the cursor back to the matching opening parenthesis, so you can see which "
"one it is.  This is very useful, since every list you type in Lisp must have "
"its closing parenthesis match its opening parenthesis.  (@xref{Major Modes, "
", Major Modes, emacs, The GNU Emacs Manual}, for more information about "
"Emacs's modes.)"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1331
#, no-wrap
msgid "Run a program"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1332
#, no-wrap
msgid "Program, running one"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1334
#, no-wrap
msgid "@samp{evaluate} defined"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1341
msgid ""
"A list in Lisp---any list---is a program ready to run.  If you run it (for "
"which the Lisp jargon is @dfn{evaluate}), the computer will do one of three "
"things: do nothing except return to you the list itself; send you an error "
"message; or, treat the first symbol in the list as a command to do "
"something.  (Usually, of course, it is the last of these three things that "
"you really want!)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1352
msgid ""
"The single apostrophe, @code{'}, that I put in front of some of the example "
"lists in preceding sections is called a @dfn{quote}; when it precedes a "
"list, it tells Lisp to do nothing with the list, other than take it as it is "
"written.  But if there is no quote preceding a list, the first item of the "
"list is special: it is a command for the computer to obey.  (In Lisp, these "
"commands are called @emph{functions}.)  The list @code{(+ 2 2)} shown above "
"did not have a quote in front of it, so Lisp understands that the @code{+} "
"is an instruction to do something with the rest of the list: add the numbers "
"that follow."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1357
msgid ""
"If you are reading this inside of GNU Emacs in Info, here is how you can "
"evaluate such a list: place your cursor immediately after the right hand "
"parenthesis of the following list and then type @kbd{C-x C-e}:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:1360 emacs-lisp-intro.texi:1903 emacs-lisp-intro.texi:1967
#, no-wrap
msgid "(+ 2 2)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1369
msgid ""
"You will see the number @code{4} appear in the echo area.  (In the jargon, "
"what you have just done is ``evaluate the list.'' The echo area is the line "
"at the bottom of the screen that displays or ``echoes'' text.)  Now try the "
"same thing with a quoted list: place the cursor right after the following "
"list and type @kbd{C-x C-e}:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:1372
#, no-wrap
msgid "'(this is a quoted list)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1376
msgid "You will see @code{(this is a quoted list)} appear in the echo area."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1377
#, no-wrap
msgid "Lisp interpreter, explained"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1378
#, no-wrap
msgid "Interpreter, Lisp, explained"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1384
msgid ""
"In both cases, what you are doing is giving a command to the program inside "
"of GNU Emacs called the @dfn{Lisp interpreter}---giving the interpreter a "
"command to evaluate the expression.  The name of the Lisp interpreter comes "
"from the word for the task done by a human who comes up with the meaning of "
"an expression---who ``interprets'' it."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1390
msgid ""
"You can also evaluate an atom that is not part of a list---one that is not "
"surrounded by parentheses; again, the Lisp interpreter translates from the "
"humanly readable expression to the language of the computer.  But before "
"discussing this (@pxref{Variables}), we will discuss what the Lisp "
"interpreter does when you make an error."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:1392
#, no-wrap
msgid "Generate an Error Message"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1393
#, no-wrap
msgid "Generate an error message"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1394
#, no-wrap
msgid "Error message generation"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1404
msgid ""
"Partly so you won't worry if you do it accidentally, we will now give a "
"command to the Lisp interpreter that generates an error message.  This is a "
"harmless activity; and indeed, we will often try to generate error messages "
"intentionally.  Once you understand the jargon, error messages can be "
"informative.  Instead of being called ``error'' messages, they should be "
"called ``help'' messages.  They are like signposts to a traveler in a "
"strange country; deciphering them can be hard, but once understood, they can "
"point the way."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1407
msgid ""
"The error message is generated by a built-in GNU Emacs debugger.  We will "
"`enter the debugger'.  You get out of the debugger by typing @code{q}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1413
msgid ""
"What we will do is evaluate a list that is not quoted and does not have a "
"meaningful command as its first element.  Here is a list almost exactly the "
"same as the one we just used, but without the single-quote in front of it.  "
"Position the cursor right after it and type @kbd{C-x C-e}:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:1416
#, no-wrap
msgid "(this is an unquoted list)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1433
msgid ""
"A @file{*Backtrace*} window will open up and you should see the following in "
"it:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:1444
#, no-wrap
msgid ""
"---------- Buffer: *Backtrace* ----------\n"
"Debugger entered--Lisp error: (void-function this)\n"
"  (this is an unquoted list)\n"
"  eval((this is an unquoted list))\n"
"  eval-last-sexp-1(nil)\n"
"  eval-last-sexp(nil)\n"
"  call-interactively(eval-last-sexp)\n"
"---------- Buffer: *Backtrace* ----------\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1452
msgid ""
"Your cursor will be in this window (you may have to wait a few seconds "
"before it becomes visible).  To quit the debugger and make the debugger "
"window go away, type:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:1455
#, no-wrap
msgid "q\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1461
msgid ""
"Please type @kbd{q} right now, so you become confident that you can get out "
"of the debugger.  Then, type @kbd{C-x C-e} again to re-enter it."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1462 emacs-lisp-intro.texi:1491
#, no-wrap
msgid "@samp{function} defined"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1464
msgid "Based on what we already know, we can almost read this error message."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1471
msgid ""
"You read the @file{*Backtrace*} buffer from the bottom up; it tells you what "
"Emacs did.  When you typed @kbd{C-x C-e}, you made an interactive call to "
"the command @code{eval-last-sexp}.  @code{eval} is an abbreviation for "
"`evaluate' and @code{sexp} is an abbreviation for `symbolic expression'.  "
"The command means `evaluate last symbolic expression', which is the "
"expression just before your cursor."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1476
msgid ""
"Each line above tells you what the Lisp interpreter evaluated next.  The "
"most recent action is at the top.  The buffer is called the "
"@file{*Backtrace*} buffer because it enables you to track Emacs backwards."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1479
msgid "At the top of the @file{*Backtrace*} buffer, you see the line:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:1482
#, no-wrap
msgid "Debugger entered--Lisp error: (void-function this)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1488
msgid ""
"The Lisp interpreter tried to evaluate the first atom of the list, the word "
"@samp{this}.  It is this action that generated the error message "
"@samp{void-function this}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1490
msgid "The message contains the words @samp{void-function} and @samp{this}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1496
msgid ""
"The word @samp{function} was mentioned once before.  It is a very important "
"word.  For our purposes, we can define it by saying that a @dfn{function} is "
"a set of instructions to the computer that tell the computer to do "
"something."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1500
msgid ""
"Now we can begin to understand the error message: @samp{void-function "
"this}.  The function (that is, the word @samp{this}) does not have a "
"definition of any set of instructions for the computer to carry out."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1505
msgid ""
"The slightly odd word, @samp{void-function}, is designed to cover the way "
"Emacs Lisp is implemented, which is that when a symbol does not have a "
"function definition attached to it, the place that should contain the "
"instructions is `void'."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1510
msgid ""
"On the other hand, since we were able to add 2 plus 2 successfully, by "
"evaluating @code{(+ 2 2)}, we can infer that the symbol @code{+} must have a "
"set of instructions for the computer to obey and those instructions must be "
"to add the numbers that follow the @code{+}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1517
msgid ""
"It is possible to prevent Emacs entering the debugger in cases like this.  "
"We do not explain how to do that here, but we will mention what the result "
"looks like, because you may encounter a similar situation if there is a bug "
"in some Emacs code that you are using.  In such cases, you will see only one "
"line of error message; it will appear in the echo area and look like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:1520
#, no-wrap
msgid "Symbol's function definition is void:@: this\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1529
msgid ""
"The message goes away as soon as you type a key, even just to move the "
"cursor."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1536
msgid ""
"We know the meaning of the word @samp{Symbol}.  It refers to the first atom "
"of the list, the word @samp{this}.  The word @samp{function} refers to the "
"instructions that tell the computer what to do.  (Technically, the symbol "
"tells the computer where to find the instructions, but this is a "
"complication we can ignore for the moment.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1540
msgid ""
"The error message can be understood: @samp{Symbol's function definition is "
"void:@: this}.  The symbol (that is, the word @samp{this}) lacks "
"instructions for the computer to carry out."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:1542
#, no-wrap
msgid "Symbol Names and Function Definitions"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1543
#, no-wrap
msgid "Symbol names"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1555
msgid ""
"We can articulate another characteristic of Lisp based on what we have "
"discussed so far---an important characteristic: a symbol, like @code{+}, is "
"not itself the set of instructions for the computer to carry out.  Instead, "
"the symbol is used, perhaps temporarily, as a way of locating the definition "
"or set of instructions.  What we see is the name through which the "
"instructions can be found.  Names of people work the same way.  I can be "
"referred to as @samp{Bob}; however, I am not the letters @samp{B}, @samp{o}, "
"@samp{b} but am, or was, the consciousness consistently associated with a "
"particular life-form.  The name is not me, but it can be used to refer to "
"me."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1561
msgid ""
"In Lisp, one set of instructions can be attached to several names.  For "
"example, the computer instructions for adding numbers can be linked to the "
"symbol @code{plus} as well as to the symbol @code{+} (and are in some "
"dialects of Lisp).  Among humans, I can be referred to as @samp{Robert} as "
"well as @samp{Bob} and by other words as well."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1568
msgid ""
"On the other hand, a symbol can have only one function definition attached "
"to it at a time.  Otherwise, the computer would be confused as to which "
"definition to use.  If this were the case among people, only one person in "
"the world could be named @samp{Bob}.  However, the function definition to "
"which the name refers can be changed readily.  (@xref{Install, , Install a "
"Function Definition}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1574
msgid ""
"Since Emacs Lisp is large, it is customary to name symbols in a way that "
"identifies the part of Emacs to which the function belongs.  Thus, all the "
"names for functions that deal with Texinfo start with @samp{texinfo-} and "
"those for functions that deal with reading mail start with @samp{rmail-}."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1577
#, no-wrap
msgid "Lisp interpreter, what it does"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1578
#, no-wrap
msgid "Interpreter, what it does"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1588
msgid ""
"Based on what we have seen, we can now start to figure out what the Lisp "
"interpreter does when we command it to evaluate a list.  First, it looks to "
"see whether there is a quote before the list; if there is, the interpreter "
"just gives us the list.  On the other hand, if there is no quote, the "
"interpreter looks at the first element in the list and sees whether it has a "
"function definition.  If it does, the interpreter carries out the "
"instructions in the function definition.  Otherwise, the interpreter prints "
"an error message."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1594
msgid ""
"This is how Lisp works.  Simple.  There are added complications which we "
"will get to in a minute, but these are the fundamentals.  Of course, to "
"write Lisp programs, you need to know how to write function definitions and "
"attach them to names, and how to do this without confusing either yourself "
"or the computer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1610
msgid ""
"Now, for the first complication.  In addition to lists, the Lisp interpreter "
"can evaluate a symbol that is not quoted and does not have parentheses "
"around it.  The Lisp interpreter will attempt to determine the symbol's "
"value as a @dfn{variable}.  This situation is described in the section on "
"variables.  (@xref{Variables}.)"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1611
#, no-wrap
msgid "Special form"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1617
msgid ""
"The second complication occurs because some functions are unusual and do not "
"work in the usual manner.  Those that don't are called @dfn{special forms}.  "
"They are used for special jobs, like defining a function, and there are not "
"many of them.  In the next few chapters, you will be introduced to several "
"of the more important special forms."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1628
msgid ""
"The third and final complication is this: if the function that the Lisp "
"interpreter is looking at is not a special form, and if it is part of a "
"list, the Lisp interpreter looks to see whether the list has a list inside "
"of it.  If there is an inner list, the Lisp interpreter first figures out "
"what it should do with the inside list, and then it works on the outside "
"list.  If there is yet another list embedded inside the inner list, it works "
"on that one first, and so on.  It always works on the innermost list first.  "
"The interpreter works on the innermost list first, to evaluate the result of "
"that list.  The result may be used by the enclosing expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1631
msgid ""
"Otherwise, the interpreter works left to right, from one expression to the "
"next."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1634
#, no-wrap
msgid "Byte compiling"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1641
msgid ""
"One other aspect of interpreting: the Lisp interpreter is able to interpret "
"two kinds of entity: humanly readable code, on which we will focus "
"exclusively, and specially processed code, called @dfn{byte compiled} code, "
"which is not humanly readable.  Byte compiled code runs faster than humanly "
"readable code."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1648
msgid ""
"You can transform humanly readable code into byte compiled code by running "
"one of the compile commands such as @code{byte-compile-file}.  Byte compiled "
"code is usually stored in a file that ends with a @file{.elc} extension "
"rather than a @file{.el} extension.  You will see both kinds of file in the "
"@file{emacs/lisp} directory; the files to read are those with @file{.el} "
"extensions."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1654
msgid ""
"As a practical matter, for most things you might do to customize or extend "
"Emacs, you do not need to byte compile; and I will not discuss the topic "
"here.  @xref{Byte Compilation, , Byte Compilation, elisp, The GNU Emacs Lisp "
"Reference Manual}, for a full description of byte compilation."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1665
msgid ""
"When the Lisp interpreter works on an expression, the term for the activity "
"is called @dfn{evaluation}.  We say that the interpreter `evaluates the "
"expression'.  I've used this term several times before.  The word comes from "
"its use in everyday language, `to ascertain the value or amount of; to "
"appraise', according to @cite{Webster's New Collegiate Dictionary}."
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:1673
#, no-wrap
msgid "How the Lisp Interpreter Acts"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1676
#, no-wrap
msgid "@samp{returned value} explained"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1685
msgid ""
"After evaluating an expression, the Lisp interpreter will most likely "
"@dfn{return} the value that the computer produces by carrying out the "
"instructions it found in the function definition, or perhaps it will give up "
"on that function and produce an error message.  (The interpreter may also "
"find itself tossed, so to speak, to a different function or it may attempt "
"to repeat continually what it is doing for ever and ever in what is called "
"an `infinite loop'.  These actions are less common; and we can ignore them.)  "
"Most frequently, the interpreter returns a value."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1686
#, no-wrap
msgid "@samp{side effect} defined"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1693
msgid ""
"At the same time the interpreter returns a value, it may do something else "
"as well, such as move a cursor or copy a file; this other kind of action is "
"called a @dfn{side effect}.  Actions that we humans think are important, "
"such as printing results, are often ``side effects'' to the Lisp "
"interpreter.  The jargon can sound peculiar, but it turns out that it is "
"fairly easy to learn to use side effects."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1697
msgid ""
"In summary, evaluating a symbolic expression most commonly causes the Lisp "
"interpreter to return a value and perhaps carry out a side effect; or else "
"produce an error."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1700
#, no-wrap
msgid "Inner list evaluation"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1701
#, no-wrap
msgid "Evaluating inner lists"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1708
msgid ""
"If evaluation applies to a list that is inside another list, the outer list "
"may use the value returned by the first evaluation as information when the "
"outer list is evaluated.  This explains why inner expressions are evaluated "
"first: the values they return are used by the outer expressions."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1712
msgid ""
"We can investigate this process by evaluating another addition example.  "
"Place your cursor after the following expression and type @kbd{C-x C-e}:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:1715 emacs-lisp-intro.texi:1741
#, no-wrap
msgid "(+ 2 (+ 3 3))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1719
msgid "The number 8 will appear in the echo area."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1725
msgid ""
"What happens is that the Lisp interpreter first evaluates the inner "
"expression, @code{(+ 3 3)}, for which the value 6 is returned; then it "
"evaluates the outer expression as if it were written @code{(+ 2 6)}, which "
"returns the value 8.  Since there are no more enclosing expressions to "
"evaluate, the interpreter prints that value in the echo area."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1731
msgid ""
"Now it is easy to understand the name of the command invoked by the "
"keystrokes @kbd{C-x C-e}: the name is @code{eval-last-sexp}.  The letters "
"@code{sexp} are an abbreviation for `symbolic expression', and @code{eval} "
"is an abbreviation for `evaluate'.  The command means `evaluate last "
"symbolic expression'."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1735
msgid ""
"As an experiment, you can try evaluating the expression by putting the "
"cursor at the beginning of the next line immediately following the "
"expression, or inside the expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1738
msgid "Here is another copy of the expression:"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1751
msgid ""
"If you place the cursor at the beginning of the blank line that immediately "
"follows the expression and type @kbd{C-x C-e}, you will still get the value "
"8 printed in the echo area.  Now try putting the cursor inside the "
"expression.  If you put it right after the next to last parenthesis (so it "
"appears to sit on top of the last parenthesis), you will get a 6 printed in "
"the echo area! This is because the command evaluates the expression @code{(+ "
"3 3)}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1760
msgid ""
"Now put the cursor immediately after a number.  Type @kbd{C-x C-e} and you "
"will get the number itself.  In Lisp, if you evaluate a number, you get the "
"number itself---this is how numbers differ from symbols.  If you evaluate a "
"list starting with a symbol like @code{+}, you will get a value returned "
"that is the result of the computer carrying out the instructions in the "
"function definition attached to that name.  If a symbol by itself is "
"evaluated, something different happens, as we will see in the next section."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1773
msgid ""
"In Emacs Lisp, a symbol can have a value attached to it just as it can have "
"a function definition attached to it.  The two are different.  The function "
"definition is a set of instructions that a computer will obey.  A value, on "
"the other hand, is something, such as number or a name, that can vary (which "
"is why such a symbol is called a variable).  The value of a symbol can be "
"any expression in Lisp, such as a symbol, number, list, or string.  A symbol "
"that has a value is often called a @dfn{variable}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1780
msgid ""
"A symbol can have both a function definition and a value attached to it at "
"the same time.  Or it can have just one or the other.  The two are "
"separate.  This is somewhat similar to the way the name Cambridge can refer "
"to the city in Massachusetts and have some information attached to the name "
"as well, such as ``great programming center''."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1792
msgid ""
"Another way to think about this is to imagine a symbol as being a chest of "
"drawers.  The function definition is put in one drawer, the value in "
"another, and so on.  What is put in the drawer holding the value can be "
"changed without affecting the contents of the drawer holding the function "
"definition, and vice-verse."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:1801
#, no-wrap
msgid "fill-column Example"
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:1802
#, no-wrap
msgid "@code{fill-column}, an Example Variable"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:1805
#, no-wrap
msgid "fill-column, @r{an example variable}"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1806
#, no-wrap
msgid "Example variable, @code{fill-column}"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1807
#, no-wrap
msgid "Variable, example of, @code{fill-column}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1814
msgid ""
"The variable @code{fill-column} illustrates a symbol with a value attached "
"to it: in every GNU Emacs buffer, this symbol is set to some value, usually "
"72 or 70, but sometimes to some other value.  To find the value of this "
"symbol, evaluate it by itself.  If you are reading this in Info inside of "
"GNU Emacs, you can do this by putting the cursor after the symbol and typing "
"@kbd{C-x C-e}:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:1817
#, no-wrap
msgid "fill-column\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1828
msgid ""
"After I typed @kbd{C-x C-e}, Emacs printed the number 72 in my echo area.  "
"This is the value for which @code{fill-column} is set for me as I write "
"this.  It may be different for you in your Info buffer.  Notice that the "
"value returned as a variable is printed in exactly the same way as the value "
"returned by a function carrying out its instructions.  From the point of "
"view of the Lisp interpreter, a value returned is a value returned.  What "
"kind of expression it came from ceases to matter once the value is known."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1833
msgid ""
"A symbol can have any value attached to it or, to use the jargon, we can "
"@dfn{bind} the variable to a value: to a number, such as 72; to a string, "
"@code{\"such as this\"}; to a list, such as @code{(spruce pine oak)}; we can "
"even bind a variable to a function definition."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1837
msgid ""
"A symbol can be bound to a value in several ways.  @xref{set & setq, , "
"Setting the Value of a Variable}, for information about one way to do this."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:1839
#, no-wrap
msgid "Error Message for a Symbol Without a Function"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1840
#, no-wrap
msgid "Symbol without function error"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1841
#, no-wrap
msgid "Error for symbol without function"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1846
msgid ""
"When we evaluated @code{fill-column} to find its value as a variable, we did "
"not place parentheses around the word.  This is because we did not intend to "
"use it as a function name."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1851
msgid ""
"If @code{fill-column} were the first or only element of a list, the Lisp "
"interpreter would attempt to find the function definition attached to it.  "
"But @code{fill-column} has no function definition.  Try evaluating this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:1854
#, no-wrap
msgid "(fill-column)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1859
msgid "You will create a @file{*Backtrace*} buffer that says:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:1870
#, no-wrap
msgid ""
"---------- Buffer: *Backtrace* ----------\n"
"Debugger entered--Lisp error: (void-function fill-column)\n"
"  (fill-column)\n"
"  eval((fill-column))\n"
"  eval-last-sexp-1(nil)\n"
"  eval-last-sexp(nil)\n"
"  call-interactively(eval-last-sexp)\n"
"---------- Buffer: *Backtrace* ----------\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1876
msgid ""
"(Remember, to quit the debugger and make the debugger window go away, type "
"@kbd{q} in the @file{*Backtrace*} buffer.)"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:1883
#, no-wrap
msgid "Symbol's function definition is void:@: fill-column\n"
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:1891
#, no-wrap
msgid "Error Message for a Symbol Without a Value"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1892
#, no-wrap
msgid "Symbol without value error"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1893
#, no-wrap
msgid "Error for symbol without value"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1900
msgid ""
"If you attempt to evaluate a symbol that does not have a value bound to it, "
"you will receive an error message.  You can see this by experimenting with "
"our 2 plus 2 addition.  In the following expression, put your cursor right "
"after the @code{+}, before the first number 2, type @kbd{C-x C-e}:"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1909
msgid "In GNU Emacs 22, you will create a @file{*Backtrace*} buffer that says:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:1919
#, no-wrap
msgid ""
"---------- Buffer: *Backtrace* ----------\n"
"Debugger entered--Lisp error: (void-variable +)\n"
"  eval(+)\n"
"  eval-last-sexp-1(nil)\n"
"  eval-last-sexp(nil)\n"
"  call-interactively(eval-last-sexp)\n"
"---------- Buffer: *Backtrace* ----------\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1925
msgid ""
"(Again, you can quit the debugger by typing @kbd{q} in the "
"@file{*Backtrace*} buffer.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1931
msgid ""
"This backtrace is different from the very first error message we saw, which "
"said, @samp{Debugger entered--Lisp error: (void-function this)}.  In this "
"case, the function does not have a value as a variable; while in the other "
"error message, the function (the word `this') did not have a definition."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1939
msgid ""
"In this experiment with the @code{+}, what we did was cause the Lisp "
"interpreter to evaluate the @code{+} and look for the value of the variable "
"instead of the function definition.  We did this by placing the cursor right "
"after the symbol rather than after the parenthesis of the enclosing list as "
"we did before.  As a consequence, the Lisp interpreter evaluated the "
"preceding s-expression, which in this case was @code{+} by itself."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1943
msgid ""
"Since @code{+} does not have a value bound to it, just the function "
"definition, the error message reported that the symbol's value as a variable "
"was void."
msgstr ""

#. type: example
#: emacs-lisp-intro.texi:1950
#, no-wrap
msgid "Symbol's value as variable is void:@: +\n"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1959
#, no-wrap
msgid "Passing information to functions"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1964
msgid ""
"To see how information is passed to functions, let's look again at our old "
"standby, the addition of two plus two.  In Lisp, this is written as follows:"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1972
msgid ""
"If you evaluate this expression, the number 4 will appear in your echo "
"area.  What the Lisp interpreter does is add the numbers that follow the "
"@code{+}."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:1973
#, no-wrap
msgid "@samp{argument} defined"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1977
msgid ""
"The numbers added by @code{+} are called the @dfn{arguments} of the function "
"@code{+}.  These numbers are the information that is given to or "
"@dfn{passed} to the function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:1997
msgid ""
"The word `argument' comes from the way it is used in mathematics and does "
"not refer to a disputation between two people; instead it refers to the "
"information presented to the function, in this case, to the @code{+}.  In "
"Lisp, the arguments to a function are the atoms or lists that follow the "
"function.  The values returned by the evaluation of these atoms or lists are "
"passed to the function.  Different functions require different numbers of "
"arguments; some functions require none at all.@footnote{It is curious to "
"track the path by which the word `argument' came to have two different "
"meanings, one in mathematics and the other in everyday English.  According "
"to the @cite{Oxford English Dictionary}, the word derives from the Latin for "
"@samp{to make clear, prove}; thus it came to mean, by one thread of "
"derivation, `the evidence offered as proof', which is to say, `the "
"information offered', which led to its meaning in Lisp.  But in the other "
"thread of derivation, it came to mean `to assert in a manner against which "
"others may make counter assertions', which led to the meaning of the word as "
"a disputation.  (Note here that the English word has two different "
"definitions attached to it at the same time.  By contrast, in Emacs Lisp, a "
"symbol cannot have two different function definitions at the same time.)}"
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:2010
#, no-wrap
msgid "Arguments' Data Types"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:2012
#, no-wrap
msgid "Types of data"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:2013
#, no-wrap
msgid "Arguments' data types"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2019
msgid ""
"The type of data that should be passed to a function depends on what kind of "
"information it uses.  The arguments to a function such as @code{+} must have "
"values that are numbers, since @code{+} adds numbers.  Other functions use "
"different kinds of data for their arguments."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:2021
#, no-wrap
msgid "concat"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2027
msgid ""
"For example, the @code{concat} function links together or unites two or more "
"strings of text to produce a string.  The arguments are strings.  "
"Concatenating the two character strings @code{abc}, @code{def} produces the "
"single string @code{abcdef}.  This can be seen by evaluating the following:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:2030
#, no-wrap
msgid "(concat \"abc\" \"def\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2034
msgid "The value produced by evaluating this expression is @code{\"abcdef\"}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2042
msgid ""
"A function such as @code{substring} uses both a string and numbers as "
"arguments.  The function returns a part of the string, a substring of the "
"first argument.  This function takes three arguments.  Its first argument is "
"the string of characters, the second and third arguments are numbers that "
"indicate the beginning and end of the substring.  The numbers are a count of "
"the number of characters (including spaces and punctuation) from the "
"beginning of the string."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2045
msgid "For example, if you evaluate the following:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:2048
#, no-wrap
msgid "(substring \"The quick brown fox jumped.\" 16 19)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2053
msgid ""
"you will see @code{\"fox\"} appear in the echo area.  The arguments are the "
"string and the two numbers."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2062
msgid ""
"Note that the string passed to @code{substring} is a single atom even though "
"it is made up of several words separated by spaces.  Lisp counts everything "
"between the two quotation marks as part of the string, including the "
"spaces.  You can think of the @code{substring} function as a kind of `atom "
"smasher' since it takes an otherwise indivisible atom and extracts a part.  "
"However, @code{substring} is only able to extract a substring from an "
"argument that is a string, not from another type of atom such as a number or "
"symbol."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:2064
#, no-wrap
msgid "An Argument as the Value of a Variable or List"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2069
msgid ""
"An argument can be a symbol that returns a value when it is evaluated.  For "
"example, when the symbol @code{fill-column} by itself is evaluated, it "
"returns a number.  This number can be used in an addition."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2073
msgid "Position the cursor after the following expression and type @kbd{C-x C-e}:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:2076
#, no-wrap
msgid "(+ 2 fill-column)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2082
msgid ""
"The value will be a number two more than what you get by evaluating "
"@code{fill-column} alone.  For me, this is 74, because my value of "
"@code{fill-column} is 72."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2089
msgid ""
"As we have just seen, an argument can be a symbol that returns a value when "
"evaluated.  In addition, an argument can be a list that returns a value when "
"it is evaluated.  For example, in the following expression, the arguments to "
"the function @code{concat} are the strings @w{@code{\"The \"}} and "
"@w{@code{\" red foxes.\"}} and the list @code{(number-to-string (+ 2 "
"fill-column))}."
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:2093
#, no-wrap
msgid "(concat \"The \" (number-to-string (+ 2 fill-column)) \" red foxes.\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2103
msgid ""
"If you evaluate this expression---and if, as with my Emacs, "
"@code{fill-column} evaluates to 72---@code{\"The 74 red foxes.\"} will "
"appear in the echo area.  (Note that you must put spaces after the word "
"@samp{The} and before the word @samp{red} so they will appear in the final "
"string.  The function @code{number-to-string} converts the integer that the "
"addition function returns to a string.  @code{number-to-string} is also "
"known as @code{int-to-string}.)"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:2106
#, no-wrap
msgid "Variable number of arguments"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:2107
#, no-wrap
msgid "Arguments, variable number of"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2114
msgid ""
"Some functions, such as @code{concat}, @code{+} or @code{*}, take any number "
"of arguments.  (The @code{*} is the symbol for multiplication.)  This can be "
"seen by evaluating each of the following expressions in the usual way.  What "
"you will see in the echo area is printed in this text after "
"@samp{@result{}}, which you may read as `evaluates to'."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2117
msgid "In the first set, the functions have no arguments:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:2121
#, no-wrap
msgid ""
"(+)       @result{} 0\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:2123
#, no-wrap
msgid "(*)       @result{} 1\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2128
msgid "In this set, the functions have one argument each:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:2132
#, no-wrap
msgid ""
"(+ 3)     @result{} 3\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:2134
#, no-wrap
msgid "(* 3)     @result{} 3\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2139
msgid "In this set, the functions have three arguments each:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:2143
#, no-wrap
msgid ""
"(+ 3 4 5) @result{} 12\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:2145
#, no-wrap
msgid "(* 3 4 5) @result{} 60\n"
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:2149
#, no-wrap
msgid "Using the Wrong Type Object as an Argument"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:2150
#, no-wrap
msgid "Wrong type of argument"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:2151
#, no-wrap
msgid "Argument, wrong type of"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2159
msgid ""
"When a function is passed an argument of the wrong type, the Lisp "
"interpreter produces an error message.  For example, the @code{+} function "
"expects the values of its arguments to be numbers.  As an experiment we can "
"pass it the quoted symbol @code{hello} instead of a number.  Position the "
"cursor after the following expression and type @kbd{C-x C-e}:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:2162
#, no-wrap
msgid "(+ 2 'hello)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2170
msgid ""
"When you do this you will generate an error message.  What has happened is "
"that @code{+} has tried to add the 2 to the value returned by @code{'hello}, "
"but the value returned by @code{'hello} is the symbol @code{hello}, not a "
"number.  Only numbers can be added.  So @code{+} could not carry out its "
"addition."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2173
msgid "You will create and enter a @file{*Backtrace*} buffer that says:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:2186
#, no-wrap
msgid ""
"---------- Buffer: *Backtrace* ----------\n"
"Debugger entered--Lisp error:\n"
"         (wrong-type-argument number-or-marker-p hello)\n"
"  +(2 hello)\n"
"  eval((+ 2 (quote hello)))\n"
"  eval-last-sexp-1(nil)\n"
"  eval-last-sexp(nil)\n"
"  call-interactively(eval-last-sexp)\n"
"---------- Buffer: *Backtrace* ----------\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2193
msgid ""
"As usual, the error message tries to be helpful and makes sense after you "
"learn how to read it.@footnote{@code{(quote hello)} is an expansion of the "
"abbreviation @code{'hello}.}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2198
msgid ""
"The first part of the error message is straightforward; it says @samp{wrong "
"type argument}.  Next comes the mysterious jargon word "
"@w{@samp{number-or-marker-p}}.  This word is trying to tell you what kind of "
"argument the @code{+} expected."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2211
msgid ""
"The symbol @code{number-or-marker-p} says that the Lisp interpreter is "
"trying to determine whether the information presented it (the value of the "
"argument) is a number or a marker (a special object representing a buffer "
"position).  What it does is test to see whether the @code{+} is being given "
"numbers to add.  It also tests to see whether the argument is something "
"called a marker, which is a specific feature of Emacs Lisp.  (In Emacs, "
"locations in a buffer are recorded as markers.  When the mark is set with "
"the @kbd{C-@@} or @kbd{C-@key{SPC}} command, its position is kept as a "
"marker.  The mark can be considered a number---the number of characters the "
"location is from the beginning of the buffer.)  In Emacs Lisp, @code{+} can "
"be used to add the numeric value of marker positions as numbers."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2222
msgid ""
"The @samp{p} of @code{number-or-marker-p} is the embodiment of a practice "
"started in the early days of Lisp programming.  The @samp{p} stands for "
"`predicate'.  In the jargon used by the early Lisp researchers, a predicate "
"refers to a function to determine whether some property is true or false.  "
"So the @samp{p} tells us that @code{number-or-marker-p} is the name of a "
"function that determines whether it is true or false that the argument "
"supplied is a number or a marker.  Other Lisp symbols that end in @samp{p} "
"include @code{zerop}, a function that tests whether its argument has the "
"value of zero, and @code{listp}, a function that tests whether its argument "
"is a list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2228
msgid ""
"Finally, the last part of the error message is the symbol @code{hello}.  "
"This is the value of the argument that was passed to @code{+}.  If the "
"addition had been passed the correct type of object, the value passed would "
"have been a number, such as 37, rather than a symbol like @code{hello}.  But "
"then you would not have got the error message."
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:2236
#, no-wrap
msgid "Wrong type argument:@: number-or-marker-p, hello\n"
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:2243
#, no-wrap
msgid "The @code{message} Function"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2249
msgid ""
"Like @code{+}, the @code{message} function takes a variable number of "
"arguments.  It is used to send messages to the user and is so useful that we "
"will describe it here."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2253
msgid ""
"A message is printed in the echo area.  For example, you can print a message "
"in your echo area by evaluating the following list:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:2256
#, no-wrap
msgid "(message \"This message appears in the echo area!\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2266
msgid ""
"The whole string between double quotation marks is a single argument and is "
"printed @i{in toto}.  (Note that in this example, the message itself will "
"appear in the echo area within double quotes; that is because you see the "
"value returned by the @code{message} function.  In most uses of "
"@code{message} in programs that you write, the text will be printed in the "
"echo area as a side-effect, without the quotes.  @xref{multiply-by-seven in "
"detail, , @code{multiply-by-seven} in detail}, for an example of this.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2272
msgid ""
"However, if there is a @samp{%s} in the quoted string of characters, the "
"@code{message} function does not print the @samp{%s} as such, but looks to "
"the argument that follows the string.  It evaluates the second argument and "
"prints the value at the location in the string where the @samp{%s} is."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2276
msgid ""
"You can see this by positioning the cursor after the following expression "
"and typing @kbd{C-x C-e}:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:2279
#, no-wrap
msgid "(message \"The name of this buffer is: %s.\" (buffer-name))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2286
msgid ""
"In Info, @code{\"The name of this buffer is: *info*.\"} will appear in the "
"echo area.  The function @code{buffer-name} returns the name of the buffer "
"as a string, which the @code{message} function inserts in place of "
"@code{%s}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2290
msgid ""
"To print a value as an integer, use @samp{%d} in the same way as @samp{%s}.  "
"For example, to print a message in the echo area that states the value of "
"the @code{fill-column}, evaluate the following:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:2293
#, no-wrap
msgid "(message \"The value of fill-column is %d.\" fill-column)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2301
msgid ""
"On my system, when I evaluate this list, @code{\"The value of fill-column is "
"72.\"} appears in my echo area@footnote{Actually, you can use @code{%s} to "
"print a number.  It is non-specific.  @code{%d} prints only the part of a "
"number left of a decimal point, and not anything that is not a number.}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2306
msgid ""
"If there is more than one @samp{%s} in the quoted string, the value of the "
"first argument following the quoted string is printed at the location of the "
"first @samp{%s} and the value of the second argument is printed at the "
"location of the second @samp{%s}, and so on."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2309
msgid "For example, if you evaluate the following,"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:2314
#, no-wrap
msgid ""
"(message \"There are %d %s in the office!\"\n"
"         (- fill-column 14) \"pink elephants\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2320
msgid ""
"a rather whimsical message will appear in your echo area.  On my system it "
"says, @code{\"There are 58 pink elephants in the office!\"}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2326
msgid ""
"The expression @code{(- fill-column 14)} is evaluated and the resulting "
"number is inserted in place of the @samp{%d}; and the string in double "
"quotes, @code{\"pink elephants\"}, is treated as a single argument and "
"inserted in place of the @samp{%s}.  (That is to say, a string between "
"double quotes evaluates to itself, like a number.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2331
msgid ""
"Finally, here is a somewhat complex example that not only illustrates the "
"computation of a number, but also shows how you can use an expression within "
"an expression to generate the text that is substituted for @samp{%s}:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:2340
#, no-wrap
msgid ""
"(message \"He saw %d %s\"\n"
"         (- fill-column 32)\n"
"         (concat \"red \"\n"
"                 (substring\n"
"                  \"The quick brown foxes jumped.\" 16 21)\n"
"                 \" leaping.\"))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2349
msgid ""
"In this example, @code{message} has three arguments: the string, @code{\"He "
"saw %d %s\"}, the expression, @code{(- fill-column 32)}, and the expression "
"beginning with the function @code{concat}.  The value resulting from the "
"evaluation of @code{(- fill-column 32)} is inserted in place of the "
"@samp{%d}; and the value returned by the expression beginning with "
"@code{concat} is inserted in place of the @samp{%s}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2353
msgid ""
"When your fill column is 70 and you evaluate the expression, the message "
"@code{\"He saw 38 red foxes leaping.\"} appears in your echo area."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:2356
#, no-wrap
msgid "Variable, setting value"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:2357
#, no-wrap
msgid "Setting value of variable"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:2359
#, no-wrap
msgid "@samp{bind} defined"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2364
msgid ""
"There are several ways by which a variable can be given a value.  One of the "
"ways is to use either the function @code{set} or the function @code{setq}.  "
"Another way is to use @code{let} (@pxref{let}).  (The jargon for this "
"process is to @dfn{bind} a variable to a value.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2367
msgid ""
"The following sections not only describe how @code{set} and @code{setq} work "
"but also illustrate how arguments are passed."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:2375
#, no-wrap
msgid "Using @code{set}"
msgstr ""

#. type: itemx
#: emacs-lisp-intro.texi:2376 emacs-lisp-intro.texi:4575
#, no-wrap
msgid "set"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2381
msgid ""
"To set the value of the symbol @code{flowers} to the list @code{'(rose "
"violet daisy buttercup)}, evaluate the following expression by positioning "
"the cursor after the expression and typing @kbd{C-x C-e}."
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:2384
#, no-wrap
msgid "(set 'flowers '(rose violet daisy buttercup))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2396
msgid ""
"The list @code{(rose violet daisy buttercup)} will appear in the echo area.  "
"This is what is @emph{returned} by the @code{set} function.  As a side "
"effect, the symbol @code{flowers} is bound to the list; that is, the symbol "
"@code{flowers}, which can be viewed as a variable, is given the list as its "
"value.  (This process, by the way, illustrates how a side effect to the Lisp "
"interpreter, setting the value, can be the primary effect that we humans are "
"interested in.  This is because every Lisp function must return a value if "
"it does not get an error, but it will only have a side effect if it is "
"designed to have one.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2400
msgid ""
"After evaluating the @code{set} expression, you can evaluate the symbol "
"@code{flowers} and it will return the value you just set.  Here is the "
"symbol.  Place your cursor after it and type @kbd{C-x C-e}."
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:2403
#, no-wrap
msgid "flowers\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2408
msgid ""
"When you evaluate @code{flowers}, the list @code{(rose violet daisy "
"buttercup)} appears in the echo area."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2412
msgid ""
"Incidentally, if you evaluate @code{'flowers}, the variable with a quote in "
"front of it, what you will see in the echo area is the symbol itself, "
"@code{flowers}.  Here is the quoted symbol, so you can try this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:2415
#, no-wrap
msgid "'flowers\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2429
msgid ""
"Note also, that when you use @code{set}, you need to quote both arguments to "
"@code{set}, unless you want them evaluated.  Since we do not want either "
"argument evaluated, neither the variable @code{flowers} nor the list "
"@code{(rose violet daisy buttercup)}, both are quoted.  (When you use "
"@code{set} without quoting its first argument, the first argument is "
"evaluated before anything else is done.  If you did this and @code{flowers} "
"did not have a value already, you would get an error message that the "
"@samp{Symbol's value as variable is void}; on the other hand, if "
"@code{flowers} did return a value after it was evaluated, the @code{set} "
"would attempt to set the value that was returned.  There are situations "
"where this is the right thing for the function to do; but such situations "
"are rare.)"
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:2431
#, no-wrap
msgid "Using @code{setq}"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:2432 emacs-lisp-intro.texi:4574
#, no-wrap
msgid "setq"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2441
msgid ""
"As a practical matter, you almost always quote the first argument to "
"@code{set}.  The combination of @code{set} and a quoted first argument is so "
"common that it has its own name: the special form @code{setq}.  This special "
"form is just like @code{set} except that the first argument is quoted "
"automatically, so you don't need to type the quote mark yourself.  Also, as "
"an added convenience, @code{setq} permits you to set several different "
"variables to different values, all in one expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2445
msgid ""
"To set the value of the variable @code{carnivores} to the list @code{'(lion "
"tiger leopard)} using @code{setq}, the following expression is used:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:2448
#, no-wrap
msgid "(setq carnivores '(lion tiger leopard))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2454
msgid ""
"This is exactly the same as using @code{set} except the first argument is "
"automatically quoted by @code{setq}.  (The @samp{q} in @code{setq} means "
"@code{quote}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2457
msgid "With @code{set}, the expression would look like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:2460
#, no-wrap
msgid "(set 'carnivores '(lion tiger leopard))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2468
msgid ""
"Also, @code{setq} can be used to assign different values to different "
"variables.  The first argument is bound to the value of the second argument, "
"the third argument is bound to the value of the fourth argument, and so on.  "
"For example, you could use the following to assign a list of trees to the "
"symbol @code{trees} and a list of herbivores to the symbol "
"@code{herbivores}:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:2473
#, no-wrap
msgid ""
"(setq trees '(pine fir oak maple)\n"
"      herbivores '(gazelle antelope zebra))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2480
msgid ""
"(The expression could just as well have been on one line, but it might not "
"have fit on a page; and humans find it easier to read nicely formatted "
"lists.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2489
msgid ""
"Although I have been using the term `assign', there is another way of "
"thinking about the workings of @code{set} and @code{setq}; and that is to "
"say that @code{set} and @code{setq} make the symbol @emph{point} to the "
"list.  This latter way of thinking is very common and in forthcoming "
"chapters we shall come upon at least one symbol that has `pointer' as part "
"of its name.  The name is chosen because the symbol has a value, "
"specifically a list, attached to it; or, expressed another way, the symbol "
"is set to ``point'' to the list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2502
msgid ""
"Here is an example that shows how to use @code{setq} in a counter.  You "
"might use this to count how many times a part of your program repeats "
"itself.  First set a variable to zero; then add one to the number each time "
"the program repeats itself.  To do this, you need a variable that serves as "
"a counter, and two expressions: an initial @code{setq} expression that sets "
"the counter variable to zero; and a second @code{setq} expression that "
"increments the counter each time it is evaluated."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:2506
#, no-wrap
msgid ""
"(setq counter 0)                ; @r{Let's call this the initializer.}\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:2508
#, no-wrap
msgid ""
"(setq counter (+ counter 1))    ; @r{This is the incrementer.}\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:2510
#, no-wrap
msgid "counter                         ; @r{This is the counter.}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2516
msgid ""
"(The text following the @samp{;} are comments.  @xref{Change a defun, , "
"Change a Function Definition}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2525
msgid ""
"If you evaluate the first of these expressions, the initializer, @code{(setq "
"counter 0)}, and then evaluate the third expression, @code{counter}, the "
"number @code{0} will appear in the echo area.  If you then evaluate the "
"second expression, the incrementer, @code{(setq counter (+ counter 1))}, the "
"counter will get the value 1.  So if you again evaluate @code{counter}, the "
"number @code{1} will appear in the echo area.  Each time you evaluate the "
"second expression, the value of the counter will be incremented."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2535
msgid ""
"When you evaluate the incrementer, @code{(setq counter (+ counter 1))}, the "
"Lisp interpreter first evaluates the innermost list; this is the addition.  "
"In order to evaluate this list, it must evaluate the variable @code{counter} "
"and the number @code{1}.  When it evaluates the variable @code{counter}, it "
"receives its current value.  It passes this value and the number @code{1} to "
"the @code{+} which adds them together.  The sum is then returned as the "
"value of the inner list and passed to the @code{setq} which sets the "
"variable @code{counter} to this new value.  Thus, the value of the variable, "
"@code{counter}, is changed."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2542
msgid ""
"Learning Lisp is like climbing a hill in which the first part is the "
"steepest.  You have now climbed the most difficult part; what remains "
"becomes easier as you progress onwards."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2545
msgid "In summary,"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:2550
msgid "Lisp programs are made up of expressions, which are lists or single atoms."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:2554
msgid ""
"Lists are made up of zero or more atoms or inner lists, separated by "
"whitespace and surrounded by parentheses.  A list can be empty."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:2559
msgid ""
"Atoms are multi-character symbols, like @code{forward-paragraph}, single "
"character symbols like @code{+}, strings of characters between double "
"quotation marks, or numbers."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:2562
msgid "A number evaluates to itself."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:2565
msgid "A string between double quotes also evaluates to itself."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:2568
msgid "When you evaluate a symbol by itself, its value is returned."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:2573
msgid ""
"When you evaluate a list, the Lisp interpreter looks at the first symbol in "
"the list and then at the function definition bound to that symbol.  Then the "
"instructions in the function definition are carried out."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:2576
msgid "A single quotation mark,"
msgstr ""

#. type: code{#1}
#: emacs-lisp-intro.texi:2578 emacs-lisp-intro.texi:2581
msgid "'"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:2585
msgid ""
", tells the Lisp interpreter that it should return the following expression "
"as written, and not evaluate it as it would if the quote were not there."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:2590
msgid ""
"Arguments are the information passed to a function.  The arguments to a "
"function are computed by evaluating the rest of the elements of the list of "
"which the function is the first element."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:2596
msgid ""
"A function always returns a value when it is evaluated (unless it gets an "
"error); in addition, it may also carry out some action called a ``side "
"effect''.  In many cases, a function's primary purpose is to create a side "
"effect."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:2599 emacs-lisp-intro.texi:4627 emacs-lisp-intro.texi:5519
#, no-wrap
msgid "Exercises"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2602
msgid "A few simple exercises:"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:2607
msgid ""
"Generate an error message by evaluating an appropriate symbol that is not "
"within parentheses."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:2611
msgid ""
"Generate an error message by evaluating an appropriate symbol that is "
"between parentheses."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:2614
msgid "Create a counter that increments by two rather than one."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:2618
msgid "Write an expression that prints a message in the echo area when evaluated."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:2622
#, no-wrap
msgid "Practicing evaluation"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:2623
#, no-wrap
msgid "Evaluation practice"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2633
msgid ""
"Before learning how to write a function definition in Emacs Lisp, it is "
"useful to spend a little time evaluating various expressions that have "
"already been written.  These expressions will be lists with the functions as "
"their first (and often only) element.  Since some of the functions "
"associated with buffers are both simple and interesting, we will start with "
"those.  In this section, we will evaluate a few of these.  In another "
"section, we will study the code of several other buffer-related functions, "
"to see how they were written."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2654
msgid ""
"@i{Whenever you give an editing command} to Emacs Lisp, such as the command "
"to move the cursor or to scroll the screen, @i{you are evaluating an "
"expression,} the first element of which is a function.  @i{This is how Emacs "
"works.}"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:2655
#, no-wrap
msgid "@samp{interactive function} defined"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:2656
#, no-wrap
msgid "@samp{command} defined"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2665
msgid ""
"When you type keys, you cause the Lisp interpreter to evaluate an expression "
"and that is how you get your results.  Even typing plain text involves "
"evaluating an Emacs Lisp function, in this case, one that uses "
"@code{self-insert-command}, which simply inserts the character you typed.  "
"The functions you evaluate by typing keystrokes are called @dfn{interactive} "
"functions, or @dfn{commands}; how you make a function interactive will be "
"illustrated in the chapter on how to write function definitions.  "
"@xref{Interactive, , Making a Function Interactive}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2671
msgid ""
"In addition to typing keyboard commands, we have seen a second way to "
"evaluate an expression: by positioning the cursor after a list and typing "
"@kbd{C-x C-e}.  This is what we will do in the rest of this section.  There "
"are other ways to evaluate an expression as well; these will be described as "
"we come to them."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2676
msgid ""
"Besides being used for practicing evaluation, the functions shown in the "
"next few sections are important in their own right.  A study of these "
"functions makes clear the distinction between buffers and files, how to "
"switch to a buffer, and how to determine a location within it."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:2679 emacs-lisp-intro.texi:4583
#, no-wrap
msgid "buffer-name"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:2680 emacs-lisp-intro.texi:4586
#, no-wrap
msgid "buffer-file-name"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2690
msgid ""
"The two functions, @code{buffer-name} and @code{buffer-file-name}, show the "
"difference between a file and a buffer.  When you evaluate the following "
"expression, @code{(buffer-name)}, the name of the buffer appears in the echo "
"area.  When you evaluate @code{(buffer-file-name)}, the name of the file to "
"which the buffer refers appears in the echo area.  Usually, the name "
"returned by @code{(buffer-name)} is the same as the name of the file to "
"which it refers, and the name returned by @code{(buffer-file-name)} is the "
"full path-name of the file."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2700
msgid ""
"A file and a buffer are two different entities.  A file is information "
"recorded permanently in the computer (unless you delete it).  A buffer, on "
"the other hand, is information inside of Emacs that will vanish at the end "
"of the editing session (or when you kill the buffer).  Usually, a buffer "
"contains information that you have copied from a file; we say the buffer is "
"@dfn{visiting} that file.  This copy is what you work on and modify.  "
"Changes to the buffer do not change the file, until you save the buffer.  "
"When you save the buffer, the buffer is copied to the file and is thus saved "
"permanently."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2705
msgid ""
"If you are reading this in Info inside of GNU Emacs, you can evaluate each "
"of the following expressions by positioning the cursor after it and typing "
"@kbd{C-x C-e}."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:2709
#, no-wrap
msgid ""
"(buffer-name)\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:2711
#, no-wrap
msgid "(buffer-file-name)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2718
msgid ""
"When I do this in Info, the value returned by evaluating "
"@code{(buffer-name)} is @file{\"*info*\"}, and the value returned by "
"evaluating @code{(buffer-file-name)} is @file{nil}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2724
msgid ""
"On the other hand, while I am writing this document, the value returned by "
"evaluating @code{(buffer-name)} is @file{\"introduction.texinfo\"}, and the "
"value returned by evaluating @code{(buffer-file-name)} is "
"@file{\"/gnu/work/intro/introduction.texinfo\"}."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:2725
#, no-wrap
msgid "@code{nil}, history of word"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2733
msgid ""
"The former is the name of the buffer and the latter is the name of the "
"file.  In Info, the buffer name is @file{\"*info*\"}.  Info does not point "
"to any file, so the result of evaluating @code{(buffer-file-name)} is "
"@file{nil}.  The symbol @code{nil} is from the Latin word for `nothing'; in "
"this case, it means that the buffer is not associated with any file.  (In "
"Lisp, @code{nil} is also used to mean `false' and is a synonym for the empty "
"list, @code{()}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2737
msgid ""
"When I am writing, the name of my buffer is "
"@file{\"introduction.texinfo\"}.  The name of the file to which it points is "
"@file{\"/gnu/work/intro/introduction.texinfo\"}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2742
msgid ""
"(In the expressions, the parentheses tell the Lisp interpreter to treat "
"@w{@code{buffer-name}} and @w{@code{buffer-file-name}} as functions; without "
"the parentheses, the interpreter would attempt to evaluate the symbols as "
"variables.  @xref{Variables}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2750
msgid ""
"In spite of the distinction between files and buffers, you will often find "
"that people refer to a file when they mean a buffer and vice-verse.  Indeed, "
"most people say, ``I am editing a file,'' rather than saying, ``I am editing "
"a buffer which I will soon save to a file.'' It is almost always clear from "
"context what people mean.  When dealing with computer programs, however, it "
"is important to keep the distinction in mind, since the computer is not as "
"smart as a person."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:2751
#, no-wrap
msgid "Buffer, history of word"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2765
msgid ""
"The word `buffer', by the way, comes from the meaning of the word as a "
"cushion that deadens the force of a collision.  In early computers, a buffer "
"cushioned the interaction between files and the computer's central "
"processing unit.  The drums or tapes that held a file and the central "
"processing unit were pieces of equipment that were very different from each "
"other, working at their own speeds, in spurts.  The buffer made it possible "
"for them to work together effectively.  Eventually, the buffer grew from "
"being an intermediary, a temporary holding place, to being the place where "
"work is done.  This transformation is rather like that of a small seaport "
"that grew into a great city: once it was merely the place where cargo was "
"warehoused temporarily before being loaded onto ships; then it became a "
"business and cultural center in its own right."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2769
msgid ""
"Not all buffers are associated with files.  For example, a @file{*scratch*} "
"buffer does not visit any file.  Similarly, a @file{*Help*} buffer is not "
"associated with any file."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2776
msgid ""
"In the old days, when you lacked a @file{~/.emacs} file and started an Emacs "
"session by typing the command @code{emacs} alone, without naming any files, "
"Emacs started with the @file{*scratch*} buffer visible.  Nowadays, you will "
"see a splash screen.  You can follow one of the commands suggested on the "
"splash screen, visit a file, or press the spacebar to reach the "
"@file{*scratch*} buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2785
msgid ""
"If you switch to the @file{*scratch*} buffer, type @code{(buffer-name)}, "
"position the cursor after it, and then type @kbd{C-x C-e} to evaluate the "
"expression.  The name @code{\"*scratch*\"} will be returned and will appear "
"in the echo area.  @code{\"*scratch*\"} is the name of the buffer.  When you "
"type @code{(buffer-file-name)} in the @file{*scratch*} buffer and evaluate "
"that, @code{nil} will appear in the echo area, just as it does when you "
"evaluate @code{(buffer-file-name)} in Info."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2791
msgid ""
"Incidentally, if you are in the @file{*scratch*} buffer and want the value "
"returned by an expression to appear in the @file{*scratch*} buffer itself "
"rather than in the echo area, type @kbd{C-u C-x C-e} instead of @kbd{C-x "
"C-e}.  This causes the value returned to appear after the expression.  The "
"buffer will look like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:2794
#, no-wrap
msgid "(buffer-name)\"*scratch*\"\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2801
msgid ""
"You cannot do this in Info since Info is read-only and it will not allow you "
"to change the contents of the buffer.  But you can do this in any buffer you "
"can edit; and when you write code or documentation (such as this book), this "
"feature is very useful."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:2804 emacs-lisp-intro.texi:4590
#, no-wrap
msgid "current-buffer"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:2805 emacs-lisp-intro.texi:4594
#, no-wrap
msgid "other-buffer"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:2806
#, no-wrap
msgid "Getting a buffer"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2812
msgid ""
"The @code{buffer-name} function returns the @emph{name} of the buffer; to "
"get the buffer @emph{itself}, a different function is needed: the "
"@code{current-buffer} function.  If you use this function in code, what you "
"get is the buffer itself."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2823
msgid ""
"A name and the object or entity to which the name refers are different from "
"each other.  You are not your name.  You are a person to whom others refer "
"by name.  If you ask to speak to George and someone hands you a card with "
"the letters @samp{G}, @samp{e}, @samp{o}, @samp{r}, @samp{g}, and @samp{e} "
"written on it, you might be amused, but you would not be satisfied.  You do "
"not want to speak to the name, but to the person to whom the name refers.  A "
"buffer is similar: the name of the scratch buffer is @file{*scratch*}, but "
"the name is not the buffer.  To get a buffer itself, you need to use a "
"function such as @code{current-buffer}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2831
msgid ""
"However, there is a slight complication: if you evaluate "
"@code{current-buffer} in an expression on its own, as we will do here, what "
"you see is a printed representation of the name of the buffer without the "
"contents of the buffer.  Emacs works this way for two reasons: the buffer "
"may be thousands of lines long---too long to be conveniently displayed; and, "
"another buffer may have the same contents but a different name, and it is "
"important to distinguish between them."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2834
msgid "Here is an expression containing the function:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:2837
#, no-wrap
msgid "(current-buffer)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2844
msgid ""
"If you evaluate this expression in Info in Emacs in the usual way, "
"@file{#<buffer *info*>} will appear in the echo area.  The special format "
"indicates that the buffer itself is being returned, rather than just its "
"name."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2848
msgid ""
"Incidentally, while you can type a number or symbol into a program, you "
"cannot do that with the printed representation of a buffer: the only way to "
"get a buffer itself is with a function such as @code{current-buffer}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2854
msgid ""
"A related function is @code{other-buffer}.  This returns the most recently "
"selected buffer other than the one you are in currently, not a printed "
"representation of its name.  If you have recently switched back and forth "
"from the @file{*scratch*} buffer, @code{other-buffer} will return that "
"buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2857
msgid "You can see this by evaluating the expression:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:2860
#, no-wrap
msgid "(other-buffer)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2869
msgid ""
"You should see @file{#<buffer *scratch*>} appear in the echo area, or the "
"name of whatever other buffer you switched back from most "
"recently@footnote{Actually, by default, if the buffer from which you just "
"switched is visible to you in another window, @code{other-buffer} will "
"choose the most recent buffer that you cannot see; this is a subtlety that I "
"often forget.}."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:2872 emacs-lisp-intro.texi:4599
#, no-wrap
msgid "switch-to-buffer"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:2873 emacs-lisp-intro.texi:4603 emacs-lisp-intro.texi:5505
#, no-wrap
msgid "set-buffer"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:2874
#, no-wrap
msgid "Switching to a buffer"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2880
msgid ""
"The @code{other-buffer} function actually provides a buffer when it is used "
"as an argument to a function that requires one.  We can see this by using "
"@code{other-buffer} and @code{switch-to-buffer} to switch to a different "
"buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2896
msgid ""
"But first, a brief introduction to the @code{switch-to-buffer} function.  "
"When you switched back and forth from Info to the @file{*scratch*} buffer to "
"evaluate @code{(buffer-name)}, you most likely typed @kbd{C-x b} and then "
"typed @file{*scratch*}@footnote{Or rather, to save typing, you probably only "
"typed @kbd{RET} if the default buffer was @file{*scratch*}, or if it was "
"different, then you typed just part of the name, such as @code{*sc}, pressed "
"your @kbd{TAB} key to cause it to expand to the full name, and then typed "
"@kbd{RET}.} when prompted in the minibuffer for the name of the buffer to "
"which you wanted to switch.  The keystrokes, @kbd{C-x b}, cause the Lisp "
"interpreter to evaluate the interactive function @code{switch-to-buffer}.  "
"As we said before, this is how Emacs works: different keystrokes call or run "
"different functions.  For example, @kbd{C-f} calls @code{forward-char}, "
"@kbd{M-e} calls @code{forward-sentence}, and so on."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2900
msgid ""
"By writing @code{switch-to-buffer} in an expression, and giving it a buffer "
"to switch to, we can switch buffers just the way @kbd{C-x b} does:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:2903
#, no-wrap
msgid "(switch-to-buffer (other-buffer))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2933
msgid ""
"The symbol @code{switch-to-buffer} is the first element of the list, so the "
"Lisp interpreter will treat it as a function and carry out the instructions "
"that are attached to it.  But before doing that, the interpreter will note "
"that @code{other-buffer} is inside parentheses and work on that symbol "
"first.  @code{other-buffer} is the first (and in this case, the only) "
"element of this list, so the Lisp interpreter calls or runs the function.  "
"It returns another buffer.  Next, the interpreter runs "
"@code{switch-to-buffer}, passing to it, as an argument, the other buffer, "
"which is what Emacs will switch to.  If you are reading this in Info, try "
"this now.  Evaluate the expression.  (To get back, type @kbd{C-x b "
"@key{RET}}.)@footnote{Remember, this expression will move you to your most "
"recent other buffer that you cannot see.  If you really want to go to your "
"most recently selected buffer, even if you can still see it, you need to "
"evaluate the following more complex expression: @smallexample "
"(switch-to-buffer (other-buffer (current-buffer) t))  @end smallexample In "
"this case, the first argument to @code{other-buffer} tells it which buffer "
"to skip---the current one---and the second argument tells "
"@code{other-buffer} it is OK to switch to a visible buffer.  In regular use, "
"@code{switch-to-buffer} takes you to an invisible window since you would "
"most likely use @kbd{C-x o} (@code{other-window})  to go to another visible "
"buffer.}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2942
msgid ""
"In the programming examples in later sections of this document, you will see "
"the function @code{set-buffer} more often than @code{switch-to-buffer}.  "
"This is because of a difference between computer programs and humans: humans "
"have eyes and expect to see the buffer on which they are working on their "
"computer terminals.  This is so obvious, it almost goes without saying.  "
"However, programs do not have eyes.  When a computer program works on a "
"buffer, that buffer does not need to be visible on the screen."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2950
msgid ""
"@code{switch-to-buffer} is designed for humans and does two different "
"things: it switches the buffer to which Emacs's attention is directed; and "
"it switches the buffer displayed in the window to the new buffer.  "
"@code{set-buffer}, on the other hand, does only one thing: it switches the "
"attention of the computer program to a different buffer.  The buffer on the "
"screen remains unchanged (of course, normally nothing happens there until "
"the command finishes running)."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:2951
#, no-wrap
msgid "@samp{call} defined"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2958
msgid ""
"Also, we have just introduced another jargon term, the word @dfn{call}.  "
"When you evaluate a list in which the first symbol is a function, you are "
"calling that function.  The use of the term comes from the notion of the "
"function as an entity that can do something for you if you `call' it---just "
"as a plumber is an entity who can fix a leak if you call him or her."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:2960
#, no-wrap
msgid "Buffer Size and the Location of Point"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:2961
#, no-wrap
msgid "Size of buffer"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:2962
#, no-wrap
msgid "Buffer size"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:2963
#, no-wrap
msgid "Point location"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:2964
#, no-wrap
msgid "Location of point"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2970
msgid ""
"Finally, let's look at several rather simple functions, @code{buffer-size}, "
"@code{point}, @code{point-min}, and @code{point-max}.  These give "
"information about the size of a buffer and the location of point within it."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2974
msgid ""
"The function @code{buffer-size} tells you the size of the current buffer; "
"that is, the function returns a count of the number of characters in the "
"buffer."
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:2977
#, no-wrap
msgid "(buffer-size)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2982
msgid ""
"You can evaluate this in the usual way, by positioning the cursor after the "
"expression and typing @kbd{C-x C-e}."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:2983
#, no-wrap
msgid "@samp{point} defined"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2988
msgid ""
"In Emacs, the current position of the cursor is called @dfn{point}.  The "
"expression @code{(point)} returns a number that tells you where the cursor "
"is located as a count of the number of characters from the beginning of the "
"buffer up to point."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:2992
msgid ""
"You can see the character count for point in this buffer by evaluating the "
"following expression in the usual way:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:2995 emacs-lisp-intro.texi:3008
#, no-wrap
msgid "(point)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3001
msgid ""
"As I write this, the value of @code{point} is 65724.  The @code{point} "
"function is frequently used in some of the examples later in this book."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3005
msgid ""
"The value of point depends, of course, on its location within the buffer.  "
"If you evaluate point in this spot, the number will be larger:"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3015
msgid ""
"For me, the value of point in this location is 66043, which means that there "
"are 319 characters (including spaces) between the two expressions.  "
"(Doubtless, you will see different numbers, since I will have edited this "
"since I first evaluated point.)"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3016
#, no-wrap
msgid "@samp{narrowing} defined"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3025
msgid ""
"The function @code{point-min} is somewhat similar to @code{point}, but it "
"returns the value of the minimum permissible value of point in the current "
"buffer.  This is the number 1 unless @dfn{narrowing} is in effect.  "
"(Narrowing is a mechanism whereby you can restrict yourself, or a program, "
"to operations on just a part of a buffer.  @xref{Narrowing & Widening, , "
"Narrowing and Widening}.)  Likewise, the function @code{point-max} returns "
"the value of the maximum permissible value of point in the current buffer."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:3027 emacs-lisp-intro.texi:7528 emacs-lisp-intro.texi:10028 emacs-lisp-intro.texi:16826
#, no-wrap
msgid "Exercise"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3031
msgid ""
"Find a file with which you are working and move towards its middle.  Find "
"its buffer name, file name, length, and your position in the file."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3034
#, no-wrap
msgid "Definition writing"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3035
#, no-wrap
msgid "Function definition writing"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3036
#, no-wrap
msgid "Writing a function definition"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3045
msgid ""
"When the Lisp interpreter evaluates a list, it looks to see whether the "
"first symbol on the list has a function definition attached to it; or, put "
"another way, whether the symbol points to a function definition.  If it "
"does, the computer carries out the instructions in the definition.  A symbol "
"that has a function definition is called, simply, a function (although, "
"properly speaking, the definition is the function and the symbol refers to "
"it.)"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:3063
#, no-wrap
msgid "Primitive Functions"
msgstr ""

#. type: unnumberedsec
#: emacs-lisp-intro.texi:3064
#, no-wrap
msgid "An Aside about Primitive Functions"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3066
#, no-wrap
msgid "Primitive functions"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3067
#, no-wrap
msgid "Functions, primitive"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3069
#, no-wrap
msgid "C language primitives"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3070
#, no-wrap
msgid "Primitives written in C"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3080
msgid ""
"All functions are defined in terms of other functions, except for a few "
"@dfn{primitive} functions that are written in the C programming language.  "
"When you write functions' definitions, you will write them in Emacs Lisp and "
"use other functions as your building blocks.  Some of the functions you will "
"use will themselves be written in Emacs Lisp (perhaps by you) and some will "
"be primitives written in C@.  The primitive functions are used exactly like "
"those written in Emacs Lisp and behave like them.  They are written in C so "
"we can easily run GNU Emacs on any computer that has sufficient power and "
"can run C."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3087
msgid ""
"Let me re-emphasize this: when you write code in Emacs Lisp, you do not "
"distinguish between the use of functions written in C and the use of "
"functions written in Emacs Lisp.  The difference is irrelevant.  I mention "
"the distinction only because it is interesting to know.  Indeed, unless you "
"investigate, you won't know whether an already-written function is written "
"in Emacs Lisp or C."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:3089
#, no-wrap
msgid "The @code{defun} Special Form"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3091
#, no-wrap
msgid "Special form of @code{defun}"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3093
#, no-wrap
msgid "@samp{function definition} defined"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3101
msgid ""
"In Lisp, a symbol such as @code{mark-whole-buffer} has code attached to it "
"that tells the computer what to do when the function is called.  This code "
"is called the @dfn{function definition} and is created by evaluating a Lisp "
"expression that starts with the symbol @code{defun} (which is an "
"abbreviation for @emph{define function}).  Because @code{defun} does not "
"evaluate its arguments in the usual way, it is called a @dfn{special form}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3110
msgid ""
"In subsequent sections, we will look at function definitions from the Emacs "
"source code, such as @code{mark-whole-buffer}.  In this section, we will "
"describe a simple function definition so you can see how it looks.  This "
"function definition uses arithmetic because it makes for a simple example.  "
"Some people dislike examples using arithmetic; however, if you are such a "
"person, do not despair.  Hardly any of the code we will study in the "
"remainder of this introduction involves arithmetic or mathematics.  The "
"examples mostly involve text in one way or another."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3113
msgid "A function definition has up to five parts following the word @code{defun}:"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:3118
msgid "The name of the symbol to which the function definition should be attached."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:3123
msgid ""
"A list of the arguments that will be passed to the function.  If no "
"arguments will be passed to the function, this is an empty list, @code{()}."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:3127
msgid ""
"Documentation describing the function.  (Technically optional, but strongly "
"recommended.)"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:3132
msgid ""
"Optionally, an expression to make the function interactive so you can use it "
"by typing @kbd{M-x} and then the name of the function; or by typing an "
"appropriate key or keychord."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3133
#, no-wrap
msgid "@samp{body} defined"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:3137
msgid ""
"The code that instructs the computer what to do: the @dfn{body} of the "
"function definition."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3141
msgid ""
"It is helpful to think of the five parts of a function definition as being "
"organized in a template, with slots for each part:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:3148
#, no-wrap
msgid ""
"(defun @var{function-name} (@var{arguments}@dots{})\n"
"  \"@var{optional-documentation}@dots{}\"\n"
"  (interactive @var{argument-passing-info})     ; @r{optional}\n"
"  @var{body}@dots{})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3154
msgid ""
"As an example, here is the code for a function that multiplies its argument "
"by 7.  (This example is not interactive.  @xref{Interactive, , Making a "
"Function Interactive}, for that information.)"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:3160 emacs-lisp-intro.texi:3281 emacs-lisp-intro.texi:14654
#, no-wrap
msgid ""
"(defun multiply-by-seven (number)\n"
"  \"Multiply NUMBER by seven.\"\n"
"  (* 7 number))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3165
msgid ""
"This definition begins with a parenthesis and the symbol @code{defun}, "
"followed by the name of the function."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3166
#, no-wrap
msgid "@samp{argument list} defined"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3173
msgid ""
"The name of the function is followed by a list that contains the arguments "
"that will be passed to the function.  This list is called the @dfn{argument "
"list}.  In this example, the list has only one element, the symbol, "
"@code{number}.  When the function is used, the symbol will be bound to the "
"value that is used as the argument to the function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3184
msgid ""
"Instead of choosing the word @code{number} for the name of the argument, I "
"could have picked any other name.  For example, I could have chosen the word "
"@code{multiplicand}.  I picked the word `number' because it tells what kind "
"of value is intended for this slot; but I could just as well have chosen the "
"word `multiplicand' to indicate the role that the value placed in this slot "
"will play in the workings of the function.  I could have called it "
"@code{foogle}, but that would have been a bad choice because it would not "
"tell humans what it means.  The choice of name is up to the programmer and "
"should be chosen to make the meaning of the function clear."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3197
msgid ""
"Indeed, you can choose any name you wish for a symbol in an argument list, "
"even the name of a symbol used in some other function: the name you use in "
"an argument list is private to that particular definition.  In that "
"definition, the name refers to a different entity than any use of the same "
"name outside the function definition.  Suppose you have a nick-name `Shorty' "
"in your family; when your family members refer to `Shorty', they mean you.  "
"But outside your family, in a movie, for example, the name `Shorty' refers "
"to someone else.  Because a name in an argument list is private to the "
"function definition, you can change the value of such a symbol inside the "
"body of a function without changing its value outside the function.  The "
"effect is similar to that produced by a @code{let} expression.  (@xref{let, "
", @code{let}}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3224
msgid ""
"The argument list is followed by the documentation string that describes the "
"function.  This is what you see when you type @w{@kbd{C-h f}} and the name "
"of a function.  Incidentally, when you write a documentation string like "
"this, you should make the first line a complete sentence since some "
"commands, such as @code{apropos}, print only the first line of a multi-line "
"documentation string.  Also, you should not indent the second line of a "
"documentation string, if you have one, because that looks odd when you use "
"@kbd{C-h f} (@code{describe-function}).  The documentation string is "
"optional, but it is so useful, it should be included in almost every "
"function you write."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:3225
#, no-wrap
msgid "* @r{(multiplication)}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3232
msgid ""
"The third line of the example consists of the body of the function "
"definition.  (Most functions' definitions, of course, are longer than this.)  "
"In this function, the body is the list, @code{(* 7 number)}, which says to "
"multiply the value of @var{number} by 7.  (In Emacs Lisp, @code{*} is the "
"function for multiplication, just as @code{+} is the function for addition.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3237
msgid ""
"When you use the @code{multiply-by-seven} function, the argument "
"@code{number} evaluates to the actual number you want used.  Here is an "
"example that shows how @code{multiply-by-seven} is used; but don't try to "
"evaluate this yet!"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:3240 emacs-lisp-intro.texi:3309
#, no-wrap
msgid "(multiply-by-seven 3)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3251
msgid ""
"The symbol @code{number}, specified in the function definition in the next "
"section, is given or ``bound to'' the value 3 in the actual use of the "
"function.  Note that although @code{number} was inside parentheses in the "
"function definition, the argument passed to the @code{multiply-by-seven} "
"function is not in parentheses.  The parentheses are written in the function "
"definition so the computer can figure out where the argument list ends and "
"the rest of the function definition begins."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3259
msgid ""
"If you evaluate this example, you are likely to get an error message.  (Go "
"ahead, try it!)  This is because we have written the function definition, "
"but not yet told the computer about the definition---we have not yet "
"installed (or `loaded') the function definition in Emacs.  Installing a "
"function is the process that tells the Lisp interpreter the definition of "
"the function.  Installation is described in the next section."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3263
#, no-wrap
msgid "Definition installation"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3264
#, no-wrap
msgid "Function definition installation"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3275
msgid ""
"If you are reading this inside of Info in Emacs, you can try out the "
"@code{multiply-by-seven} function by first evaluating the function "
"definition and then evaluating @code{(multiply-by-seven 3)}.  A copy of the "
"function definition follows.  Place the cursor after the last parenthesis of "
"the function definition and type @kbd{C-x C-e}.  When you do this, "
"@code{multiply-by-seven} will appear in the echo area.  (What this means is "
"that when a function definition is evaluated, the value it returns is the "
"name of the defined function.)  At the same time, this action installs the "
"function definition."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3291
msgid ""
"By evaluating this @code{defun}, you have just installed "
"@code{multiply-by-seven} in Emacs.  The function is now just as much a part "
"of Emacs as @code{forward-word} or any other editing function you use.  "
"(@code{multiply-by-seven} will stay installed until you quit Emacs.  To "
"reload code automatically whenever you start Emacs, see @ref{Permanent "
"Installation, , Installing Code Permanently}.)"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:3298
#, no-wrap
msgid "Effect of installation"
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:3299
#, no-wrap
msgid "The effect of installation"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3306
msgid ""
"You can see the effect of installing @code{multiply-by-seven} by evaluating "
"the following sample.  Place the cursor after the following expression and "
"type @kbd{C-x C-e}.  The number 21 will appear in the echo area."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3315
msgid ""
"If you wish, you can read the documentation for the function by typing "
"@kbd{C-h f} (@code{describe-function}) and then the name of the function, "
"@code{multiply-by-seven}.  When you do this, a @file{*Help*} window will "
"appear on your screen that says:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:3320
#, no-wrap
msgid ""
"multiply-by-seven is a Lisp function.\n"
"(multiply-by-seven NUMBER)\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:3322
#, no-wrap
msgid "Multiply NUMBER by seven.\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3327
msgid "(To return to a single window on your screen, type @kbd{C-x 1}.)"
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:3329
#, no-wrap
msgid "Change a Function Definition"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3330
#, no-wrap
msgid "Changing a function definition"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3331
#, no-wrap
msgid "Function definition, how to change"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3332
#, no-wrap
msgid "Definition, how to change"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3338
msgid ""
"If you want to change the code in @code{multiply-by-seven}, just rewrite "
"it.  To install the new version in place of the old one, evaluate the "
"function definition again.  This is how you modify code in Emacs.  It is "
"very simple."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3346
msgid ""
"As an example, you can change the @code{multiply-by-seven} function to add "
"the number to itself seven times instead of multiplying the number by "
"seven.  It produces the same answer, but by a different path.  At the same "
"time, we will add a comment to the code; a comment is text that the Lisp "
"interpreter ignores, but that a human reader may find useful or "
"enlightening.  The comment is that this is the ``second version''."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:3352
#, no-wrap
msgid ""
"(defun multiply-by-seven (number)       ; @r{Second version.}\n"
"  \"Multiply NUMBER by seven.\"\n"
"  (+ number number number number number number number))\n"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3355
#, no-wrap
msgid "Comments in Lisp code"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3360
msgid ""
"The comment follows a semicolon, @samp{;}.  In Lisp, everything on a line "
"that follows a semicolon is a comment.  The end of the line is the end of "
"the comment.  To stretch a comment over two or more lines, begin each line "
"with a semicolon."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3364
msgid ""
"@xref{Beginning a .emacs File, , Beginning a @file{.emacs} File}, and "
"@ref{Comments, , Comments, elisp, The GNU Emacs Lisp Reference Manual}, for "
"more about comments."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3368
msgid ""
"You can install this version of the @code{multiply-by-seven} function by "
"evaluating it in the same way you evaluated the first function: place the "
"cursor after the last parenthesis and type @kbd{C-x C-e}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3372
msgid ""
"In summary, this is how you write code in Emacs Lisp: you write a function; "
"install it; test it; and then make fixes or enhancements and install it "
"again."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3375
#, no-wrap
msgid "Interactive functions"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:3376 emacs-lisp-intro.texi:4426
#, no-wrap
msgid "interactive"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3384
msgid ""
"You make a function interactive by placing a list that begins with the "
"special form @code{interactive} immediately after the documentation.  A user "
"can invoke an interactive function by typing @kbd{M-x} and then the name of "
"the function; or by typing the keys to which it is bound, for example, by "
"typing @kbd{C-n} for @code{next-line} or @kbd{C-x h} for "
"@code{mark-whole-buffer}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3391
msgid ""
"Interestingly, when you call an interactive function interactively, the "
"value returned is not automatically displayed in the echo area.  This is "
"because you often call an interactive function for its side effects, such as "
"moving forward by a word or line, and not for the value returned.  If the "
"returned value were displayed in the echo area each time you typed a key, it "
"would be very distracting."
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:3399
#, no-wrap
msgid "An Interactive @code{multiply-by-seven}, An Overview"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3405
msgid ""
"Both the use of the special form @code{interactive} and one way to display a "
"value in the echo area can be illustrated by creating an interactive version "
"of @code{multiply-by-seven}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3408
msgid "Here is the code:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:3415 emacs-lisp-intro.texi:3467
#, no-wrap
msgid ""
"(defun multiply-by-seven (number)       ; @r{Interactive version.}\n"
"  \"Multiply NUMBER by seven.\"\n"
"  (interactive \"p\")\n"
"  (message \"The result is %d\" (* 7 number)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3425
msgid ""
"You can install this code by placing your cursor after it and typing "
"@kbd{C-x C-e}.  The name of the function will appear in your echo area.  "
"Then, you can use this code by typing @kbd{C-u} and a number and then typing "
"@kbd{M-x multiply-by-seven} and pressing @key{RET}.  The phrase @samp{The "
"result is @dots{}} followed by the product will appear in the echo area."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3428
msgid ""
"Speaking more generally, you invoke a function like this in either of two "
"ways:"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:3434
msgid ""
"By typing a prefix argument that contains the number to be passed, and then "
"typing @kbd{M-x} and the name of the function, as with @kbd{C-u 3 M-x "
"forward-sentence}; or,"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:3438
msgid ""
"By typing whatever key or keychord the function is bound to, as with "
"@kbd{C-u 3 M-e}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3444
msgid ""
"Both the examples just mentioned work identically to move point forward "
"three sentences.  (Since @code{multiply-by-seven} is not bound to a key, it "
"could not be used as an example of key binding.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3447
msgid ""
"(@xref{Keybindings, , Some Keybindings}, to learn how to bind a command to a "
"key.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3452
msgid ""
"A prefix argument is passed to an interactive function by typing the "
"@key{META} key followed by a number, for example, @kbd{M-3 M-e}, or by "
"typing @kbd{C-u} and then a number, for example, @kbd{C-u 3 M-e} (if you "
"type @kbd{C-u} without a number, it defaults to 4)."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:3454
#, no-wrap
msgid "An Interactive @code{multiply-by-seven}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3460
msgid ""
"Let's look at the use of the special form @code{interactive} and then at the "
"function @code{message} in the interactive version of "
"@code{multiply-by-seven}.  You will recall that the function definition "
"looks like this:"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3473
msgid ""
"In this function, the expression, @code{(interactive \"p\")}, is a list of "
"two elements.  The @code{\"p\"} tells Emacs to pass the prefix argument to "
"the function and use its value for the argument of the function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3477
msgid ""
"The argument will be a number.  This means that the symbol @code{number} "
"will be bound to a number in the line:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:3480
#, no-wrap
msgid "(message \"The result is %d\" (* 7 number))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3486
msgid ""
"For example, if your prefix argument is 5, the Lisp interpreter will "
"evaluate the line as if it were:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:3489
#, no-wrap
msgid "(message \"The result is %d\" (* 7 5))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3497
msgid ""
"(If you are reading this in GNU Emacs, you can evaluate this expression "
"yourself.)  First, the interpreter will evaluate the inner list, which is "
"@code{(* 7 5)}.  This returns a value of 35.  Next, it will evaluate the "
"outer list, passing the values of the second and subsequent elements of the "
"list to the function @code{message}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3507
msgid ""
"As we have seen, @code{message} is an Emacs Lisp function especially "
"designed for sending a one line message to a user.  (@xref{message, , The "
"@code{message} function}.)  In summary, the @code{message} function prints "
"its first argument in the echo area as is, except for occurrences of "
"@samp{%d} or @samp{%s} (and various other %-sequences which we have not "
"mentioned).  When it sees a control sequence, the function looks to the "
"second or subsequent arguments and prints the value of the argument in the "
"location in the string where the control sequence is located."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3513
msgid ""
"In the interactive @code{multiply-by-seven} function, the control string is "
"@samp{%d}, which requires a number, and the value returned by evaluating "
"@code{(* 7 5)} is the number 35.  Consequently, the number 35 is printed in "
"place of the @samp{%d} and the message is @samp{The result is 35}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3521
msgid ""
"(Note that when you call the function @code{multiply-by-seven}, the message "
"is printed without quotes, but when you call @code{message}, the text is "
"printed in double quotes.  This is because the value returned by "
"@code{message} is what appears in the echo area when you evaluate an "
"expression whose first element is @code{message}; but when embedded in a "
"function, @code{message} prints the text as a side effect without quotes.)"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:3523
#, no-wrap
msgid "Different Options for @code{interactive}"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3524
#, no-wrap
msgid "Options for @code{interactive}"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3525
#, no-wrap
msgid "Interactive options"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3536
msgid ""
"In the example, @code{multiply-by-seven} used @code{\"p\"} as the argument "
"to @code{interactive}.  This argument told Emacs to interpret your typing "
"either @kbd{C-u} followed by a number or @key{META} followed by a number as "
"a command to pass that number to the function as its argument.  Emacs has "
"more than twenty characters predefined for use with @code{interactive}.  In "
"almost every case, one of these options will enable you to pass the right "
"information interactively to a function.  (@xref{Interactive Codes, , Code "
"Characters for @code{interactive}, elisp, The GNU Emacs Lisp Reference "
"Manual}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3540
msgid "Consider the function @code{zap-to-char}.  Its interactive expression is"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:3543 emacs-lisp-intro.texi:7732
#, no-wrap
msgid "(interactive \"p\\ncZap to char: \")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3555
msgid ""
"The first part of the argument to @code{interactive} is @samp{p}, with which "
"you are already familiar.  This argument tells Emacs to interpret a "
"`prefix', as a number to be passed to the function.  You can specify a "
"prefix either by typing @kbd{C-u} followed by a number or by typing "
"@key{META} followed by a number.  The prefix is the number of specified "
"characters.  Thus, if your prefix is three and the specified character is "
"@samp{x}, then you will delete all the text up to and including the third "
"next @samp{x}.  If you do not set a prefix, then you delete all the text up "
"to and including the specified character, but no more."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3557
msgid ""
"The @samp{c} tells the function the name of the character to which to "
"delete."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3567
msgid ""
"More formally, a function with two or more arguments can have information "
"passed to each argument by adding parts to the string that follows "
"@code{interactive}.  When you do this, the information is passed to each "
"argument in the same order it is specified in the @code{interactive} list.  "
"In the string, each part is separated from the next part by a @samp{\\n}, "
"which is a newline.  For example, you can follow @samp{p} with a @samp{\\n} "
"and an @samp{cZap to char:@: }.  This causes Emacs to pass the value of the "
"prefix argument (if there is one) and the character."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3571
msgid ""
"In this case, the function definition looks like the following, where "
"@code{arg} and @code{char} are the symbols to which @code{interactive} binds "
"the prefix argument and the specified character:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:3578
#, no-wrap
msgid ""
"(defun @var{name-of-function} (arg char)\n"
"  \"@var{documentation}@dots{}\"\n"
"  (interactive \"p\\ncZap to char: \")\n"
"  @var{body-of-function}@dots{})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3585
msgid ""
"(The space after the colon in the prompt makes it look better when you are "
"prompted.  @xref{copy-to-buffer, , The Definition of @code{copy-to-buffer}}, "
"for an example.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3590
msgid ""
"When a function does not take arguments, @code{interactive} does not require "
"any.  Such a function contains the simple expression @code{(interactive)}.  "
"The @code{mark-whole-buffer} function is like this."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3594
msgid ""
"Alternatively, if the special letter-codes are not right for your "
"application, you can pass your own arguments to @code{interactive} as a "
"list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3599
msgid ""
"@xref{append-to-buffer, , The Definition of @code{append-to-buffer}}, for an "
"example.  @xref{Using Interactive, , Using @code{Interactive}, elisp, The "
"GNU Emacs Lisp Reference Manual}, for a more complete explanation about this "
"technique."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:3601
#, no-wrap
msgid "Install Code Permanently"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3602
#, no-wrap
msgid "Install code permanently"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3603
#, no-wrap
msgid "Permanent code installation"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3604
#, no-wrap
msgid "Code installation"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3610
msgid ""
"When you install a function definition by evaluating it, it will stay "
"installed until you quit Emacs.  The next time you start a new session of "
"Emacs, the function will not be installed unless you evaluate the function "
"definition again."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3614
msgid ""
"At some point, you may want to have code installed automatically whenever "
"you start a new session of Emacs.  There are several ways of doing this:"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:3622
msgid ""
"If you have code that is just for yourself, you can put the code for the "
"function definition in your @file{.emacs} initialization file.  When you "
"start Emacs, your @file{.emacs} file is automatically evaluated and all the "
"function definitions within it are installed.  @xref{Emacs Initialization, , "
"Your @file{.emacs} File}."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:3629
msgid ""
"Alternatively, you can put the function definitions that you want installed "
"in one or more files of their own and use the @code{load} function to cause "
"Emacs to evaluate and thereby install each of the functions in the files.  "
"@xref{Loading Files, , Loading Files}."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:3636
msgid ""
"Thirdly, if you have code that your whole site will use, it is usual to put "
"it in a file called @file{site-init.el} that is loaded when Emacs is built.  "
"This makes the code available to everyone who uses your machine.  (See the "
"@file{INSTALL} file that is part of the Emacs distribution.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3647
msgid ""
"Finally, if you have code that everyone who uses Emacs may want, you can "
"post it on a computer network or send a copy to the Free Software "
"Foundation.  (When you do this, please license the code and its "
"documentation under a license that permits other people to run, copy, study, "
"modify, and redistribute the code and which protects you from having your "
"work taken from you.)  If you send a copy of your code to the Free Software "
"Foundation, and properly protect yourself and others, it may be included in "
"the next release of Emacs.  In large part, this is how Emacs has grown over "
"the past years, by donations."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3654
msgid ""
"The @code{let} expression is a special form in Lisp that you will need to "
"use in most function definitions."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3658
msgid ""
"@code{let} is used to attach or bind a symbol to a value in such a way that "
"the Lisp interpreter will not confuse the variable with a variable of the "
"same name that is not part of the function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3665
msgid ""
"To understand why the @code{let} special form is necessary, consider the "
"situation in which you own a home that you generally refer to as `the "
"house', as in the sentence, ``The house needs painting.'' If you are "
"visiting a friend and your host refers to `the house', he is likely to be "
"referring to @emph{his} house, not yours, that is, to a different house."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3672
msgid ""
"If your friend is referring to his house and you think he is referring to "
"your house, you may be in for some confusion.  The same thing could happen "
"in Lisp if a variable that is used inside of one function has the same name "
"as a variable that is used inside of another function, and the two are not "
"intended to refer to the same value.  The @code{let} special form prevents "
"this kind of confusion."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:3681
#, no-wrap
msgid "Prevent confusion"
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:3682
#, no-wrap
msgid "@code{let} Prevents Confusion"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3685
#, no-wrap
msgid "@samp{local variable} defined"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3686
#, no-wrap
msgid "@samp{variable, local}, defined"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3693
msgid ""
"The @code{let} special form prevents confusion.  @code{let} creates a name "
"for a @dfn{local variable} that overshadows any use of the same name outside "
"the @code{let} expression.  This is like understanding that whenever your "
"host refers to `the house', he means his house, not yours.  (Symbols used in "
"argument lists work the same way.  @xref{defun, , The @code{defun} Special "
"Form}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3698
msgid ""
"Local variables created by a @code{let} expression retain their value "
"@emph{only} within the @code{let} expression itself (and within expressions "
"called within the @code{let} expression); the local variables have no effect "
"outside the @code{let} expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3706
msgid ""
"Another way to think about @code{let} is that it is like a @code{setq} that "
"is temporary and local.  The values set by @code{let} are automatically "
"undone when the @code{let} is finished.  The setting only affects "
"expressions that are inside the bounds of the @code{let} expression.  In "
"computer science jargon, we would say ``the binding of a symbol is visible "
"only in functions called in the @code{let} form; in Emacs Lisp, scoping is "
"dynamic, not lexical.''"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3718
msgid ""
"@code{let} can create more than one variable at once.  Also, @code{let} "
"gives each variable it creates an initial value, either a value specified by "
"you, or @code{nil}.  (In the jargon, this is called `binding the variable to "
"the value'.)  After @code{let} has created and bound the variables, it "
"executes the code in the body of the @code{let}, and returns the value of "
"the last expression in the body, as the value of the whole @code{let} "
"expression.  (`Execute' is a jargon term that means to evaluate a list; it "
"comes from the use of the word meaning `to give practical effect to' "
"(@cite{Oxford English Dictionary}).  Since you evaluate an expression to "
"perform an action, `execute' has evolved as a synonym to `evaluate'.)"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:3719
#, no-wrap
msgid "Parts of let Expression"
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:3720
#, no-wrap
msgid "The Parts of a @code{let} Expression"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3721
#, no-wrap
msgid "@code{let} expression, parts of"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3722
#, no-wrap
msgid "Parts of @code{let} expression"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3724
#, no-wrap
msgid "@samp{varlist} defined"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3731
msgid ""
"A @code{let} expression is a list of three parts.  The first part is the "
"symbol @code{let}.  The second part is a list, called a @dfn{varlist}, each "
"element of which is either a symbol by itself or a two-element list, the "
"first element of which is a symbol.  The third part of the @code{let} "
"expression is the body of the @code{let}.  The body usually consists of one "
"or more lists."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3734
msgid "A template for a @code{let} expression looks like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:3737
#, no-wrap
msgid "(let @var{varlist} @var{body}@dots{})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3745
msgid ""
"The symbols in the varlist are the variables that are given initial values "
"by the @code{let} special form.  Symbols by themselves are given the initial "
"value of @code{nil}; and each symbol that is the first element of a "
"two-element list is bound to the value that is returned when the Lisp "
"interpreter evaluates the second element."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3750
msgid ""
"Thus, a varlist might look like this: @code{(thread (needles 3))}.  In this "
"case, in a @code{let} expression, Emacs binds the symbol @code{thread} to an "
"initial value of @code{nil}, and binds the symbol @code{needles} to an "
"initial value of 3."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3754
msgid ""
"When you write a @code{let} expression, what you do is put the appropriate "
"expressions in the slots of the @code{let} expression template."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3757
msgid ""
"If the varlist is composed of two-element lists, as is often the case, the "
"template for the @code{let} expression looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:3764
#, no-wrap
msgid ""
"(let ((@var{variable} @var{value})\n"
"      (@var{variable} @var{value})\n"
"      @dots{})\n"
"  @var{body}@dots{})\n"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:3767
#, no-wrap
msgid "Sample let Expression"
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:3768
#, no-wrap
msgid "Sample @code{let} Expression"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3769
#, no-wrap
msgid "Sample @code{let} expression"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3770
#, no-wrap
msgid "@code{let} expression sample"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3775
msgid ""
"The following expression creates and gives initial values to the two "
"variables @code{zebra} and @code{tiger}.  The body of the @code{let} "
"expression is a list which calls the @code{message} function."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:3782
#, no-wrap
msgid ""
"(let ((zebra 'stripes)\n"
"      (tiger 'fierce))\n"
"  (message \"One kind of animal has %s and another is %s.\"\n"
"           zebra tiger))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3786
msgid "Here, the varlist is @code{((zebra 'stripes) (tiger 'fierce))}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3801
msgid ""
"The two variables are @code{zebra} and @code{tiger}.  Each variable is the "
"first element of a two-element list and each value is the second element of "
"its two-element list.  In the varlist, Emacs binds the variable @code{zebra} "
"to the value @code{stripes}@footnote{According to Jared Diamond in "
"@cite{Guns, Germs, and Steel}, ``@dots{} zebras become impossibly dangerous "
"as they grow older'' but the claim here is that they do not become fierce "
"like a tiger.  (1997, W. W. Norton and Co., ISBN 0-393-03894-2, page 171)}, "
"and binds the variable @code{tiger} to the value @code{fierce}.  In this "
"example, both values are symbols preceded by a quote.  The values could just "
"as well have been another list or a string.  The body of the @code{let} "
"follows after the list holding the variables.  In this example, the body is "
"a list that uses the @code{message} function to print a string in the echo "
"area."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3806
msgid ""
"You may evaluate the example in the usual fashion, by placing the cursor "
"after the last parenthesis and typing @kbd{C-x C-e}.  When you do this, the "
"following will appear in the echo area:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:3809
#, no-wrap
msgid "\"One kind of animal has stripes and another is fierce.\"\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3816
msgid ""
"As we have seen before, the @code{message} function prints its first "
"argument, except for @samp{%s}.  In this example, the value of the variable "
"@code{zebra} is printed at the location of the first @samp{%s} and the value "
"of the variable @code{tiger} is printed at the location of the second "
"@samp{%s}."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:3818
#, no-wrap
msgid "Uninitialized Variables in a @code{let} Statement"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3819
#, no-wrap
msgid "Uninitialized @code{let} variables"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3820
#, no-wrap
msgid "@code{let} variables uninitialized"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3825
msgid ""
"If you do not bind the variables in a @code{let} statement to specific "
"initial values, they will automatically be bound to an initial value of "
"@code{nil}, as in the following expression:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:3835
#, no-wrap
msgid ""
"(let ((birch 3)\n"
"      pine\n"
"      fir\n"
"      (oak 'some))\n"
"  (message\n"
"   \"Here are %d variables with %s, %s, and %s value.\"\n"
"   birch pine fir oak))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3840
msgid "Here, the varlist is @code{((birch 3) pine fir (oak 'some))}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3844
msgid ""
"If you evaluate this expression in the usual way, the following will appear "
"in your echo area:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:3847
#, no-wrap
msgid "\"Here are 3 variables with nil, nil, and some value.\"\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3853
msgid ""
"In this example, Emacs binds the symbol @code{birch} to the number 3, binds "
"the symbols @code{pine} and @code{fir} to @code{nil}, and binds the symbol "
"@code{oak} to the value @code{some}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3864
msgid ""
"Note that in the first part of the @code{let}, the variables @code{pine} and "
"@code{fir} stand alone as atoms that are not surrounded by parentheses; this "
"is because they are being bound to @code{nil}, the empty list.  But "
"@code{oak} is bound to @code{some} and so is a part of the list @code{(oak "
"'some)}.  Similarly, @code{birch} is bound to the number 3 and so is in a "
"list with that number.  (Since a number evaluates to itself, the number does "
"not need to be quoted.  Also, the number is printed in the message using a "
"@samp{%d} rather than a @samp{%s}.)  The four variables as a group are put "
"into a list to delimit them from the body of the @code{let}."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3868
#, no-wrap
msgid "Conditional with @code{if}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3876
msgid ""
"A third special form, in addition to @code{defun} and @code{let}, is the "
"conditional @code{if}.  This form is used to instruct the computer to make "
"decisions.  You can write function definitions without using @code{if}, but "
"it is used often enough, and is important enough, to be included here.  It "
"is used, for example, in the code for the function "
"@code{beginning-of-buffer}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3881
msgid ""
"The basic idea behind an @code{if}, is that ``@emph{if} a test is true, "
"@emph{then} an expression is evaluated.'' If the test is not true, the "
"expression is not evaluated.  For example, you might make a decision such "
"as, ``if it is warm and sunny, then go to the beach!''"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:3888
#, no-wrap
msgid "if in more detail"
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:3889
#, no-wrap
msgid "@code{if} in more detail"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3892
#, no-wrap
msgid "@samp{if-part} defined"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:3893
#, no-wrap
msgid "@samp{then-part} defined"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3899
msgid ""
"An @code{if} expression written in Lisp does not use the word `then'; the "
"test and the action are the second and third elements of the list whose "
"first element is @code{if}.  Nonetheless, the test part of an @code{if} "
"expression is often called the @dfn{if-part} and the second argument is "
"often called the @dfn{then-part}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3905
msgid ""
"Also, when an @code{if} expression is written, the true-or-false-test is "
"usually written on the same line as the symbol @code{if}, but the action to "
"carry out if the test is true, the ``then-part'', is written on the second "
"and subsequent lines.  This makes the @code{if} expression easier to read."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:3910
#, no-wrap
msgid ""
"(if @var{true-or-false-test}\n"
"    @var{action-to-carry-out-if-test-is-true})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3916
msgid ""
"The true-or-false-test will be an expression that is evaluated by the Lisp "
"interpreter."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3920
msgid ""
"Here is an example that you can evaluate in the usual manner.  The test is "
"whether the number 5 is greater than the number 4.  Since it is, the message "
"@samp{5 is greater than 4!} will be printed."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:3925
#, no-wrap
msgid ""
"(if (> 5 4)                             ; @r{if-part}\n"
"    (message \"5 is greater than 4!\"))   ; @r{then-part}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3931
msgid ""
"(The function @code{>} tests whether its first argument is greater than its "
"second argument and returns true if it is.)"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:3931
#, no-wrap
msgid "> (greater than)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3938
msgid ""
"Of course, in actual use, the test in an @code{if} expression will not be "
"fixed for all time as it is by the expression @code{(> 5 4)}.  Instead, at "
"least one of the variables used in the test will be bound to a value that is "
"not known ahead of time.  (If the value were known ahead of time, we would "
"not need to run the test!)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3944
msgid ""
"For example, the value may be bound to an argument of a function "
"definition.  In the following function definition, the character of the "
"animal is a value that is passed to the function.  If the value bound to "
"@code{characteristic} is @code{fierce}, then the message, @samp{It's a "
"tiger!} will be printed; otherwise, @code{nil} will be returned."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:3953
#, no-wrap
msgid ""
"(defun type-of-animal (characteristic)\n"
"  \"Print message in echo area depending on CHARACTERISTIC.\n"
"If the CHARACTERISTIC is the symbol `fierce',\n"
"then warn of a tiger.\"\n"
"  (if (equal characteristic 'fierce)\n"
"      (message \"It's a tiger!\")))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3961
msgid ""
"If you are reading this inside of GNU Emacs, you can evaluate the function "
"definition in the usual way to install it in Emacs, and then you can "
"evaluate the following two expressions to see the results:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:3965 emacs-lisp-intro.texi:4134
#, no-wrap
msgid ""
"(type-of-animal 'fierce)\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:3967 emacs-lisp-intro.texi:4136
#, no-wrap
msgid ""
"(type-of-animal 'zebra)\n"
"\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3977
msgid ""
"When you evaluate @code{(type-of-animal 'fierce)}, you will see the "
"following message printed in the echo area: @code{\"It's a tiger!\"}; and "
"when you evaluate @code{(type-of-animal 'zebra)} you will see @code{nil} "
"printed in the echo area."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:3979
#, no-wrap
msgid "The @code{type-of-animal} Function in Detail"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3982
msgid "Let's look at the @code{type-of-animal} function in detail."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3986
msgid ""
"The function definition for @code{type-of-animal} was written by filling the "
"slots of two templates, one for a function definition as a whole, and a "
"second for an @code{if} expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:3989
msgid "The template for every function that is not interactive is:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:3995
#, no-wrap
msgid ""
"(defun @var{name-of-function} (@var{argument-list})\n"
"  \"@var{documentation}@dots{}\"\n"
"  @var{body}@dots{})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4000
msgid "The parts of the function that match this template look like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:4008
#, no-wrap
msgid ""
"(defun type-of-animal (characteristic)\n"
"  \"Print message in echo area depending on CHARACTERISTIC.\n"
"If the CHARACTERISTIC is the symbol `fierce',\n"
"then warn of a tiger.\"\n"
"  @var{body: the} @code{if} @var{expression})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4017
msgid ""
"The name of function is @code{type-of-animal}; it is passed the value of one "
"argument.  The argument list is followed by a multi-line documentation "
"string.  The documentation string is included in the example because it is a "
"good habit to write documentation string for every function definition.  The "
"body of the function definition consists of the @code{if} expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4020
msgid "The template for an @code{if} expression looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:4025
#, no-wrap
msgid ""
"(if @var{true-or-false-test}\n"
"    @var{action-to-carry-out-if-the-test-returns-true})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4031
msgid ""
"In the @code{type-of-animal} function, the code for the @code{if} looks like "
"this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:4036
#, no-wrap
msgid ""
"(if (equal characteristic 'fierce)\n"
"    (message \"It's a tiger!\")))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4041
msgid "Here, the true-or-false-test is the expression:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:4044
#, no-wrap
msgid "(equal characteristic 'fierce)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4052
msgid ""
"In Lisp, @code{equal} is a function that determines whether its first "
"argument is equal to its second argument.  The second argument is the quoted "
"symbol @code{'fierce} and the first argument is the value of the symbol "
"@code{characteristic}---in other words, the argument passed to this "
"function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4059
msgid ""
"In the first exercise of @code{type-of-animal}, the argument @code{fierce} "
"is passed to @code{type-of-animal}.  Since @code{fierce} is equal to "
"@code{fierce}, the expression, @code{(equal characteristic 'fierce)}, "
"returns a value of true.  When this happens, the @code{if} evaluates the "
"second argument or then-part of the @code{if}: @code{(message \"It's "
"tiger!\")}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4064
msgid ""
"On the other hand, in the second exercise of @code{type-of-animal}, the "
"argument @code{zebra} is passed to @code{type-of-animal}.  @code{zebra} is "
"not equal to @code{fierce}, so the then-part is not evaluated and @code{nil} "
"is returned by the @code{if} expression."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:4066
#, no-wrap
msgid "If--then--else Expressions"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:4067
#, no-wrap
msgid "Else"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4076
msgid ""
"An @code{if} expression may have an optional third argument, called the "
"@dfn{else-part}, for the case when the true-or-false-test returns false.  "
"When this happens, the second argument or then-part of the overall @code{if} "
"expression is @emph{not} evaluated, but the third or else-part @emph{is} "
"evaluated.  You might think of this as the cloudy day alternative for the "
"decision ``if it is warm and sunny, then go to the beach, else read a "
"book!''."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4081
msgid ""
"The word ``else'' is not written in the Lisp code; the else-part of an "
"@code{if} expression comes after the then-part.  In the written Lisp, the "
"else-part is usually written to start on a line of its own and is indented "
"less than the then-part:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:4087
#, no-wrap
msgid ""
"(if @var{true-or-false-test}\n"
"    @var{action-to-carry-out-if-the-test-returns-true}\n"
"  @var{action-to-carry-out-if-the-test-returns-false})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4092
msgid ""
"For example, the following @code{if} expression prints the message @samp{4 "
"is not greater than 5!} when you evaluate it in the usual way:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:4098
#, no-wrap
msgid ""
"(if (> 4 5)                               ; @r{if-part}\n"
"    (message \"4 falsely greater than 5!\") ; @r{then-part}\n"
"  (message \"4 is not greater than 5!\"))   ; @r{else-part}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4106
msgid ""
"Note that the different levels of indentation make it easy to distinguish "
"the then-part from the else-part.  (GNU Emacs has several commands that "
"automatically indent @code{if} expressions correctly.  @xref{Typing Lists, , "
"GNU Emacs Helps You Type Lists}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4110
msgid ""
"We can extend the @code{type-of-animal} function to include an else-part by "
"simply incorporating an additional part to the @code{if} expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4116
msgid ""
"You can see the consequences of doing this if you evaluate the following "
"version of the @code{type-of-animal} function definition to install it and "
"then evaluate the two subsequent expressions to pass different arguments to "
"the function."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:4127
#, no-wrap
msgid ""
"(defun type-of-animal (characteristic)  ; @r{Second version.}\n"
"  \"Print message in echo area depending on CHARACTERISTIC.\n"
"If the CHARACTERISTIC is the symbol `fierce',\n"
"then warn of a tiger;\n"
"else say it's not fierce.\"\n"
"  (if (equal characteristic 'fierce)\n"
"      (message \"It's a tiger!\")\n"
"    (message \"It's not fierce!\")))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4146
msgid ""
"When you evaluate @code{(type-of-animal 'fierce)}, you will see the "
"following message printed in the echo area: @code{\"It's a tiger!\"}; but "
"when you evaluate @code{(type-of-animal 'zebra)}, you will see @code{\"It's "
"not fierce!\"}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4152
msgid ""
"(Of course, if the @var{characteristic} were @code{ferocious}, the message "
"@code{\"It's not fierce!\"} would be printed; and it would be misleading! "
"When you write code, you need to take into account the possibility that some "
"such argument will be tested by the @code{if} and write your program "
"accordingly.)"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:4155
#, no-wrap
msgid "Truth and falsehood in Emacs Lisp"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:4156
#, no-wrap
msgid "Falsehood and truth in Emacs Lisp"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:4157
#, no-wrap
msgid "nil"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4164
msgid ""
"There is an important aspect to the truth test in an @code{if} expression.  "
"So far, we have spoken of `true' and `false' as values of predicates as if "
"they were new kinds of Emacs Lisp objects.  In fact, `false' is just our old "
"friend @code{nil}.  Anything else---anything at all---is `true'."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4171
msgid ""
"The expression that tests for truth is interpreted as @dfn{true} if the "
"result of evaluating it is a value that is not @code{nil}.  In other words, "
"the result of the test is considered true if the value returned is a number "
"such as 47, a string such as @code{\"hello\"}, or a symbol (other than "
"@code{nil}) such as @code{flowers}, or a list (so long as it is not empty), "
"or even a buffer!"
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:4178
#, no-wrap
msgid "An explanation of @code{nil}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4182
msgid "Before illustrating a test for truth, we need an explanation of @code{nil}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4189
msgid ""
"In Emacs Lisp, the symbol @code{nil} has two meanings.  First, it means the "
"empty list.  Second, it means false and is the value returned when a "
"true-or-false-test tests false.  @code{nil} can be written as an empty list, "
"@code{()}, or as @code{nil}.  As far as the Lisp interpreter is concerned, "
"@code{()} and @code{nil} are the same.  Humans, however, tend to use "
"@code{nil} for false and @code{()} for the empty list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4198
msgid ""
"In Emacs Lisp, any value that is not @code{nil}---is not the empty list---is "
"considered true.  This means that if an evaluation returns something that is "
"not an empty list, an @code{if} expression will test true.  For example, if "
"a number is put in the slot for the test, it will be evaluated and will "
"return itself, since that is what numbers do when evaluated.  In this "
"conditional, the @code{if} expression will test true.  The expression tests "
"false only when @code{nil}, an empty list, is returned by evaluating the "
"expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4200
msgid ""
"You can see this by evaluating the two expressions in the following "
"examples."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4207
msgid ""
"In the first example, the number 4 is evaluated as the test in the @code{if} "
"expression and returns itself; consequently, the then-part of the expression "
"is evaluated and returned: @samp{true} appears in the echo area.  In the "
"second example, the @code{nil} indicates false; consequently, the else-part "
"of the expression is evaluated and returned: @samp{false} appears in the "
"echo area."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:4213
#, no-wrap
msgid ""
"(if 4\n"
"    'true\n"
"  'false)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:4219
#, no-wrap
msgid ""
"(if nil\n"
"    'true\n"
"  'false)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4227
msgid ""
"Incidentally, if some other useful value is not available for a test that "
"returns true, then the Lisp interpreter will return the symbol @code{t} for "
"true.  For example, the expression @code{(> 5 4)} returns @code{t} when "
"evaluated, as you can see by evaluating it in the usual way:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:4230
#, no-wrap
msgid "(> 5 4)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4235
msgid "On the other hand, this function returns @code{nil} if the test is false."
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:4238
#, no-wrap
msgid "(> 4 5)\n"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:4243
#, no-wrap
msgid "Region, what it is"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:4244
#, no-wrap
msgid "Preserving point, mark, and buffer"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:4245
#, no-wrap
msgid "Point, mark, buffer preservation"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:4246 emacs-lisp-intro.texi:4610
#, no-wrap
msgid "point"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:4247
#, no-wrap
msgid "mark"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4251
msgid ""
"The @code{save-excursion} function is the fourth and final special form that "
"we will discuss in this chapter."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4258
msgid ""
"In Emacs Lisp programs used for editing, the @code{save-excursion} function "
"is very common.  It saves the location of point and mark, executes the body "
"of the function, and then restores point and mark to their previous "
"positions if their locations were changed.  Its primary purpose is to keep "
"the user from being surprised and disturbed by unexpected movement of point "
"or mark."
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:4266
#, no-wrap
msgid "Point and Mark"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4278
msgid ""
"Before discussing @code{save-excursion}, however, it may be useful first to "
"review what point and mark are in GNU Emacs.  @dfn{Point} is the current "
"location of the cursor.  Wherever the cursor is, that is point.  More "
"precisely, on terminals where the cursor appears to be on top of a "
"character, point is immediately before the character.  In Emacs Lisp, point "
"is an integer.  The first character in a buffer is number one, the second is "
"number two, and so on.  The function @code{point} returns the current "
"position of the cursor as a number.  Each buffer has its own value for "
"point."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4288
msgid ""
"The @dfn{mark} is another position in the buffer; its value can be set with "
"a command such as @kbd{C-@key{SPC}} (@code{set-mark-command}).  If a mark "
"has been set, you can use the command @kbd{C-x C-x} "
"(@code{exchange-point-and-mark}) to cause the cursor to jump to the mark and "
"set the mark to be the previous position of point.  In addition, if you set "
"another mark, the position of the previous mark is saved in the mark ring.  "
"Many mark positions can be saved this way.  You can jump the cursor to a "
"saved mark by typing @kbd{C-u C-@key{SPC}} one or more times."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4293
msgid ""
"The part of the buffer between point and mark is called @dfn{the region}.  "
"Numerous commands work on the region, including @code{center-region}, "
"@code{count-lines-region}, @code{kill-region}, and @code{print-region}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4301
msgid ""
"The @code{save-excursion} special form saves the locations of point and mark "
"and restores those positions after the code within the body of the special "
"form is evaluated by the Lisp interpreter.  Thus, if point were in the "
"beginning of a piece of text and some code moved point to the end of the "
"buffer, the @code{save-excursion} would put point back to where it was "
"before, after the expressions in the body of the function were evaluated."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4309
msgid ""
"In Emacs, a function frequently moves point as part of its internal workings "
"even though a user would not expect this.  For example, "
"@code{count-lines-region} moves point.  To prevent the user from being "
"bothered by jumps that are both unexpected and (from the user's point of "
"view) unnecessary, @code{save-excursion} is often used to keep point and "
"mark in the location expected by the user.  The use of @code{save-excursion} "
"is good housekeeping."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4314
msgid ""
"To make sure the house stays clean, @code{save-excursion} restores the "
"values of point and mark even if something goes wrong in the code inside of "
"it (or, to be more precise and to use the proper jargon, ``in case of "
"abnormal exit'').  This feature is very helpful."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4321
msgid ""
"In addition to recording the values of point and mark, @code{save-excursion} "
"keeps track of the current buffer, and restores it, too.  This means you can "
"write code that will change the buffer and have @code{save-excursion} switch "
"you back to the original buffer.  This is how @code{save-excursion} is used "
"in @code{append-to-buffer}.  (@xref{append-to-buffer, , The Definition of "
"@code{append-to-buffer}}.)"
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:4323
#, no-wrap
msgid "Template for a @code{save-excursion} Expression"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4327
msgid "The template for code using @code{save-excursion} is simple:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:4332
#, no-wrap
msgid ""
"(save-excursion\n"
"  @var{body}@dots{})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4343
msgid ""
"The body of the function is one or more expressions that will be evaluated "
"in sequence by the Lisp interpreter.  If there is more than one expression "
"in the body, the value of the last one will be returned as the value of the "
"@code{save-excursion} function.  The other expressions in the body are "
"evaluated only for their side effects; and @code{save-excursion} itself is "
"used only for its side effect (which is restoring the positions of point and "
"mark)."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4347
msgid ""
"In more detail, the template for a @code{save-excursion} expression looks "
"like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:4356
#, no-wrap
msgid ""
"(save-excursion\n"
"  @var{first-expression-in-body}\n"
"  @var{second-expression-in-body}\n"
"  @var{third-expression-in-body}\n"
"   @dots{}\n"
"  @var{last-expression-in-body})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4361
msgid "An expression, of course, may be a symbol on its own or a list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4364
msgid ""
"In Emacs Lisp code, a @code{save-excursion} expression often occurs within "
"the body of a @code{let} expression.  It looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:4370
#, no-wrap
msgid ""
"(let @var{varlist}\n"
"  (save-excursion\n"
"    @var{body}@dots{}))\n"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:4373 emacs-lisp-intro.texi:4374 emacs-lisp-intro.texi:5467 emacs-lisp-intro.texi:6505 emacs-lisp-intro.texi:9396 emacs-lisp-intro.texi:13576
#, no-wrap
msgid "Review"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4379
msgid ""
"In the last few chapters we have introduced a fair number of functions and "
"special forms.  Here they are described in brief, along with a few similar "
"functions that have not been mentioned yet."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:4381
#, no-wrap
msgid "eval-last-sexp"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4386
msgid ""
"Evaluate the last symbolic expression before the current location of point.  "
"The value is printed in the echo area unless the function is invoked with an "
"argument; in that case, the output is printed in the current buffer.  This "
"command is normally bound to @kbd{C-x C-e}."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4392
msgid ""
"Define function.  This special form has up to five parts: the name, a "
"template for the arguments that will be passed to the function, "
"documentation, an optional interactive declaration, and the body of the "
"definition."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4397
msgid ""
"For example, in an early version of Emacs, the function definition was as "
"follows.  (It is slightly more complex now that it seeks the first "
"non-whitespace character rather than the first visible character.)"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:4405
#, no-wrap
msgid ""
"(defun back-to-indentation ()\n"
"  \"Move point to first visible character on line.\"\n"
"  (interactive)\n"
"  (beginning-of-line 1)\n"
"  (skip-chars-forward \" \\t\"))\n"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4433
msgid ""
"Declare to the interpreter that the function can be used interactively.  "
"This special form may be followed by a string with one or more parts that "
"pass the information to the arguments of the function, in sequence.  These "
"parts may also tell the interpreter to prompt for information.  Parts of the "
"string are separated by newlines, @samp{\\n}."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4436
msgid "Common code characters are:"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:4438
#, no-wrap
msgid "b"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4440
msgid "The name of an existing buffer."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:4441
#, no-wrap
msgid "f"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4443
msgid "The name of an existing file."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:4444
#, no-wrap
msgid "p"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4446
msgid "The numeric prefix argument.  (Note that this `p' is lower case.)"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:4447
#, no-wrap
msgid "r"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4451
msgid ""
"Point and the mark, as two numeric arguments, smallest first.  This is the "
"only code letter that specifies two successive arguments rather than one."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4456
msgid ""
"@xref{Interactive Codes, , Code Characters for @samp{interactive}, elisp, "
"The GNU Emacs Lisp Reference Manual}, for a complete list of code "
"characters."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4465
msgid ""
"Declare that a list of variables is for use within the body of the "
"@code{let} and give them an initial value, either @code{nil} or a specified "
"value; then evaluate the rest of the expressions in the body of the "
"@code{let} and return the value of the last one.  Inside the body of the "
"@code{let}, the Lisp interpreter does not see the values of the variables of "
"the same names that are bound outside of the @code{let}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4468 emacs-lisp-intro.texi:4486 emacs-lisp-intro.texi:4506 emacs-lisp-intro.texi:6662 emacs-lisp-intro.texi:15981 emacs-lisp-intro.texi:16373 emacs-lisp-intro.texi:21121
msgid "For example,"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:4476
#, no-wrap
msgid ""
"(let ((foo (buffer-name))\n"
"      (bar (buffer-size)))\n"
"  (message\n"
"   \"This buffer is %s and has %d characters.\"\n"
"   foo bar))\n"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4483
msgid ""
"Record the values of point and mark and the current buffer before evaluating "
"the body of this special form.  Restore the values of point and mark and "
"buffer afterward."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:4493
#, no-wrap
msgid ""
"(message \"We are %d characters into this buffer.\"\n"
"         (- (point)\n"
"            (save-excursion\n"
"              (goto-char (point-min)) (point))))\n"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4499
msgid ""
"Evaluate the first argument to the function; if it is true, evaluate the "
"second argument; else evaluate the third argument, if there is one."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4503
msgid ""
"The @code{if} special form is called a @dfn{conditional}.  There are other "
"conditionals in Emacs Lisp, but @code{if} is perhaps the most commonly used."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:4512
#, no-wrap
msgid ""
"(if (= 22 emacs-major-version)\n"
"    (message \"This is version 22 Emacs\")\n"
"  (message \"This is not version 22 Emacs\"))\n"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:4516
#, no-wrap
msgid "<"
msgstr ""

#. type: itemx
#: emacs-lisp-intro.texi:4517
#, no-wrap
msgid ">"
msgstr ""

#. type: itemx
#: emacs-lisp-intro.texi:4518
#, no-wrap
msgid "<="
msgstr ""

#. type: itemx
#: emacs-lisp-intro.texi:4519
#, no-wrap
msgid ">="
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4527
msgid ""
"The @code{<} function tests whether its first argument is smaller than its "
"second argument.  A corresponding function, @code{>}, tests whether the "
"first argument is greater than the second.  Likewise, @code{<=} tests "
"whether the first argument is less than or equal to the second and @code{>=} "
"tests whether the first argument is greater than or equal to the second.  In "
"all cases, both arguments must be numbers or markers (markers indicate "
"positions in buffers)."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:4529
#, no-wrap
msgid "="
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4532
msgid ""
"The @code{=} function tests whether two arguments, both numbers or markers, "
"are equal."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:4534 emacs-lisp-intro.texi:4541
#, no-wrap
msgid "equal"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:4535 emacs-lisp-intro.texi:4542
#, no-wrap
msgid "eq"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4541
msgid ""
"Test whether two objects are the same.  @code{equal} uses one meaning of the "
"word `same' and @code{eq} uses another: @code{equal} returns true if the two "
"objects have a similar structure and contents, such as two copies of the "
"same book.  On the other hand, @code{eq}, returns true if both arguments are "
"actually the same object."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:4545
#, no-wrap
msgid "string<"
msgstr ""

#. type: itemx
#: emacs-lisp-intro.texi:4546
#, no-wrap
msgid "string-lessp"
msgstr ""

#. type: itemx
#: emacs-lisp-intro.texi:4547
#, no-wrap
msgid "string="
msgstr ""

#. type: itemx
#: emacs-lisp-intro.texi:4548
#, no-wrap
msgid "string-equal"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4552
msgid ""
"The @code{string-lessp} function tests whether its first argument is smaller "
"than the second argument.  A shorter, alternative name for the same function "
"(a @code{defalias}) is @code{string<}."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4556
msgid ""
"The arguments to @code{string-lessp} must be strings or symbols; the "
"ordering is lexicographic, so case is significant.  The print names of "
"symbols are used instead of the symbols themselves."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:4557
#, no-wrap
msgid "@samp{empty string} defined"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4560
msgid ""
"An empty string, @samp{\"\"}, a string with no characters in it, is smaller "
"than any string of characters."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4564
msgid ""
"@code{string-equal} provides the corresponding test for equality.  Its "
"shorter, alternative name is @code{string=}.  There are no string test "
"functions that correspond to @var{>}, @code{>=}, or @code{<=}."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4573
msgid ""
"Print a message in the echo area. The first argument is a string that can "
"contain @samp{%s}, @samp{%d}, or @samp{%c} to print the value of arguments "
"that follow the string.  The argument used by @samp{%s} must be a string or "
"a symbol; the argument used by @samp{%d} must be a number.  The argument "
"used by @samp{%c} must be an @sc{ascii} code number; it will be printed as "
"the character with that @sc{ascii} code.  (Various other %-sequences have "
"not been mentioned.)"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4582
msgid ""
"The @code{setq} function sets the value of its first argument to the value "
"of the second argument.  The first argument is automatically quoted by "
"@code{setq}.  It does the same for succeeding pairs of arguments.  Another "
"function, @code{set}, takes only two arguments and evaluates both of them "
"before setting the value returned by its first argument to the value "
"returned by its second argument."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4585
msgid "Without an argument, return the name of the buffer, as a string."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4589
msgid "Without an argument, return the name of the file the buffer is visiting."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4593
msgid ""
"Return the buffer in which Emacs is active; it may not be the buffer that is "
"visible on the screen."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4598
msgid ""
"Return the most recently selected buffer (other than the buffer passed to "
"@code{other-buffer} as an argument and other than the current buffer)."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4602
msgid ""
"Select a buffer for Emacs to be active in and display it in the current "
"window so users can look at it.  Usually bound to @kbd{C-x b}."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4606
msgid ""
"Switch Emacs's attention to a buffer on which programs will run.  Don't "
"alter what the window is showing."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:4607
#, no-wrap
msgid "buffer-size"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4609
msgid "Return the number of characters in the current buffer."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4614
msgid ""
"Return the value of the current position of the cursor, as an integer "
"counting the number of characters from the beginning of the buffer."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:4615
#, no-wrap
msgid "point-min"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4618
msgid ""
"Return the minimum permissible value of point in the current buffer.  This "
"is 1, unless narrowing is in effect."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:4619
#, no-wrap
msgid "point-max"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:4623
msgid ""
"Return the value of the maximum permissible value of point in the current "
"buffer.  This is the end of the buffer, unless narrowing is in effect."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:4633
msgid ""
"Write a non-interactive function that doubles the value of its argument, a "
"number.  Make that function interactive."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:4638
msgid ""
"Write a function that tests whether the current value of @code{fill-column} "
"is greater than the argument passed to the function, and if so, prints an "
"appropriate message."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4650
msgid ""
"In this chapter we study in detail several of the functions used in GNU "
"Emacs.  This is called a ``walk-through''.  These functions are used as "
"examples of Lisp code, but are not imaginary examples; with the exception of "
"the first, simplified function definition, these functions show the actual "
"code used in GNU Emacs.  You can learn a great deal from these definitions.  "
"The functions described here are all related to buffers.  Later, we will "
"study other functions."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:4663
#, no-wrap
msgid "Finding More Information"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:4665
#, no-wrap
msgid "describe-function, @r{introduced}"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:4666
#, no-wrap
msgid "Find function documentation"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4674
msgid ""
"In this walk-through, I will describe each new function as we come to it, "
"sometimes in detail and sometimes briefly.  If you are interested, you can "
"get the full documentation of any Emacs Lisp function at any time by typing "
"@kbd{C-h f} and then the name of the function (and then @key{RET}).  "
"Similarly, you can get the full documentation for a variable by typing "
"@kbd{C-h v} and then the name of the variable (and then @key{RET})."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:4675
#, no-wrap
msgid "Find source of function"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4679
msgid ""
"Also, @code{describe-function} will tell you the location of the function "
"definition."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4684
msgid ""
"Put point into the name of the file that contains the function and press the "
"@key{RET} key.  In this case, @key{RET} means @code{push-button} rather than "
"`return' or `enter'.  Emacs will take you directly to the function "
"definition."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4703
msgid ""
"More generally, if you want to see a function in its original source file, "
"you can use the @code{find-tag} function to jump to it.  @code{find-tag} "
"works with a wide variety of languages, not just Lisp, and C, and it works "
"with non-programming text as well.  For example, @code{find-tag} will jump "
"to the various nodes in the Texinfo source file of this document.  The "
"@code{find-tag} function depends on `tags tables' that record the locations "
"of the functions, variables, and other items to which @code{find-tag} jumps."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4713
msgid ""
"To use the @code{find-tag} command, type @kbd{M-.} (i.e., press the period "
"key while holding down the @key{META} key, or else type the @key{ESC} key "
"and then type the period key), and then, at the prompt, type in the name of "
"the function whose source code you want to see, such as "
"@code{mark-whole-buffer}, and then type @key{RET}.  Emacs will switch "
"buffers and display the source code for the function on your screen.  To "
"switch back to your current buffer, type @kbd{C-x b @key{RET}}.  (On some "
"keyboards, the @key{META} key is labeled @key{ALT}.)"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:4715
#, no-wrap
msgid "TAGS table, specifying"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:4716 emacs-lisp-intro.texi:5477
#, no-wrap
msgid "find-tag"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4727
msgid ""
"Depending on how the initial default values of your copy of Emacs are set, "
"you may also need to specify the location of your `tags table', which is a "
"file called @file{TAGS}.  For example, if you are interested in Emacs "
"sources, the tags table you will most likely want, if it has already been "
"created for you, will be in a subdirectory of the "
"@file{/usr/local/share/emacs/} directory; thus you would use the @code{M-x "
"visit-tags-table} command and specify a pathname such as "
"@file{/usr/local/share/emacs/22.1.1/lisp/TAGS}.  If the tags table has not "
"already been created, you will have to create it yourself.  It will be in a "
"file such as @file{/usr/local/src/emacs/src/TAGS}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4733
msgid ""
"To create a @file{TAGS} file in a specific directory, switch to that "
"directory in Emacs using @kbd{M-x cd} command, or list the directory with "
"@kbd{C-x d} (@code{dired}).  Then run the compile command, with "
"@w{@code{etags *.el}} as the command to execute:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:4736 emacs-lisp-intro.texi:13491
#, no-wrap
msgid "M-x compile RET etags *.el RET\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4739
msgid "For more information, see @ref{etags, , Create Your Own @file{TAGS} File}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4743
msgid ""
"After you become more familiar with Emacs Lisp, you will find that you will "
"frequently use @code{find-tag} to navigate your way around source code; and "
"you will create your own @file{TAGS} tables."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:4744
#, no-wrap
msgid "Library, as term for `file'"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4757
msgid ""
"Incidentally, the files that contain Lisp code are conventionally called "
"@dfn{libraries}.  The metaphor is derived from that of a specialized "
"library, such as a law library or an engineering library, rather than a "
"general library.  Each library, or file, contains functions that relate to a "
"particular topic or activity, such as @file{abbrev.el} for handling "
"abbreviations and other typing shortcuts, and @file{help.el} for on-line "
"help.  (Sometimes several libraries provide code for a single activity, as "
"the various @file{rmail@dots{}} files provide code for reading electronic "
"mail.)  In @cite{The GNU Emacs Manual}, you will see sentences such as ``The "
"@kbd{C-h p} command lets you search the standard Emacs Lisp libraries by "
"topic keywords.''"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:4759
#, no-wrap
msgid "A Simplified @code{beginning-of-buffer} Definition"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4767
msgid ""
"The @code{beginning-of-buffer} command is a good function to start with "
"since you are likely to be familiar with it and it is easy to understand.  "
"Used as an interactive command, @code{beginning-of-buffer} moves the cursor "
"to the beginning of the buffer, leaving the mark at the previous position.  "
"It is generally bound to @kbd{M-<}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4774
msgid ""
"In this section, we will discuss a shortened version of the function that "
"shows how it is most frequently used.  This shortened function works as "
"written, but it does not contain the code for a complex option.  In another "
"section, we will describe the entire function.  (@xref{beginning-of-buffer, "
", Complete Definition of @code{beginning-of-buffer}}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4782
msgid ""
"Before looking at the code, let's consider what the function definition has "
"to contain: it must include an expression that makes the function "
"interactive so it can be called by typing @kbd{M-x beginning-of-buffer} or "
"by typing a keychord such as @kbd{M-<}; it must include code to leave a mark "
"at the original position in the buffer; and it must include code to move the "
"cursor to the beginning of the buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4785
msgid "Here is the complete text of the shortened version of the function:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:4794
#, no-wrap
msgid ""
"(defun simplified-beginning-of-buffer ()\n"
"  \"Move point to the beginning of the buffer;\n"
"leave mark at previous position.\"\n"
"  (interactive)\n"
"  (push-mark)\n"
"  (goto-char (point-min)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4799
msgid ""
"Like all function definitions, this definition has five parts following the "
"special form @code{defun}:"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:4803
msgid "The name: in this example, @code{simplified-beginning-of-buffer}."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:4806
msgid "A list of the arguments: in this example, an empty list, @code{()},"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:4809
msgid "The documentation string."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:4812
msgid "The interactive expression."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:4815
msgid "The body."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4822
msgid ""
"In this function definition, the argument list is empty; this means that "
"this function does not require any arguments.  (When we look at the "
"definition for the complete function, we will see that it may be passed an "
"optional argument.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4827
msgid ""
"The interactive expression tells Emacs that the function is intended to be "
"used interactively.  In this example, @code{interactive} does not have an "
"argument because @code{simplified-beginning-of-buffer} does not require one."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4830
msgid "The body of the function consists of the two lines:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:4835
#, no-wrap
msgid ""
"(push-mark)\n"
"(goto-char (point-min))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4842
msgid ""
"The first of these lines is the expression, @code{(push-mark)}.  When this "
"expression is evaluated by the Lisp interpreter, it sets a mark at the "
"current position of the cursor, wherever that may be.  The position of this "
"mark is saved in the mark ring."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4848
msgid ""
"The next line is @code{(goto-char (point-min))}.  This expression jumps the "
"cursor to the minimum point in the buffer, that is, to the beginning of the "
"buffer (or to the beginning of the accessible portion of the buffer if it is "
"narrowed.  @xref{Narrowing & Widening, , Narrowing and Widening}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4853
msgid ""
"The @code{push-mark} command sets a mark at the place where the cursor was "
"located before it was moved to the beginning of the buffer by the "
"@code{(goto-char (point-min))} expression.  Consequently, you can, if you "
"wish, go back to where you were originally by typing @kbd{C-x C-x}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4855
msgid "That is all there is to the function definition!"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:4856 emacs-lisp-intro.texi:5472
#, no-wrap
msgid "describe-function"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4864
msgid ""
"When you are reading code such as this and come upon an unfamiliar function, "
"such as @code{goto-char}, you can find out what it does by using the "
"@code{describe-function} command.  To use this command, type @kbd{C-h f} and "
"then type in the name of the function and press @key{RET}.  The "
"@code{describe-function} command will print the function's documentation "
"string in a @file{*Help*} window.  For example, the documentation for "
"@code{goto-char} is:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:4869
#, no-wrap
msgid ""
"Set point to POSITION, a number or marker.\n"
"Beginning of buffer is position (point-min), end is (point-max).\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4874
msgid "The function's one argument is the desired position."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4880
msgid ""
"(The prompt for @code{describe-function} will offer you the symbol under or "
"preceding the cursor, so you can save typing by positioning the cursor right "
"over or after the function and then typing @kbd{C-h f @key{RET}}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4885
msgid ""
"The @code{end-of-buffer} function definition is written in the same way as "
"the @code{beginning-of-buffer} definition except that the body of the "
"function contains the expression @code{(goto-char (point-max))} in place of "
"@code{(goto-char (point-min))}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4893
msgid ""
"The @code{mark-whole-buffer} function is no harder to understand than the "
"@code{simplified-beginning-of-buffer} function.  In this case, however, we "
"will look at the complete function, not a shortened version."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4899
msgid ""
"The @code{mark-whole-buffer} function is not as commonly used as the "
"@code{beginning-of-buffer} function, but is useful nonetheless: it marks a "
"whole buffer as a region by putting point at the beginning and a mark at the "
"end of the buffer.  It is generally bound to @kbd{C-x h}."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:4906
#, no-wrap
msgid "mark-whole-buffer overview"
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:4907
#, no-wrap
msgid "An overview of @code{mark-whole-buffer}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4912
msgid "In GNU Emacs 22, the code for the complete function looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:4924
#, no-wrap
msgid ""
"(defun mark-whole-buffer ()\n"
"  \"Put point at beginning and mark at end of buffer.\n"
"You probably should not use this function in Lisp programs;\n"
"it is usually a mistake for a Lisp function to use any subroutine\n"
"that uses or sets the mark.\"\n"
"  (interactive)\n"
"  (push-mark (point))\n"
"  (push-mark (point-max) nil t)\n"
"  (goto-char (point-min)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4931
msgid ""
"Like all other functions, the @code{mark-whole-buffer} function fits into "
"the template for a function definition.  The template looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:4938 emacs-lisp-intro.texi:13766
#, no-wrap
msgid ""
"(defun @var{name-of-function} (@var{argument-list})\n"
"  \"@var{documentation}@dots{}\"\n"
"  (@var{interactive-expression}@dots{})\n"
"  @var{body}@dots{})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4945
msgid ""
"Here is how the function works: the name of the function is "
"@code{mark-whole-buffer}; it is followed by an empty argument list, "
"@samp{()}, which means that the function does not require arguments.  The "
"documentation comes next."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4950
msgid ""
"The next line is an @code{(interactive)} expression that tells Emacs that "
"the function will be used interactively.  These details are similar to the "
"@code{simplified-beginning-of-buffer} function described in the previous "
"section."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:4953
#, no-wrap
msgid "Body of @code{mark-whole-buffer}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4957
msgid ""
"The body of the @code{mark-whole-buffer} function consists of three lines of "
"code:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:4964
#, no-wrap
msgid ""
"(push-mark (point))\n"
"(push-mark (point-max) nil t)\n"
"(goto-char (point-min))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4968
msgid "The first of these lines is the expression, @code{(push-mark (point))}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4973
msgid ""
"This line does exactly the same job as the first line of the body of the "
"@code{simplified-beginning-of-buffer} function, which is written "
"@code{(push-mark)}.  In both cases, the Lisp interpreter sets a mark at the "
"current position of the cursor."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4984
msgid ""
"I don't know why the expression in @code{mark-whole-buffer} is written "
"@code{(push-mark (point))} and the expression in @code{beginning-of-buffer} "
"is written @code{(push-mark)}.  Perhaps whoever wrote the code did not know "
"that the arguments for @code{push-mark} are optional and that if "
"@code{push-mark} is not passed an argument, the function automatically sets "
"mark at the location of point by default.  Or perhaps the expression was "
"written so as to parallel the structure of the next line.  In any case, the "
"line causes Emacs to determine the position of point and set a mark there."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:4996
msgid ""
"In earlier versions of GNU Emacs, the next line of @code{mark-whole-buffer} "
"was @code{(push-mark (point-max))}.  This expression sets a mark at the "
"point in the buffer that has the highest number.  This will be the end of "
"the buffer (or, if the buffer is narrowed, the end of the accessible portion "
"of the buffer.  @xref{Narrowing & Widening, , Narrowing and Widening}, for "
"more about narrowing.)  After this mark has been set, the previous mark, the "
"one set at point, is no longer set, but Emacs remembers its position, just "
"as all other recent marks are always remembered.  This means that you can, "
"if you wish, go back to that position by typing @kbd{C-u C-@key{SPC}} twice."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5000
msgid ""
"In GNU Emacs 22, the @code{(point-max)} is slightly more complicated.  The "
"line reads"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:5003
#, no-wrap
msgid "(push-mark (point-max) nil t)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5015
msgid ""
"The expression works nearly the same as before.  It sets a mark at the "
"highest numbered place in the buffer that it can.  However, in this version, "
"@code{push-mark} has two additional arguments.  The second argument to "
"@code{push-mark} is @code{nil}.  This tells the function it @emph{should} "
"display a message that says `Mark set' when it pushes the mark.  The third "
"argument is @code{t}.  This tells @code{push-mark} to activate the mark when "
"Transient Mark mode is turned on.  Transient Mark mode highlights the "
"currently active region.  It is often turned off."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5024
msgid ""
"Finally, the last line of the function is @code{(goto-char (point-min)))}.  "
"This is written exactly the same way as it is written in "
"@code{beginning-of-buffer}.  The expression moves the cursor to the minimum "
"point in the buffer, that is, to the beginning of the buffer (or to the "
"beginning of the accessible portion of the buffer).  As a result of this, "
"point is placed at the beginning of the buffer and mark is set at the end of "
"the buffer.  The whole buffer is, therefore, the region."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5033
msgid ""
"The @code{append-to-buffer} command is more complex than the "
"@code{mark-whole-buffer} command.  What it does is copy the region (that is, "
"the part of the buffer between point and mark) from the current buffer to a "
"specified buffer."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:5042
#, no-wrap
msgid "append-to-buffer overview"
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:5043
#, no-wrap
msgid "An Overview of @code{append-to-buffer}"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:5046 emacs-lisp-intro.texi:5498
#, no-wrap
msgid "insert-buffer-substring"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5052
msgid ""
"The @code{append-to-buffer} command uses the @code{insert-buffer-substring} "
"function to copy the region.  @code{insert-buffer-substring} is described by "
"its name: it takes a string of characters from part of a buffer, a "
"``substring'', and inserts them into another buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5058
msgid ""
"Most of @code{append-to-buffer} is concerned with setting up the conditions "
"for @code{insert-buffer-substring} to work: the code must specify both the "
"buffer to which the text will go, the window it comes from and goes to, and "
"the region that will be copied."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5061
msgid "Here is the complete text of the function:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5067
#, no-wrap
msgid ""
"(defun append-to-buffer (buffer start end)\n"
"  \"Append to specified buffer the text of the region.\n"
"It is inserted into that buffer before its point.\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5077
#, no-wrap
msgid ""
"When calling from a program, give three arguments:\n"
"BUFFER (or buffer name), START and END.\n"
"START and END specify the portion of the current buffer to be copied.\"\n"
"  (interactive\n"
"   (list (read-buffer \"Append to buffer: \" (other-buffer\n"
"                                            (current-buffer) t))\n"
"         (region-beginning) (region-end)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5091
#, no-wrap
msgid ""
"  (let ((oldbuf (current-buffer)))\n"
"    (save-excursion\n"
"      (let* ((append-to (get-buffer-create buffer))\n"
"             (windows (get-buffer-window-list append-to t t))\n"
"             point)\n"
"        (set-buffer append-to)\n"
"        (setq point (point))\n"
"        (barf-if-buffer-read-only)\n"
"        (insert-buffer-substring oldbuf start end)\n"
"        (dolist (window windows)\n"
"          (when (= (window-point window) point)\n"
"            (set-window-point window (point))))))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5096
msgid ""
"The function can be understood by looking at it as a series of filled-in "
"templates."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5099
msgid ""
"The outermost template is for the function definition.  In this function, it "
"looks like this (with several slots filled in):"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5106
#, no-wrap
msgid ""
"(defun append-to-buffer (buffer start end)\n"
"  \"@var{documentation}@dots{}\"\n"
"  (interactive @dots{})\n"
"  @var{body}@dots{})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5113
msgid ""
"The first line of the function includes its name and three arguments.  The "
"arguments are the @code{buffer} to which the text will be copied, and the "
"@code{start} and @code{end} of the region in the current buffer that will be "
"copied."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5118
msgid ""
"The next part of the function is the documentation, which is clear and "
"complete.  As is conventional, the three arguments are written in upper case "
"so you will notice them easily.  Even better, they are described in the same "
"order as in the argument list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5121
msgid ""
"Note that the documentation distinguishes between a buffer and its name.  "
"(The function can handle either.)"
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:5123
#, no-wrap
msgid "The @code{append-to-buffer} Interactive Expression"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5129
msgid ""
"Since the @code{append-to-buffer} function will be used interactively, the "
"function must have an @code{interactive} expression.  (For a review of "
"@code{interactive}, see @ref{Interactive, , Making a Function Interactive}.)  "
"The expression reads as follows:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5138
#, no-wrap
msgid ""
"(interactive\n"
" (list (read-buffer\n"
"        \"Append to buffer: \"\n"
"        (other-buffer (current-buffer) t))\n"
"       (region-beginning)\n"
"       (region-end)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5144
msgid ""
"This expression is not one with letters standing for parts, as described "
"earlier.  Instead, it starts a list with these parts:"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5150
msgid ""
"The first part of the list is an expression to read the name of a buffer and "
"return it as a string.  That is @code{read-buffer}.  The function requires a "
"prompt as its first argument, @samp{\"Append to buffer: \"}.  Its second "
"argument tells the command what value to provide if you don't specify "
"anything."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5154
msgid ""
"In this case that second argument is an expression containing the function "
"@code{other-buffer}, an exception, and a @samp{t}, standing for true."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5160
msgid ""
"The first argument to @code{other-buffer}, the exception, is yet another "
"function, @code{current-buffer}.  That is not going to be returned.  The "
"second argument is the symbol for true, @code{t}. that tells "
"@code{other-buffer} that it may show visible buffers (except in this case, "
"it will not show the current buffer, which makes sense)."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5163 emacs-lisp-intro.texi:9038
msgid "The expression looks like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:5166
#, no-wrap
msgid "(other-buffer (current-buffer) t)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5171
msgid ""
"The second and third arguments to the @code{list} expression are "
"@code{(region-beginning)} and @code{(region-end)}.  These two functions "
"specify the beginning and end of the text to be appended."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5175
msgid ""
"Originally, the command used the letters @samp{B} and @samp{r}.  The whole "
"@code{interactive} expression looked like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:5178
#, no-wrap
msgid "(interactive \"BAppend to buffer:@: \\nr\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5183
msgid ""
"But when that was done, the default value of the buffer switched to was "
"invisible.  That was not wanted."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5189
msgid ""
"(The prompt was separated from the second argument with a newline, "
"@samp{\\n}.  It was followed by an @samp{r} that told Emacs to bind the two "
"arguments that follow the symbol @code{buffer} in the function's argument "
"list (that is, @code{start} and @code{end}) to the values of point and "
"mark.  That argument worked fine.)"
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:5191
#, no-wrap
msgid "The Body of @code{append-to-buffer}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5221
msgid "The body of the @code{append-to-buffer} function begins with @code{let}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5227
msgid ""
"As we have seen before (@pxref{let, , @code{let}}), the purpose of a "
"@code{let} expression is to create and give initial values to one or more "
"variables that will only be used within the body of the @code{let}.  This "
"means that such a variable will not be confused with any variable of the "
"same name outside the @code{let} expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5231
msgid ""
"We can see how the @code{let} expression fits into the function as a whole "
"by showing a template for @code{append-to-buffer} with the @code{let} "
"expression in outline:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5239
#, no-wrap
msgid ""
"(defun append-to-buffer (buffer start end)\n"
"  \"@var{documentation}@dots{}\"\n"
"  (interactive @dots{})\n"
"  (let ((@var{variable} @var{value}))\n"
"        @var{body}@dots{})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5243
msgid "The @code{let} expression has three elements:"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:5247
msgid "The symbol @code{let};"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:5251
msgid ""
"A varlist containing, in this case, a single two-element list, "
"@code{(@var{variable} @var{value})};"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:5254
msgid "The body of the @code{let} expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5258
msgid "In the @code{append-to-buffer} function, the varlist looks like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:5261
#, no-wrap
msgid "(oldbuf (current-buffer))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5269
msgid ""
"In this part of the @code{let} expression, the one variable, @code{oldbuf}, "
"is bound to the value returned by the @code{(current-buffer)} expression.  "
"The variable, @code{oldbuf}, is used to keep track of the buffer in which "
"you are working and from which you will copy."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5275
msgid ""
"The element or elements of a varlist are surrounded by a set of parentheses "
"so the Lisp interpreter can distinguish the varlist from the body of the "
"@code{let}.  As a consequence, the two-element list within the varlist is "
"surrounded by a circumscribing set of parentheses.  The line looks like "
"this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5280
#, no-wrap
msgid ""
"(let ((oldbuf (current-buffer)))\n"
"  @dots{} )\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5288
msgid ""
"The two parentheses before @code{oldbuf} might surprise you if you did not "
"realize that the first parenthesis before @code{oldbuf} marks the boundary "
"of the varlist and the second parenthesis marks the beginning of the "
"two-element list, @code{(oldbuf (current-buffer))}."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:5290
#, no-wrap
msgid "@code{save-excursion} in @code{append-to-buffer}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5294
msgid ""
"The body of the @code{let} expression in @code{append-to-buffer} consists of "
"a @code{save-excursion} expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5301
msgid ""
"The @code{save-excursion} function saves the locations of point and mark, "
"and restores them to those positions after the expressions in the body of "
"the @code{save-excursion} complete execution.  In addition, "
"@code{save-excursion} keeps track of the original buffer, and restores it.  "
"This is how @code{save-excursion} is used in @code{append-to-buffer}."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:5303
#, no-wrap
msgid "Indentation for formatting"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:5304
#, no-wrap
msgid "Formatting convention"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5311
msgid ""
"Incidentally, it is worth noting here that a Lisp function is normally "
"formatted so that everything that is enclosed in a multi-line spread is "
"indented more to the right than the first symbol.  In this function "
"definition, the @code{let} is indented more than the @code{defun}, and the "
"@code{save-excursion} is indented more than the @code{let}, like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5320
#, no-wrap
msgid ""
"(defun @dots{}\n"
"  @dots{}\n"
"  @dots{}\n"
"  (let@dots{}\n"
"    (save-excursion\n"
"      @dots{}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5330
msgid ""
"This formatting convention makes it easy to see that the lines in the body "
"of the @code{save-excursion} are enclosed by the parentheses associated with "
"@code{save-excursion}, just as the @code{save-excursion} itself is enclosed "
"by the parentheses associated with the @code{let}:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5339
#, no-wrap
msgid ""
"(let ((oldbuf (current-buffer)))\n"
"  (save-excursion\n"
"    @dots{}\n"
"    (set-buffer @dots{})\n"
"    (insert-buffer-substring oldbuf start end)\n"
"    @dots{}))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5345
msgid ""
"The use of the @code{save-excursion} function can be viewed as a process of "
"filling in the slots of a template:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5353
#, no-wrap
msgid ""
"(save-excursion\n"
"  @var{first-expression-in-body}\n"
"  @var{second-expression-in-body}\n"
"   @dots{}\n"
"  @var{last-expression-in-body})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5363
msgid ""
"In this function, the body of the @code{save-excursion} contains only one "
"expression, the @code{let*} expression.  You know about a @code{let} "
"function.  The @code{let*} function is different.  It has a @samp{*} in its "
"name.  It enables Emacs to set each variable in its varlist in sequence, one "
"after another."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5367
msgid ""
"Its critical feature is that variables later in the varlist can make use of "
"the values to which Emacs set variables earlier in the varlist.  "
"@xref{fwd-para let, , The @code{let*} expression}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5371
msgid ""
"We will skip functions like @code{let*} and focus on two: the "
"@code{set-buffer} function and the @code{insert-buffer-substring} function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5374
msgid "In the old days, the @code{set-buffer} expression was simply"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:5377
#, no-wrap
msgid "(set-buffer (get-buffer-create buffer))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5382
msgid "but now it is"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:5385
#, no-wrap
msgid "(set-buffer append-to)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5392
msgid ""
"@code{append-to} is bound to @code{(get-buffer-create buffer)} earlier on in "
"the @code{let*} expression.  That extra binding would not be necessary "
"except for that @code{append-to} is used later in the varlist as an argument "
"to @code{get-buffer-window-list}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5417
msgid ""
"The @code{append-to-buffer} function definition inserts text from the buffer "
"in which you are currently to a named buffer.  It happens that "
"@code{insert-buffer-substring} copies text from another buffer to the "
"current buffer, just the reverse---that is why the @code{append-to-buffer} "
"definition starts out with a @code{let} that binds the local symbol "
"@code{oldbuf} to the value returned by @code{current-buffer}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5420
msgid "The @code{insert-buffer-substring} expression looks like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:5423
#, no-wrap
msgid "(insert-buffer-substring oldbuf start end)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5433
msgid ""
"The @code{insert-buffer-substring} function copies a string @emph{from} the "
"buffer specified as its first argument and inserts the string into the "
"present buffer.  In this case, the argument to "
"@code{insert-buffer-substring} is the value of the variable created and "
"bound by the @code{let}, namely the value of @code{oldbuf}, which was the "
"current buffer when you gave the @code{append-to-buffer} command."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5437
msgid ""
"After @code{insert-buffer-substring} has done its work, "
"@code{save-excursion} will restore the action to the original buffer and "
"@code{append-to-buffer} will have done its job."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5440
msgid "Written in skeletal form, the workings of the body look like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5447
#, no-wrap
msgid ""
"(let (@var{bind-}@code{oldbuf}@var{-to-value-of-}@code{current-buffer})\n"
"  (save-excursion                       ; @r{Keep track of buffer.}\n"
"    @var{change-buffer}\n"
"    @var{insert-substring-from-}@code{oldbuf}@var{-into-buffer})\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5450
#, no-wrap
msgid ""
"  @var{change-back-to-original-buffer-when-finished}\n"
"@var{let-the-local-meaning-of-}@code{oldbuf}@var{-disappear-when-finished}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5459
msgid ""
"In summary, @code{append-to-buffer} works as follows: it saves the value of "
"the current buffer in the variable called @code{oldbuf}.  It gets the new "
"buffer (creating one if need be) and switches Emacs's attention to it.  "
"Using the value of @code{oldbuf}, it inserts the region of text from the old "
"buffer into the new buffer; and then using @code{save-excursion}, it brings "
"you back to your original buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5465
msgid ""
"In looking at @code{append-to-buffer}, you have explored a fairly complex "
"function.  It shows how to use @code{let} and @code{save-excursion}, and how "
"to change to and come back from another buffer.  Many function definitions "
"use @code{let}, @code{save-excursion}, and @code{set-buffer} this way."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5470
msgid "Here is a brief summary of the various functions discussed in this chapter."
msgstr ""

#. type: itemx
#: emacs-lisp-intro.texi:5473
#, no-wrap
msgid "describe-variable"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:5476
msgid ""
"Print the documentation for a function or variable.  Conventionally bound to "
"@kbd{C-h f} and @kbd{C-h v}."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:5482
msgid ""
"Find the file containing the source for a function or variable and switch "
"buffers to it, positioning point at the beginning of the item.  "
"Conventionally bound to @kbd{M-.} (that's a period following the @key{META} "
"key)."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:5487
msgid ""
"Save the location of point and mark and restore their values after the "
"arguments to @code{save-excursion} have been evaluated.  Also, remember the "
"current buffer and return to it."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:5488
#, no-wrap
msgid "push-mark"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:5492
msgid ""
"Set mark at a location and record the value of the previous mark on the mark "
"ring.  The mark is a location in the buffer that will keep its relative "
"position even if text is added to or removed from the buffer."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:5493
#, no-wrap
msgid "goto-char"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:5497
msgid ""
"Set point to the location specified by the value of the argument, which can "
"be a number, a marker, or an expression that returns the number of a "
"position, such as @code{(point-min)}."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:5501
msgid ""
"Copy a region of text from a buffer that is passed to the function as an "
"argument and insert the region into the current buffer."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:5504
msgid "Mark the whole buffer as a region.  Normally bound to @kbd{C-x h}."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:5509
msgid ""
"Switch the attention of Emacs to another buffer, but do not change the "
"window being displayed.  Used when the program rather than a human is to "
"work on a different buffer."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:5510
#, no-wrap
msgid "get-buffer-create"
msgstr ""

#. type: itemx
#: emacs-lisp-intro.texi:5511
#, no-wrap
msgid "get-buffer"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:5515
msgid ""
"Find a named buffer or create one if a buffer of that name does not exist.  "
"The @code{get-buffer} function returns @code{nil} if the named buffer does "
"not exist."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:5525
msgid ""
"Write your own @code{simplified-end-of-buffer} function definition; then "
"test it to see whether it works."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:5529
msgid ""
"Use @code{if} and @code{get-buffer} to write a function that prints a "
"message telling you whether a buffer exists."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:5533
msgid ""
"Using @code{find-tag}, find the source for the @code{copy-to-buffer} "
"function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5545
msgid ""
"In this chapter, we build on what we have learned in previous chapters by "
"looking at more complex functions.  The @code{copy-to-buffer} function "
"illustrates use of two @code{save-excursion} expressions in one definition, "
"while the @code{insert-buffer} function illustrates use of an asterisk in an "
"@code{interactive} expression, use of @code{or}, and the important "
"distinction between a name and the object to which the name refers."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:5556
#, no-wrap
msgid "The Definition of @code{copy-to-buffer}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5563
msgid ""
"After understanding how @code{append-to-buffer} works, it is easy to "
"understand @code{copy-to-buffer}.  This function copies text into a buffer, "
"but instead of adding to the second buffer, it replaces all the previous "
"text in the second buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5566
msgid "The body of @code{copy-to-buffer} looks like this,"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5577
#, no-wrap
msgid ""
"@dots{}\n"
"(interactive \"BCopy to buffer: \\nr\")\n"
"(let ((oldbuf (current-buffer)))\n"
"  (with-current-buffer (get-buffer-create buffer)\n"
"    (barf-if-buffer-read-only)\n"
"    (erase-buffer)\n"
"    (save-excursion\n"
"      (insert-buffer-substring oldbuf start end)))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5582
msgid ""
"The @code{copy-to-buffer} function has a simpler @code{interactive} "
"expression than @code{append-to-buffer}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5585
msgid "The definition then says"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:5588
#, no-wrap
msgid "(with-current-buffer (get-buffer-create buffer) @dots{}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5596
msgid ""
"First, look at the earliest inner expression; that is evaluated first.  That "
"expression starts with @code{get-buffer-create buffer}.  The function tells "
"the computer to use the buffer with the name specified as the one to which "
"you are copying, or if such a buffer does not exist, to create it.  Then, "
"the @code{with-current-buffer} function evaluates its body with that buffer "
"temporarily current."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5602
msgid ""
"(This demonstrates another way to shift the computer's attention but not the "
"user's.  The @code{append-to-buffer} function showed how to do the same with "
"@code{save-excursion} and @code{set-buffer}.  @code{with-current-buffer} is "
"a newer, and arguably easier, mechanism.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5605
msgid ""
"The @code{barf-if-buffer-read-only} function sends you an error message "
"saying the buffer is read-only if you cannot modify it."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5608
msgid ""
"The next line has the @code{erase-buffer} function as its sole contents.  "
"That function erases the buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5615
msgid ""
"Finally, the last two lines contain the @code{save-excursion} expression "
"with @code{insert-buffer-substring} as its body.  The "
"@code{insert-buffer-substring} expression copies the text from the buffer "
"you are in (and you have not seen the computer shift its attention, so you "
"don't know that that buffer is now called @code{oldbuf})."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5618
msgid ""
"Incidentally, this is what is meant by `replacement'.  To replace text, "
"Emacs erases the previous text and then inserts new text."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5621
msgid "In outline, the body of @code{copy-to-buffer} looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5630
#, no-wrap
msgid ""
"(let (@var{bind-}@code{oldbuf}@var{-to-value-of-}@code{current-buffer})\n"
"    (@var{with-the-buffer-you-are-copying-to}\n"
"      (@var{but-do-not-erase-or-copy-to-a-read-only-buffer})\n"
"      (erase-buffer)\n"
"      (save-excursion\n"
"        @var{insert-substring-from-}@code{oldbuf}@var{-into-buffer})))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5641
msgid ""
"@code{insert-buffer} is yet another buffer-related function.  This command "
"copies another buffer @emph{into} the current buffer.  It is the reverse of "
"@code{append-to-buffer} or @code{copy-to-buffer}, since they copy a region "
"of text @emph{from} the current buffer to another buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5644
msgid ""
"Here is a discussion based on the original code.  The code was simplified in "
"2003 and is harder to understand."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5647
msgid ""
"(@xref{New insert-buffer, , New Body for @code{insert-buffer}}, to see a "
"discussion of the new body.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5651
msgid ""
"In addition, this code illustrates the use of @code{interactive} with a "
"buffer that might be @dfn{read-only} and the important distinction between "
"the name of an object and the object actually referred to."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:5663
#, no-wrap
msgid "insert-buffer code"
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:5664
#, no-wrap
msgid "The Code for @code{insert-buffer}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5669
msgid "Here is the earlier code:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5677
#, no-wrap
msgid ""
"(defun insert-buffer (buffer)\n"
"  \"Insert after point the contents of BUFFER.\n"
"Puts mark after the inserted text.\n"
"BUFFER may be a buffer or a buffer name.\"\n"
"  (interactive \"*bInsert buffer:@: \")\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5686
#, no-wrap
msgid ""
"  (or (bufferp buffer)\n"
"      (setq buffer (get-buffer buffer)))\n"
"  (let (start end newmark)\n"
"    (save-excursion\n"
"      (save-excursion\n"
"        (set-buffer buffer)\n"
"        (setq start (point-min) end (point-max)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5691
#, no-wrap
msgid ""
"      (insert-buffer-substring buffer start end)\n"
"      (setq newmark (point)))\n"
"    (push-mark newmark)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5697
msgid ""
"As with other function definitions, you can use a template to see an outline "
"of the function:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5704
#, no-wrap
msgid ""
"(defun insert-buffer (buffer)\n"
"  \"@var{documentation}@dots{}\"\n"
"  (interactive \"*bInsert buffer:@: \")\n"
"  @var{body}@dots{})\n"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:5709
#, no-wrap
msgid "interactive, @r{example use of}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5714
msgid ""
"In @code{insert-buffer}, the argument to the @code{interactive} declaration "
"has two parts, an asterisk, @samp{*}, and @samp{bInsert buffer:@: }."
msgstr ""

#. type: unnumberedsubsubsec
#: emacs-lisp-intro.texi:5721
#, no-wrap
msgid "A Read-only Buffer"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:5723
#, no-wrap
msgid "Asterisk for read-only buffer"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:5724
#, no-wrap
msgid "* @r{for read-only buffer}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5733
msgid ""
"The asterisk is for the situation when the current buffer is a read-only "
"buffer---a buffer that cannot be modified.  If @code{insert-buffer} is "
"called when the current buffer is read-only, a message to this effect is "
"printed in the echo area and the terminal may beep or blink at you; you will "
"not be permitted to insert anything into current buffer.  The asterisk does "
"not need to be followed by a newline to separate it from the next argument."
msgstr ""

#. type: unnumberedsubsubsec
#: emacs-lisp-intro.texi:5735
#, no-wrap
msgid "@samp{b} in an Interactive Expression"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5748
msgid ""
"The next argument in the interactive expression starts with a lower case "
"@samp{b}.  (This is different from the code for @code{append-to-buffer}, "
"which uses an upper-case @samp{B}.  @xref{append-to-buffer, , The Definition "
"of @code{append-to-buffer}}.)  The lower-case @samp{b} tells the Lisp "
"interpreter that the argument for @code{insert-buffer} should be an existing "
"buffer or else its name.  (The upper-case @samp{B} option provides for the "
"possibility that the buffer does not exist.)  Emacs will prompt you for the "
"name of the buffer, offering you a default buffer, with name completion "
"enabled.  If the buffer does not exist, you receive a message that says ``No "
"match''; your terminal may beep at you as well."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5753
msgid ""
"The new and simplified code generates a list for @code{interactive}.  It "
"uses the @code{barf-if-buffer-read-only} and @code{read-buffer} functions "
"with which we are already familiar and the @code{progn} special form with "
"which we are not.  (It will be described later.)"
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:5755
#, no-wrap
msgid "The Body of the @code{insert-buffer} Function"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5763
msgid ""
"The body of the @code{insert-buffer} function has two major parts: an "
"@code{or} expression and a @code{let} expression.  The purpose of the "
"@code{or} expression is to ensure that the argument @code{buffer} is bound "
"to a buffer and not just the name of a buffer.  The body of the @code{let} "
"expression contains the code which copies the other buffer into the current "
"buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5767
msgid ""
"In outline, the two expressions fit into the @code{insert-buffer} function "
"like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5775
#, no-wrap
msgid ""
"(defun insert-buffer (buffer)\n"
"  \"@var{documentation}@dots{}\"\n"
"  (interactive \"*bInsert buffer:@: \")\n"
"  (or @dots{}\n"
"      @dots{}\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5779
#, no-wrap
msgid ""
"  (let (@var{varlist})\n"
"      @var{body-of-}@code{let}@dots{} )\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5785
msgid ""
"To understand how the @code{or} expression ensures that the argument "
"@code{buffer} is bound to a buffer and not to the name of a buffer, it is "
"first necessary to understand the @code{or} function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5788
msgid ""
"Before doing this, let me rewrite this part of the function using @code{if} "
"so that you can see what is done in a manner that will be familiar."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:5790
#, no-wrap
msgid "@code{insert-buffer} With an @code{if} Instead of an @code{or}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5795
msgid ""
"The job to be done is to make sure the value of @code{buffer} is a buffer "
"itself and not the name of a buffer.  If the value is the name, then the "
"buffer itself must be got."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5800
msgid ""
"You can imagine yourself at a conference where an usher is wandering around "
"holding a list with your name on it and looking for you: the usher is "
"``bound'' to your name, not to you; but when the usher finds you and takes "
"your arm, the usher becomes ``bound'' to you."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5803
msgid "In Lisp, you might describe this situation like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5808
#, no-wrap
msgid ""
"(if (not (holding-on-to-guest))\n"
"    (find-and-take-arm-of-guest))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5813
msgid ""
"We want to do the same thing with a buffer---if we do not have the buffer "
"itself, we want to get it."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5817
msgid ""
"Using a predicate called @code{bufferp} that tells us whether we have a "
"buffer (rather than its name), we can write the code like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5822
#, no-wrap
msgid ""
"(if (not (bufferp buffer))              ; @r{if-part}\n"
"    (setq buffer (get-buffer buffer)))  ; @r{then-part}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5829
msgid ""
"Here, the true-or-false-test of the @code{if} expression is @w{@code{(not "
"(bufferp buffer))}}; and the then-part is the expression @w{@code{(setq "
"buffer (get-buffer buffer))}}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5838
msgid ""
"In the test, the function @code{bufferp} returns true if its argument is a "
"buffer---but false if its argument is the name of the buffer.  (The last "
"character of the function name @code{bufferp} is the character @samp{p}; as "
"we saw earlier, such use of @samp{p} is a convention that indicates that the "
"function is a predicate, which is a term that means that the function will "
"determine whether some property is true or false.  @xref{Wrong Type of "
"Argument, , Using the Wrong Type Object as an Argument}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5842
msgid ""
"The function @code{not} precedes the expression @code{(bufferp buffer)}, so "
"the true-or-false-test looks like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:5845
#, no-wrap
msgid "(not (bufferp buffer))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5852
msgid ""
"@code{not} is a function that returns true if its argument is false and "
"false if its argument is true.  So if @code{(bufferp buffer)} returns true, "
"the @code{not} expression returns false and vice-verse: what is ``not true'' "
"is false and what is ``not false'' is true."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5859
msgid ""
"Using this test, the @code{if} expression works as follows: when the value "
"of the variable @code{buffer} is actually a buffer rather than its name, the "
"true-or-false-test returns false and the @code{if} expression does not "
"evaluate the then-part.  This is fine, since we do not need to do anything "
"to the variable @code{buffer} if it really is a buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5868
msgid ""
"On the other hand, when the value of @code{buffer} is not a buffer itself, "
"but the name of a buffer, the true-or-false-test returns true and the "
"then-part of the expression is evaluated.  In this case, the then-part is "
"@code{(setq buffer (get-buffer buffer))}.  This expression uses the "
"@code{get-buffer} function to return an actual buffer itself, given its "
"name.  The @code{setq} then sets the variable @code{buffer} to the value of "
"the buffer itself, replacing its previous value (which was the name of the "
"buffer)."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:5870
#, no-wrap
msgid "The @code{or} in the Body"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5878
msgid ""
"The purpose of the @code{or} expression in the @code{insert-buffer} function "
"is to ensure that the argument @code{buffer} is bound to a buffer and not "
"just to the name of a buffer.  The previous section shows how the job could "
"have been done using an @code{if} expression.  However, the "
"@code{insert-buffer} function actually uses @code{or}.  To understand this, "
"it is necessary to understand how @code{or} works."
msgstr ""

#. type: exdent
#: emacs-lisp-intro.texi:5879 emacs-lisp-intro.texi:6510 emacs-lisp-intro.texi:18087
#, no-wrap
msgid "or"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5885
msgid ""
"An @code{or} function can have any number of arguments.  It evaluates each "
"argument in turn and returns the value of the first of its arguments that is "
"not @code{nil}.  Also, and this is a crucial feature of @code{or}, it does "
"not evaluate any subsequent arguments after returning the first "
"non-@code{nil} value."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5888
msgid "The @code{or} expression looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5893
#, no-wrap
msgid ""
"(or (bufferp buffer)\n"
"    (setq buffer (get-buffer buffer)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5904
msgid ""
"The first argument to @code{or} is the expression @code{(bufferp buffer)}.  "
"This expression returns true (a non-@code{nil} value) if the buffer is "
"actually a buffer, and not just the name of a buffer.  In the @code{or} "
"expression, if this is the case, the @code{or} expression returns this true "
"value and does not evaluate the next expression---and this is fine with us, "
"since we do not want to do anything to the value of @code{buffer} if it "
"really is a buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5912
msgid ""
"On the other hand, if the value of @code{(bufferp buffer)} is @code{nil}, "
"which it will be if the value of @code{buffer} is the name of a buffer, the "
"Lisp interpreter evaluates the next element of the @code{or} expression.  "
"This is the expression @code{(setq buffer (get-buffer buffer))}.  This "
"expression returns a non-@code{nil} value, which is the value to which it "
"sets the variable @code{buffer}---and this value is a buffer itself, not the "
"name of a buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5918
msgid ""
"The result of all this is that the symbol @code{buffer} is always bound to a "
"buffer itself rather than to the name of a buffer.  All this is necessary "
"because the @code{set-buffer} function in a following line only works with a "
"buffer itself, not with the name to a buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5922
msgid ""
"Incidentally, using @code{or}, the situation with the usher would be written "
"like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:5925
#, no-wrap
msgid "(or (holding-on-to-guest) (find-and-take-arm-of-guest))\n"
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:5928
#, no-wrap
msgid "The @code{let} Expression in @code{insert-buffer}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5937
msgid ""
"After ensuring that the variable @code{buffer} refers to a buffer itself and "
"not just to the name of a buffer, the @code{insert-buffer function} "
"continues with a @code{let} expression.  This specifies three local "
"variables, @code{start}, @code{end}, and @code{newmark} and binds them to "
"the initial value @code{nil}.  These variables are used inside the remainder "
"of the @code{let} and temporarily hide any other occurrence of variables of "
"the same name in Emacs until the end of the @code{let}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5942
msgid ""
"The body of the @code{let} contains two @code{save-excursion} expressions.  "
"First, we will look at the inner @code{save-excursion} expression in "
"detail.  The expression looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5948
#, no-wrap
msgid ""
"(save-excursion\n"
"  (set-buffer buffer)\n"
"  (setq start (point-min) end (point-max)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5961
msgid ""
"The expression @code{(set-buffer buffer)} changes Emacs's attention from the "
"current buffer to the one from which the text will copied.  In that buffer, "
"the variables @code{start} and @code{end} are set to the beginning and end "
"of the buffer, using the commands @code{point-min} and @code{point-max}.  "
"Note that we have here an illustration of how @code{setq} is able to set two "
"variables in the same expression.  The first argument of @code{setq} is set "
"to the value of its second, and its third argument is set to the value of "
"its fourth."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5966
msgid ""
"After the body of the inner @code{save-excursion} is evaluated, the "
"@code{save-excursion} restores the original buffer, but @code{start} and "
"@code{end} remain set to the values of the beginning and end of the buffer "
"from which the text will be copied."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5969
msgid "The outer @code{save-excursion} expression looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:5977
#, no-wrap
msgid ""
"(save-excursion\n"
"  (@var{inner-}@code{save-excursion}@var{-expression}\n"
"     (@var{go-to-new-buffer-and-set-}@code{start}@var{-and-}@code{end})\n"
"  (insert-buffer-substring buffer start end)\n"
"  (setq newmark (point)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5988
msgid ""
"The @code{insert-buffer-substring} function copies the text @emph{into} the "
"current buffer @emph{from} the region indicated by @code{start} and "
"@code{end} in @code{buffer}.  Since the whole of the second buffer lies "
"between @code{start} and @code{end}, the whole of the second buffer is "
"copied into the buffer you are editing.  Next, the value of point, which "
"will be at the end of the inserted text, is recorded in the variable "
"@code{newmark}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:5991
msgid ""
"After the body of the outer @code{save-excursion} is evaluated, point and "
"mark are relocated to their original places."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6002
msgid ""
"However, it is convenient to locate a mark at the end of the newly inserted "
"text and locate point at its beginning.  The @code{newmark} variable records "
"the end of the inserted text.  In the last line of the @code{let} "
"expression, the @code{(push-mark newmark)} expression function sets a mark "
"to this location.  (The previous location of the mark is still accessible; "
"it is recorded on the mark ring and you can go back to it with @kbd{C-u "
"C-@key{SPC}}.)  Meanwhile, point is located at the beginning of the inserted "
"text, which is where it was before you called the insert function, the "
"position of which was saved by the first @code{save-excursion}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6005
msgid "The whole @code{let} expression looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:6016
#, no-wrap
msgid ""
"(let (start end newmark)\n"
"  (save-excursion\n"
"    (save-excursion\n"
"      (set-buffer buffer)\n"
"      (setq start (point-min) end (point-max)))\n"
"    (insert-buffer-substring buffer start end)\n"
"    (setq newmark (point)))\n"
"  (push-mark newmark))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6024
msgid ""
"Like the @code{append-to-buffer} function, the @code{insert-buffer} function "
"uses @code{let}, @code{save-excursion}, and @code{set-buffer}.  In addition, "
"the function illustrates one way to use @code{or}.  All these functions are "
"building blocks that we will find and use again and again."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:6026
#, no-wrap
msgid "New Body for @code{insert-buffer}"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:6027
#, no-wrap
msgid "insert-buffer, new version body"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:6028
#, no-wrap
msgid "new version body for insert-buffer"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6031
msgid "The body in the GNU Emacs 22 version is more confusing than the original."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6034
msgid "It consists of two expressions,"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:6041
#, no-wrap
msgid ""
"  (push-mark\n"
"   (save-excursion\n"
"     (insert-buffer-substring (get-buffer buffer))\n"
"     (point)))\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:6043
#, no-wrap
msgid "   nil\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6049
msgid ""
"except, and this is what confuses novices, very important work is done "
"inside the @code{push-mark} expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6056
msgid ""
"The @code{get-buffer} function returns a buffer with the name provided.  You "
"will note that the function is @emph{not} called @code{get-buffer-create}; "
"it does not create a buffer if one does not already exist.  The buffer "
"returned by @code{get-buffer}, an existing buffer, is passed to "
"@code{insert-buffer-substring}, which inserts the whole of the buffer (since "
"you did not specify anything else)."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6062
msgid ""
"The location into which the buffer is inserted is recorded by "
"@code{push-mark}.  Then the function returns @code{nil}, the value of its "
"last command.  Put another way, the @code{insert-buffer} function exists "
"only to produce a side effect, inserting another buffer, not to return any "
"value."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6071
msgid ""
"The basic structure of the @code{beginning-of-buffer} function has already "
"been discussed.  (@xref{simplified-beginning-of-buffer, , A Simplified "
"@code{beginning-of-buffer} Definition}.)  This section describes the complex "
"part of the definition."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6085
msgid ""
"As previously described, when invoked without an argument, "
"@code{beginning-of-buffer} moves the cursor to the beginning of the buffer "
"(in truth, the beginning of the accessible portion of the buffer), leaving "
"the mark at the previous position.  However, when the command is invoked "
"with a number between one and ten, the function considers that number to be "
"a fraction of the length of the buffer, measured in tenths, and Emacs moves "
"the cursor that fraction of the way from the beginning of the buffer.  Thus, "
"you can either call this function with the key command @kbd{M-<}, which will "
"move the cursor to the beginning of the buffer, or with a key command such "
"as @kbd{C-u 7 M-<} which will move the cursor to a point 70% of the way "
"through the buffer.  If a number bigger than ten is used for the argument, "
"it moves to the end of the buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6088
msgid ""
"The @code{beginning-of-buffer} function can be called with or without an "
"argument.  The use of the argument is optional."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:6095 emacs-lisp-intro.texi:6096
#, no-wrap
msgid "Optional Arguments"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6102
msgid ""
"Unless told otherwise, Lisp expects that a function with an argument in its "
"function definition will be called with a value for that argument.  If that "
"does not happen, you get an error and a message that says @samp{Wrong number "
"of arguments}."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:6103
#, no-wrap
msgid "Optional arguments"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:6104
#, no-wrap
msgid "Keyword"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:6105
#, no-wrap
msgid "optional"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6112
msgid ""
"However, optional arguments are a feature of Lisp: a particular "
"@dfn{keyword} is used to tell the Lisp interpreter that an argument is "
"optional.  The keyword is @code{&optional}.  (The @samp{&} in front of "
"@samp{optional} is part of the keyword.)  In a function definition, if an "
"argument follows the keyword @code{&optional}, no value need be passed to "
"that argument when the function is called."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6116
msgid ""
"The first line of the function definition of @code{beginning-of-buffer} "
"therefore looks like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:6119
#, no-wrap
msgid "(defun beginning-of-buffer (&optional arg)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6123
msgid "In outline, the whole function looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:6139
#, no-wrap
msgid ""
"(defun beginning-of-buffer (&optional arg)\n"
"  \"@var{documentation}@dots{}\"\n"
"  (interactive \"P\")\n"
"  (or (@var{is-the-argument-a-cons-cell} arg)\n"
"      (and @var{are-both-transient-mark-mode-and-mark-active-true})\n"
"      (push-mark))\n"
"  (let (@var{determine-size-and-set-it})\n"
"  (goto-char\n"
"    (@var{if-there-is-an-argument}\n"
"        @var{figure-out-where-to-go}\n"
"      @var{else-go-to}\n"
"      (point-min))))\n"
"   @var{do-nicety}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6147
msgid ""
"The function is similar to the @code{simplified-beginning-of-buffer} "
"function except that the @code{interactive} expression has @code{\"P\"} as "
"an argument and the @code{goto-char} function is followed by an if-then-else "
"expression that figures out where to put the cursor if there is an argument "
"that is not a cons cell."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6153
msgid ""
"(Since I do not explain a cons cell for many more chapters, please consider "
"ignoring the function @code{consp}.  @xref{List Implementation, , How Lists "
"are Implemented}, and @ref{Cons Cell Type, , Cons Cell and List Types, "
"elisp, The GNU Emacs Lisp Reference Manual}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6161
msgid ""
"The @code{\"P\"} in the @code{interactive} expression tells Emacs to pass a "
"prefix argument, if there is one, to the function in raw form.  A prefix "
"argument is made by typing the @key{META} key followed by a number, or by "
"typing @kbd{C-u} and then a number.  (If you don't type a number, @kbd{C-u} "
"defaults to a cons cell with a 4.  A lowercase @code{\"p\"} in the "
"@code{interactive} expression causes the function to convert a prefix arg to "
"a number.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6177
msgid ""
"The true-or-false-test of the @code{if} expression looks complex, but it is "
"not: it checks whether @code{arg} has a value that is not @code{nil} and "
"whether it is a cons cell.  (That is what @code{consp} does; it checks "
"whether its argument is a cons cell.)  If @code{arg} has a value that is not "
"@code{nil} (and is not a cons cell), which will be the case if "
"@code{beginning-of-buffer} is called with a numeric argument, then this "
"true-or-false-test will return true and the then-part of the @code{if} "
"expression will be evaluated.  On the other hand, if "
"@code{beginning-of-buffer} is not called with an argument, the value of "
"@code{arg} will be @code{nil} and the else-part of the @code{if} expression "
"will be evaluated.  The else-part is simply @code{point-min}, and when this "
"is the outcome, the whole @code{goto-char} expression is @code{(goto-char "
"(point-min))}, which is how we saw the @code{beginning-of-buffer} function "
"in its simplified form."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6186
msgid ""
"When @code{beginning-of-buffer} is called with an argument, an expression is "
"evaluated which calculates what value to pass to @code{goto-char}.  This "
"expression is rather complicated at first sight.  It includes an inner "
"@code{if} expression and much arithmetic.  It looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:6197
#, no-wrap
msgid ""
"(if (> (buffer-size) 10000)\n"
"    ;; @r{Avoid overflow for large buffer sizes!}\n"
"                          (* (prefix-numeric-value arg)\n"
"                             (/ size 10))\n"
"  (/\n"
"   (+ 10\n"
"      (*\n"
"       size (prefix-numeric-value arg))) 10)))\n"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:6207
#, no-wrap
msgid "Disentangle beginning-of-buffer"
msgstr ""

#. type: unnumberedsubsubsec
#: emacs-lisp-intro.texi:6208
#, no-wrap
msgid "Disentangle @code{beginning-of-buffer}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6215
msgid ""
"Like other complex-looking expressions, the conditional expression within "
"@code{beginning-of-buffer} can be disentangled by looking at it as parts of "
"a template, in this case, the template for an if-then-else expression.  In "
"skeletal form, the expression looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:6221
#, no-wrap
msgid ""
"(if (@var{buffer-is-large}\n"
"    @var{divide-buffer-size-by-10-and-multiply-by-arg}\n"
"  @var{else-use-alternate-calculation}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6233
msgid ""
"The true-or-false-test of this inner @code{if} expression checks the size of "
"the buffer.  The reason for this is that the old version 18 Emacs used "
"numbers that are no bigger than eight million or so and in the computation "
"that followed, the programmer feared that Emacs might try to use over-large "
"numbers if the buffer were large.  The term `overflow', mentioned in the "
"comment, means numbers that are over large.  More recent versions of Emacs "
"use larger numbers, but this code has not been touched, if only because "
"people now look at buffers that are far, far larger than ever before."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6235
msgid "There are two cases: if the buffer is large and if it is not."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:6236
#, no-wrap
msgid "Large buffer case"
msgstr ""

#. type: unnumberedsubsubsec
#: emacs-lisp-intro.texi:6237
#, no-wrap
msgid "What happens in a large buffer"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6243
msgid ""
"In @code{beginning-of-buffer}, the inner @code{if} expression tests whether "
"the size of the buffer is greater than 10,000 characters.  To do this, it "
"uses the @code{>} function and the computation of @code{size} that comes "
"from the let expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6250
msgid ""
"In the old days, the function @code{buffer-size} was used.  Not only was "
"that function called several times, it gave the size of the whole buffer, "
"not the accessible part.  The computation makes much more sense when it "
"handles just the accessible part.  (@xref{Narrowing & Widening, , Narrowing "
"and Widening}, for more information on focusing attention to an `accessible' "
"part.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6253
msgid "The line looks like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:6256
#, no-wrap
msgid "(if (> size 10000)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6262
msgid ""
"When the buffer is large, the then-part of the @code{if} expression is "
"evaluated.  It reads like this (after formatting for easy reading):"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:6268
#, no-wrap
msgid ""
"(*\n"
"  (prefix-numeric-value arg)\n"
"  (/ size 10))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6274
msgid ""
"This expression is a multiplication, with two arguments to the function "
"@code{*}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6281
msgid ""
"The first argument is @code{(prefix-numeric-value arg)}.  When @code{\"P\"} "
"is used as the argument for @code{interactive}, the value passed to the "
"function as its argument is passed a ``raw prefix argument'', and not a "
"number.  (It is a number in a list.)  To perform the arithmetic, a "
"conversion is necessary, and @code{prefix-numeric-value} does the job."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:6282
#, no-wrap
msgid "/ @r{(division)}"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:6283
#, no-wrap
msgid "Division"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6290
msgid ""
"The second argument is @code{(/ size 10)}.  This expression divides the "
"numeric value by ten---the numeric value of the size of the accessible "
"portion of the buffer.  This produces a number that tells how many "
"characters make up one tenth of the buffer size.  (In Lisp, @code{/} is used "
"for division, just as @code{*} is used for multiplication.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6294
msgid ""
"In the multiplication expression as a whole, this amount is multiplied by "
"the value of the prefix argument---the multiplication looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:6299
#, no-wrap
msgid ""
"(* @var{numeric-value-of-prefix-arg}\n"
"   @var{number-of-characters-in-one-tenth-of-the-accessible-buffer})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6305
msgid ""
"If, for example, the prefix argument is @samp{7}, the one-tenth value will "
"be multiplied by 7 to give a position 70% of the way through."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6309
msgid ""
"The result of all this is that if the accessible portion of the buffer is "
"large, the @code{goto-char} expression reads like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:6314
#, no-wrap
msgid ""
"(goto-char (* (prefix-numeric-value arg)\n"
"              (/ size 10)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6318
msgid "This puts the cursor where we want it."
msgstr ""

#. type: unnumberedsubsubsec
#: emacs-lisp-intro.texi:6320
#, no-wrap
msgid "What happens in a small buffer"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6327
msgid ""
"If the buffer contains fewer than 10,000 characters, a slightly different "
"computation is performed.  You might think this is not necessary, since the "
"first computation could do the job.  However, in a small buffer, the first "
"method may not put the cursor on exactly the desired line; the second method "
"does a better job."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6330 emacs-lisp-intro.texi:14844 emacs-lisp-intro.texi:19326 emacs-lisp-intro.texi:19466 emacs-lisp-intro.texi:20329
msgid "The code looks like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:6334
#, no-wrap
msgid "(/ (+ 10 (* size (prefix-numeric-value arg))) 10))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6342
msgid ""
"This is code in which you figure out what happens by discovering how the "
"functions are embedded in parentheses.  It is easier to read if you reformat "
"it with each expression indented more deeply than its enclosing expression:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:6351
#, no-wrap
msgid ""
"  (/\n"
"   (+ 10\n"
"      (*\n"
"       size\n"
"       (prefix-numeric-value arg)))\n"
"   10))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6360
msgid ""
"Looking at parentheses, we see that the innermost operation is "
"@code{(prefix-numeric-value arg)}, which converts the raw argument to a "
"number.  In the following expression, this number is multiplied by the size "
"of the accessible portion of the buffer:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:6363
#, no-wrap
msgid "(* size (prefix-numeric-value arg))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6371
msgid ""
"This multiplication creates a number that may be larger than the size of the "
"buffer---seven times larger if the argument is 7, for example.  Ten is then "
"added to this number and finally the large number is divided by ten to "
"provide a value that is one character larger than the percentage position in "
"the buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6374
msgid ""
"The number that results from all this is passed to @code{goto-char} and the "
"cursor is moved to that point."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:6377
#, no-wrap
msgid "The Complete @code{beginning-of-buffer}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6381
msgid "Here is the complete text of the @code{beginning-of-buffer} function:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:6393
#, no-wrap
msgid ""
"(defun beginning-of-buffer (&optional arg)\n"
"  \"Move point to the beginning of the buffer;\n"
"leave mark at previous position.\n"
"With \\\\[universal-argument] prefix,\n"
"do not set mark at previous position.\n"
"With numeric arg N,\n"
"put point N/10 of the way from the beginning.\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:6397
#, no-wrap
msgid ""
"If the buffer is narrowed,\n"
"this command uses the beginning and size\n"
"of the accessible part of the buffer.\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:6407
#, no-wrap
msgid ""
"Don't use this command in Lisp programs!\n"
"\\(goto-char (point-min)) is faster\n"
"and avoids clobbering the mark.\"\n"
"  (interactive \"P\")\n"
"  (or (consp arg)\n"
"      (and transient-mark-mode mark-active)\n"
"      (push-mark))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:6420
#, no-wrap
msgid ""
"  (let ((size (- (point-max) (point-min))))\n"
"    (goto-char (if (and arg (not (consp arg)))\n"
"                   (+ (point-min)\n"
"                      (if (> size 10000)\n"
"                          ;; Avoid overflow for large buffer sizes!\n"
"                          (* (prefix-numeric-value arg)\n"
"                             (/ size 10))\n"
"                        (/ (+ 10 (* size (prefix-numeric-value arg)))\n"
"                           10)))\n"
"                 (point-min))))\n"
"  (if arg (forward-line 1)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:6432
#, no-wrap
msgid ""
"(defun beginning-of-buffer (&optional arg)\n"
"  \"Move point to the beginning of the buffer;\n"
"leave mark at previous position.\n"
"With arg N, put point N/10 of the way\n"
"from the true beginning.\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:6439
#, no-wrap
msgid ""
"Don't use this in Lisp programs!\n"
"\\(goto-char (point-min)) is faster\n"
"and does not set the mark.\"\n"
"  (interactive \"P\")\n"
"  (push-mark)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:6447
#, no-wrap
msgid ""
"  (goto-char\n"
"   (if arg\n"
"       (if (> (buffer-size) 10000)\n"
"           ;; @r{Avoid overflow for large buffer sizes!}\n"
"           (* (prefix-numeric-value arg)\n"
"              (/ (buffer-size) 10))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:6454
#, no-wrap
msgid ""
"         (/ (+ 10 (* (buffer-size)\n"
"                     (prefix-numeric-value arg)))\n"
"            10))\n"
"     (point-min)))\n"
"  (if arg (forward-line 1)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6463
msgid ""
"Except for two small points, the previous discussion shows how this function "
"works.  The first point deals with a detail in the documentation string, and "
"the second point concerns the last line of the function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6466
msgid "In the documentation string, there is reference to an expression:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:6469
#, no-wrap
msgid "\\\\[universal-argument]\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6479
msgid ""
"A @samp{\\\\} is used before the first square bracket of this expression.  "
"This @samp{\\\\} tells the Lisp interpreter to substitute whatever key is "
"currently bound to the @samp{[@dots{}]}.  In the case of "
"@code{universal-argument}, that is usually @kbd{C-u}, but it might be "
"different.  (@xref{Documentation Tips, , Tips for Documentation Strings, "
"elisp, The GNU Emacs Lisp Reference Manual}, for more information.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6484
msgid ""
"Finally, the last line of the @code{beginning-of-buffer} command says to "
"move point to the beginning of the next line if the command is invoked with "
"an argument:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:6487
#, no-wrap
msgid "(if arg (forward-line 1)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6496
msgid ""
"This puts the cursor at the beginning of the first line after the "
"appropriate tenths position in the buffer.  This is a flourish that means "
"that the cursor is always located @emph{at least} the requested tenths of "
"the way through the buffer, which is a nicety that is, perhaps, not "
"necessary, but which, if it did not occur, would be sure to draw complaints."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6503
msgid ""
"On the other hand, it also means that if you specify the command with a "
"@kbd{C-u}, but without a number, that is to say, if the `raw prefix "
"argument' is simply a cons cell, then the command puts you at the beginning "
"of the second line @dots{} I don't know whether this is intended or whether "
"no one has dealt with the code to avoid this happening."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:6504
#, no-wrap
msgid "Second Buffer Related Review"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6508
msgid "Here is a brief summary of some of the topics covered in this chapter."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:6516
msgid ""
"Evaluate each argument in sequence, and return the value of the first "
"argument that is not @code{nil}; if none return a value that is not "
"@code{nil}, return @code{nil}.  In brief, return the first true value of the "
"arguments; return a true value if one @emph{or} any of the others are true."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:6517 emacs-lisp-intro.texi:9007 emacs-lisp-intro.texi:13100
#, no-wrap
msgid "and"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:6523
msgid ""
"Evaluate each argument in sequence, and if any are @code{nil}, return "
"@code{nil}; if none are @code{nil}, return the value of the last argument.  "
"In brief, return a true value only if all the arguments are true; return a "
"true value if one @emph{and} each of the others is true."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:6524
#, no-wrap
msgid "&optional"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:6528
msgid ""
"A keyword used to indicate that an argument to a function definition is "
"optional; this means that the function can be evaluated without the "
"argument, if desired."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:6529
#, no-wrap
msgid "prefix-numeric-value"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:6532
msgid ""
"Convert the `raw prefix argument' produced by @code{(interactive \"P\")} to "
"a numeric value."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:6533
#, no-wrap
msgid "forward-line"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:6539
msgid ""
"Move point forward to the beginning of the next line, or if the argument is "
"greater than one, forward that many lines.  If it can't move as far forward "
"as it is supposed to, @code{forward-line} goes forward as far as it can and "
"then returns a count of the number of additional lines it was supposed to "
"move but couldn't."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:6540
#, no-wrap
msgid "erase-buffer"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:6542
msgid "Delete the entire contents of the current buffer."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:6543
#, no-wrap
msgid "bufferp"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:6545
msgid "Return @code{t} if its argument is a buffer; otherwise return @code{nil}."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:6548
#, no-wrap
msgid "@code{optional} Argument Exercise"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6555
msgid ""
"Write an interactive function with an optional argument that tests whether "
"its argument, a number, is greater than or equal to, or else, less than the "
"value of @code{fill-column}, and tells you which, in a message.  However, if "
"you do not pass an argument to the function, use 56 as a default value."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:6558
#, no-wrap
msgid "Focusing attention (narrowing)"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:6559
#, no-wrap
msgid "Narrowing"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:6560
#, no-wrap
msgid "Widening"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6566
msgid ""
"Narrowing is a feature of Emacs that makes it possible for you to focus on a "
"specific part of a buffer, and work without accidentally changing other "
"parts.  Narrowing is normally disabled since it can confuse novices."
msgstr ""

#. type: unnumberedsec
#: emacs-lisp-intro.texi:6576
#, no-wrap
msgid "The Advantages of Narrowing"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6588
msgid ""
"With narrowing, the rest of a buffer is made invisible, as if it weren't "
"there.  This is an advantage if, for example, you want to replace a word in "
"one part of a buffer but not in another: you narrow to the part you want and "
"the replacement is carried out only in that section, not in the rest of the "
"buffer.  Searches will only work within a narrowed region, not outside of "
"one, so if you are fixing a part of a document, you can keep yourself from "
"accidentally finding parts you do not need to fix by narrowing just to the "
"region you want.  (The key binding for @code{narrow-to-region} is @kbd{C-x n "
"n}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6597
msgid ""
"However, narrowing does make the rest of the buffer invisible, which can "
"scare people who inadvertently invoke narrowing and think they have deleted "
"a part of their file.  Moreover, the @code{undo} command (which is usually "
"bound to @kbd{C-x u}) does not turn off narrowing (nor should it), so people "
"can become quite desperate if they do not know that they can return the rest "
"of a buffer to visibility with the @code{widen} command.  (The key binding "
"for @code{widen} is @kbd{C-x n w}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6608
msgid ""
"Narrowing is just as useful to the Lisp interpreter as to a human.  Often, "
"an Emacs Lisp function is designed to work on just part of a buffer; or "
"conversely, an Emacs Lisp function needs to work on all of a buffer that has "
"been narrowed.  The @code{what-line} function, for example, removes the "
"narrowing from a buffer, if it has any narrowing and when it has finished "
"its job, restores the narrowing to what it was.  On the other hand, the "
"@code{count-lines} function uses narrowing to restrict itself to just that "
"portion of the buffer in which it is interested and then restores the "
"previous situation."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:6610
#, no-wrap
msgid "The @code{save-restriction} Special Form"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6625
msgid ""
"In Emacs Lisp, you can use the @code{save-restriction} special form to keep "
"track of whatever narrowing is in effect, if any.  When the Lisp interpreter "
"meets with @code{save-restriction}, it executes the code in the body of the "
"@code{save-restriction} expression, and then undoes any changes to narrowing "
"that the code caused.  If, for example, the buffer is narrowed and the code "
"that follows @code{save-restriction} gets rid of the narrowing, "
"@code{save-restriction} returns the buffer to its narrowed region "
"afterwards.  In the @code{what-line} command, any narrowing the buffer may "
"have is undone by the @code{widen} command that immediately follows the "
"@code{save-restriction} command.  Any original narrowing is restored just "
"before the completion of the function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6628
msgid "The template for a @code{save-restriction} expression is simple:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:6633
#, no-wrap
msgid ""
"(save-restriction\n"
"  @var{body}@dots{} )\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6639
msgid ""
"The body of the @code{save-restriction} is one or more expressions that will "
"be evaluated in sequence by the Lisp interpreter."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6647
msgid ""
"Finally, a point to note: when you use both @code{save-excursion} and "
"@code{save-restriction}, one right after the other, you should use "
"@code{save-excursion} outermost.  If you write them in reverse order, you "
"may fail to record narrowing in the buffer to which Emacs switches after "
"calling @code{save-excursion}.  Thus, when written together, "
"@code{save-excursion} and @code{save-restriction} should be written like "
"this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:6653
#, no-wrap
msgid ""
"(save-excursion\n"
"  (save-restriction\n"
"    @var{body}@dots{}))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6659
msgid ""
"In other circumstances, when not written together, the @code{save-excursion} "
"and @code{save-restriction} special forms must be written in the order "
"appropriate to the function."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:6669
#, no-wrap
msgid ""
"  (save-restriction\n"
"    (widen)\n"
"    (save-excursion\n"
"    @var{body}@dots{}))\n"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:6729
#, no-wrap
msgid "Widening, example of"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6735
msgid ""
"The @code{what-line} command tells you the number of the line in which the "
"cursor is located.  The function illustrates the use of the "
"@code{save-restriction} and @code{save-excursion} commands.  Here is the "
"original text of the function:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:6747
#, no-wrap
msgid ""
"(defun what-line ()\n"
"  \"Print the current line number (in the buffer) of point.\"\n"
"  (interactive)\n"
"  (save-restriction\n"
"    (widen)\n"
"    (save-excursion\n"
"      (beginning-of-line)\n"
"      (message \"Line %d\"\n"
"               (1+ (count-lines 1 (point)))))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6758
msgid ""
"(In recent versions of GNU Emacs, the @code{what-line} function has been "
"expanded to tell you your line number in a narrowed buffer as well as your "
"line number in a widened buffer.  The recent version is more complex than "
"the version shown here.  If you feel adventurous, you might want to look at "
"it after figuring out how this version works.  You will probably need to use "
"@kbd{C-h f} (@code{describe-function}).  The newer version uses a "
"conditional to determine whether the buffer has been narrowed."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6763
msgid ""
"(Also, it uses @code{line-number-at-pos}, which among other simple "
"expressions, such as @code{(goto-char (point-min))}, moves point to the "
"beginning of the current line with @code{(forward-line 0)} rather than "
"@code{beginning-of-line}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6767
msgid ""
"The @code{what-line} function as shown here has a documentation line and is "
"interactive, as you would expect.  The next two lines use the functions "
"@code{save-restriction} and @code{widen}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6771
msgid ""
"The @code{save-restriction} special form notes whatever narrowing is in "
"effect, if any, in the current buffer and restores that narrowing after the "
"code in the body of the @code{save-restriction} has been evaluated."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6781
msgid ""
"The @code{save-restriction} special form is followed by @code{widen}.  This "
"function undoes any narrowing the current buffer may have had when "
"@code{what-line} was called.  (The narrowing that was there is the narrowing "
"that @code{save-restriction} remembers.)  This widening makes it possible "
"for the line counting commands to count from the beginning of the buffer.  "
"Otherwise, they would have been limited to counting within the accessible "
"region.  Any original narrowing is restored just before the completion of "
"the function by the @code{save-restriction} special form."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6786
msgid ""
"The call to @code{widen} is followed by @code{save-excursion}, which saves "
"the location of the cursor (i.e., of point) and of the mark, and restores "
"them after the code in the body of the @code{save-excursion} uses the "
"@code{beginning-of-line} function to move point."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6791
msgid ""
"(Note that the @code{(widen)} expression comes between the "
"@code{save-restriction} and @code{save-excursion} special forms.  When you "
"write the two @code{save- @dots{}} expressions in sequence, write "
"@code{save-excursion} outermost.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6796
msgid ""
"The last two lines of the @code{what-line} function are functions to count "
"the number of lines in the buffer and then print the number in the echo "
"area."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:6801
#, no-wrap
msgid ""
"(message \"Line %d\"\n"
"         (1+ (count-lines 1 (point)))))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6810
msgid ""
"The @code{message} function prints a one-line message at the bottom of the "
"Emacs screen.  The first argument is inside of quotation marks and is "
"printed as a string of characters.  However, it may contain a @samp{%d} "
"expression to print a following argument.  @samp{%d} prints the argument as "
"a decimal, so the message will say something such as @samp{Line 243}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6814
msgid ""
"The number that is printed in place of the @samp{%d} is computed by the last "
"line of the function:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:6817
#, no-wrap
msgid "(1+ (count-lines 1 (point)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6853
msgid ""
"What this does is count the lines from the first position of the buffer, "
"indicated by the @code{1}, up to @code{(point)}, and then add one to that "
"number.  (The @code{1+} function adds one to its argument.)  We add one to "
"it because line 2 has only one line before it, and @code{count-lines} counts "
"only the lines @emph{before} the current line."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6858
msgid ""
"After @code{count-lines} has done its job, and the message has been printed "
"in the echo area, the @code{save-excursion} restores point and mark to their "
"original positions; and @code{save-restriction} restores the original "
"narrowing, if any."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:6860
#, no-wrap
msgid "Exercise with Narrowing"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6869
msgid ""
"Write a function that will display the first 60 characters of the current "
"buffer, even if you have narrowed the buffer to its latter half so that the "
"first line is inaccessible.  Restore point, mark, and narrowing.  For this "
"exercise, you need to use a whole potpourri of functions, including "
"@code{save-restriction}, @code{widen}, @code{goto-char}, @code{point-min}, "
"@code{message}, and @code{buffer-substring}."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:6870
#, no-wrap
msgid "Properties, mention of @code{buffer-substring-no-properties}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6878
msgid ""
"(@code{buffer-substring} is a previously unmentioned function you will have "
"to investigate yourself; or perhaps you will have to use "
"@code{buffer-substring-no-properties} or @code{filter-buffer-substring} "
"@dots{}, yet other functions.  Text properties are a feature otherwise not "
"discussed here.  @xref{Text Properties, , Text Properties, elisp, The GNU "
"Emacs Lisp Reference Manual}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6881
msgid ""
"Additionally, do you really need @code{goto-char} or @code{point-min}? Or "
"can you write the function without them?"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:6884
#, no-wrap
msgid "car, @r{introduced}"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:6885
#, no-wrap
msgid "cdr, @r{introduced}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6890
msgid ""
"In Lisp, @code{car}, @code{cdr}, and @code{cons} are fundamental functions.  "
"The @code{cons} function is used to construct lists, and the @code{car} and "
"@code{cdr} functions are used to take them apart."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6894
msgid ""
"In the walk through of the @code{copy-region-as-kill} function, we will see "
"@code{cons} as well as two variants on @code{cdr}, namely, @code{setcdr} and "
"@code{nthcdr}.  (@xref{copy-region-as-kill}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6925
msgid ""
"The name of the @code{cons} function is not unreasonable: it is an "
"abbreviation of the word `construct'.  The origins of the names for "
"@code{car} and @code{cdr}, on the other hand, are esoteric: @code{car} is an "
"acronym from the phrase `Contents of the Address part of the Register'; and "
"@code{cdr} (pronounced `could-er') is an acronym from the phrase `Contents "
"of the Decrement part of the Register'.  These phrases refer to specific "
"pieces of hardware on the very early computer on which the original Lisp was "
"developed.  Besides being obsolete, the phrases have been completely "
"irrelevant for more than 25 years to anyone thinking about Lisp.  "
"Nonetheless, although a few brave scholars have begun to use more reasonable "
"names for these functions, the old terms are still in use.  In particular, "
"since the terms are used in the Emacs Lisp source code, we will use them in "
"this introduction."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:6927
#, no-wrap
msgid "@code{car} and @code{cdr}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6932
msgid ""
"The @sc{car} of a list is, quite simply, the first item in the list.  Thus "
"the @sc{car} of the list @code{(rose violet daisy buttercup)} is "
"@code{rose}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6936
msgid ""
"If you are reading this in Info in GNU Emacs, you can see this by evaluating "
"the following:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:6939
#, no-wrap
msgid "(car '(rose violet daisy buttercup))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6944
msgid "After evaluating the expression, @code{rose} will appear in the echo area."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6947
msgid ""
"Clearly, a more reasonable name for the @code{car} function would be "
"@code{first} and this is often suggested."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6952
msgid ""
"@code{car} does not remove the first item from the list; it only reports "
"what it is.  After @code{car} has been applied to a list, the list is still "
"the same as it was.  In the jargon, @code{car} is `non-destructive'.  This "
"feature turns out to be important."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6959
msgid ""
"The @sc{cdr} of a list is the rest of the list, that is, the @code{cdr} "
"function returns the part of the list that follows the first item.  Thus, "
"while the @sc{car} of the list @code{'(rose violet daisy buttercup)} is "
"@code{rose}, the rest of the list, the value returned by the @code{cdr} "
"function, is @code{(violet daisy buttercup)}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6962
msgid "You can see this by evaluating the following in the usual way:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:6965
#, no-wrap
msgid "(cdr '(rose violet daisy buttercup))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6970
msgid ""
"When you evaluate this, @code{(violet daisy buttercup)} will appear in the "
"echo area."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6974
msgid ""
"Like @code{car}, @code{cdr} does not remove any elements from the list---it "
"just returns a report of what the second and subsequent elements are."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6978
msgid ""
"Incidentally, in the example, the list of flowers is quoted.  If it were "
"not, the Lisp interpreter would try to evaluate the list by calling "
"@code{rose} as a function.  In this example, we do not want to do that."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6980
msgid "Clearly, a more reasonable name for @code{cdr} would be @code{rest}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6988
msgid ""
"(There is a lesson here: when you name new functions, consider very "
"carefully what you are doing, since you may be stuck with the names for far "
"longer than you expect.  The reason this document perpetuates these names is "
"that the Emacs Lisp source code uses them, and if I did not use them, you "
"would have a hard time reading the code; but do, please, try to avoid using "
"these terms yourself.  The people who come after you will be grateful to "
"you.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:6996
msgid ""
"When @code{car} and @code{cdr} are applied to a list made up of symbols, "
"such as the list @code{(pine fir oak maple)}, the element of the list "
"returned by the function @code{car} is the symbol @code{pine} without any "
"parentheses around it.  @code{pine} is the first element in the list.  "
"However, the @sc{cdr} of the list is a list itself, @code{(fir oak maple)}, "
"as you can see by evaluating the following expressions in the usual way:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7000
#, no-wrap
msgid ""
"(car '(pine fir oak maple))\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7002
#, no-wrap
msgid "(cdr '(pine fir oak maple))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7009
msgid ""
"On the other hand, in a list of lists, the first element is itself a list.  "
"@code{car} returns this first element as a list.  For example, the following "
"list contains three sub-lists, a list of carnivores, a list of herbivores "
"and a list of sea mammals:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7015
#, no-wrap
msgid ""
"(car '((lion tiger cheetah)\n"
"       (gazelle antelope zebra)\n"
"       (whale dolphin seal)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7022
msgid ""
"In this example, the first element or @sc{car} of the list is the list of "
"carnivores, @code{(lion tiger cheetah)}, and the rest of the list is "
"@code{((gazelle antelope zebra) (whale dolphin seal))}."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7028
#, no-wrap
msgid ""
"(cdr '((lion tiger cheetah)\n"
"       (gazelle antelope zebra)\n"
"       (whale dolphin seal)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7034
msgid ""
"It is worth saying again that @code{car} and @code{cdr} are "
"non-destructive---that is, they do not modify or change lists to which they "
"are applied.  This is very important for how they are used."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7047
msgid ""
"Also, in the first chapter, in the discussion about atoms, I said that in "
"Lisp, ``certain kinds of atom, such as an array, can be separated into "
"parts; but the mechanism for doing this is different from the mechanism for "
"splitting a list.  As far as Lisp is concerned, the atoms of a list are "
"unsplittable.'' (@xref{Lisp Atoms}.)  The @code{car} and @code{cdr} "
"functions are used for splitting lists and are considered fundamental to "
"Lisp.  Since they cannot split or gain access to the parts of an array, an "
"array is considered an atom.  Conversely, the other fundamental function, "
"@code{cons}, can put together or construct a list, but not an array.  "
"(Arrays are handled by array-specific functions.  @xref{Arrays, , Arrays, "
"elisp, The GNU Emacs Lisp Reference Manual}.)"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:7050
#, no-wrap
msgid "cons, @r{introduced}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7055
msgid ""
"The @code{cons} function constructs lists; it is the inverse of @code{car} "
"and @code{cdr}.  For example, @code{cons} can be used to make a four element "
"list from the three element list, @code{(fir oak maple)}:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:7058
#, no-wrap
msgid "(cons 'pine '(fir oak maple))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7063
msgid "After evaluating this list, you will see"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:7066
#, no-wrap
msgid "(pine fir oak maple)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7072
msgid ""
"appear in the echo area.  @code{cons} causes the creation of a new list in "
"which the element is followed by the elements of the original list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7077
msgid ""
"We often say that `@code{cons} puts a new element at the beginning of a "
"list; it attaches or pushes elements onto the list', but this phrasing can "
"be misleading, since @code{cons} does not change an existing list, but "
"creates a new one."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7079
msgid "Like @code{car} and @code{cdr}, @code{cons} is non-destructive."
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:7086 emacs-lisp-intro.texi:7087
#, no-wrap
msgid "Build a list"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7100
msgid ""
"@code{cons} must have a list to attach to.@footnote{Actually, you can "
"@code{cons} an element to an atom to produce a dotted pair.  Dotted pairs "
"are not discussed here; see @ref{Dotted Pair Notation, , Dotted Pair "
"Notation, elisp, The GNU Emacs Lisp Reference Manual}.} You cannot start "
"from absolutely nothing.  If you are building a list, you need to provide at "
"least an empty list at the beginning.  Here is a series of @code{cons} "
"expressions that build up a list of flowers.  If you are reading this in "
"Info in GNU Emacs, you can evaluate each of the expressions in the usual "
"way; the value is printed in this text after @samp{@result{}}, which you may "
"read as `evaluates to'."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7105
#, no-wrap
msgid ""
"(cons 'buttercup ())\n"
"     @result{} (buttercup)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7110
#, no-wrap
msgid ""
"(cons 'daisy '(buttercup))\n"
"     @result{} (daisy buttercup)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7115
#, no-wrap
msgid ""
"(cons 'violet '(daisy buttercup))\n"
"     @result{} (violet daisy buttercup)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7120
#, no-wrap
msgid ""
"(cons 'rose '(violet daisy buttercup))\n"
"     @result{} (rose violet daisy buttercup)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7130
msgid ""
"In the first example, the empty list is shown as @code{()} and a list made "
"up of @code{buttercup} followed by the empty list is constructed.  As you "
"can see, the empty list is not shown in the list that was constructed.  All "
"that you see is @code{(buttercup)}.  The empty list is not counted as an "
"element of a list because there is nothing in an empty list.  Generally "
"speaking, an empty list is invisible."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7135
msgid ""
"The second example, @code{(cons 'daisy '(buttercup))} constructs a new, two "
"element list by putting @code{daisy} in front of @code{buttercup}; and the "
"third example constructs a three element list by putting @code{violet} in "
"front of @code{daisy} and @code{buttercup}."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:7137
#, no-wrap
msgid "Find the Length of a List: @code{length}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7142
msgid ""
"You can find out how many elements there are in a list by using the Lisp "
"function @code{length}, as in the following examples:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7147
#, no-wrap
msgid ""
"(length '(buttercup))\n"
"     @result{} 1\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7152
#, no-wrap
msgid ""
"(length '(daisy buttercup))\n"
"     @result{} 2\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7157
#, no-wrap
msgid ""
"(length (cons 'violet '(daisy buttercup)))\n"
"     @result{} 3\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7164
msgid ""
"In the third example, the @code{cons} function is used to construct a three "
"element list which is then passed to the @code{length} function as its "
"argument."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7168
msgid ""
"We can also use @code{length} to count the number of elements in an empty "
"list:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7173
#, no-wrap
msgid ""
"(length ())\n"
"     @result{} 0\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7178
msgid "As you would expect, the number of elements in an empty list is zero."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7182
msgid ""
"An interesting experiment is to find out what happens if you try to find the "
"length of no list at all; that is, if you try to call @code{length} without "
"giving it an argument, not even an empty list:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:7185
#, no-wrap
msgid "(length )\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7190
msgid "What you see, if you evaluate this, is the error message"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:7193
#, no-wrap
msgid "Lisp error: (wrong-number-of-arguments length 0)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7201
msgid ""
"This means that the function receives the wrong number of arguments, zero, "
"when it expects some other number of arguments.  In this case, one argument "
"is expected, the argument being a list whose length the function is "
"measuring.  (Note that @emph{one} list is @emph{one} argument, even if the "
"list has many elements inside it.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7204
msgid ""
"The part of the error message that says @samp{length} is the name of the "
"function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7223
msgid ""
"The @code{nthcdr} function is associated with the @code{cdr} function.  What "
"it does is take the @sc{cdr} of a list repeatedly."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7233
msgid ""
"If you take the @sc{cdr} of the list @code{(pine fir oak maple)}, you will "
"be returned the list @code{(fir oak maple)}.  If you repeat this on what was "
"returned, you will be returned the list @code{(oak maple)}.  (Of course, "
"repeated @sc{cdr}ing on the original list will just give you the original "
"@sc{cdr} since the function does not change the list.  You need to evaluate "
"the @sc{cdr} of the @sc{cdr} and so on.)  If you continue this, eventually "
"you will be returned an empty list, which in this case, instead of being "
"shown as @code{()} is shown as @code{nil}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7237
msgid ""
"For review, here is a series of repeated @sc{cdr}s, the text following the "
"@samp{@result{}} shows what is returned."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7242
#, no-wrap
msgid ""
"(cdr '(pine fir oak maple))\n"
"     @result{}(fir oak maple)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7247
#, no-wrap
msgid ""
"(cdr '(fir oak maple))\n"
"     @result{} (oak maple)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7252
#, no-wrap
msgid ""
"(cdr '(oak maple))\n"
"     @result{}(maple)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7257
#, no-wrap
msgid ""
"(cdr '(maple))\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7262
#, no-wrap
msgid ""
"(cdr 'nil)\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7267
#, no-wrap
msgid ""
"(cdr ())\n"
"     @result{} nil\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7273
msgid ""
"You can also do several @sc{cdr}s without printing the values in between, "
"like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7278
#, no-wrap
msgid ""
"(cdr (cdr '(pine fir oak maple)))\n"
"     @result{} (oak maple)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7290
msgid ""
"In this example, the Lisp interpreter evaluates the innermost list first.  "
"The innermost list is quoted, so it just passes the list as it is to the "
"innermost @code{cdr}.  This @code{cdr} passes a list made up of the second "
"and subsequent elements of the list to the outermost @code{cdr}, which "
"produces a list composed of the third and subsequent elements of the "
"original list.  In this example, the @code{cdr} function is repeated and "
"returns a list that consists of the original list without its first two "
"elements."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7296
msgid ""
"The @code{nthcdr} function does the same as repeating the call to "
"@code{cdr}.  In the following example, the argument 2 is passed to the "
"function @code{nthcdr}, along with the list, and the value returned is the "
"list without its first two items, which is exactly the same as repeating "
"@code{cdr} twice on the list:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7301
#, no-wrap
msgid ""
"(nthcdr 2 '(pine fir oak maple))\n"
"     @result{} (oak maple)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7308
msgid ""
"Using the original four element list, we can see what happens when various "
"numeric arguments are passed to @code{nthcdr}, including 0, 1, and 5:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7314
#, no-wrap
msgid ""
";; @r{Leave the list as it was.}\n"
"(nthcdr 0 '(pine fir oak maple))\n"
"     @result{} (pine fir oak maple)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7320
#, no-wrap
msgid ""
";; @r{Return a copy without the first element.}\n"
"(nthcdr 1 '(pine fir oak maple))\n"
"     @result{} (fir oak maple)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7326
#, no-wrap
msgid ""
";; @r{Return a copy of the list without three elements.}\n"
"(nthcdr 3 '(pine fir oak maple))\n"
"     @result{} (maple)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7332
#, no-wrap
msgid ""
";; @r{Return a copy lacking all four elements.}\n"
"(nthcdr 4 '(pine fir oak maple))\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7338
#, no-wrap
msgid ""
";; @r{Return a copy lacking all elements.}\n"
"(nthcdr 5 '(pine fir oak maple))\n"
"     @result{} nil\n"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:7341 emacs-lisp-intro.texi:7342 emacs-lisp-intro.texi:7343
#, no-wrap
msgid "nth"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7348
msgid ""
"The @code{nthcdr} function takes the @sc{cdr} of a list repeatedly.  The "
"@code{nth} function takes the @sc{car} of the result returned by "
"@code{nthcdr}.  It returns the Nth element of the list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7352
msgid ""
"Thus, if it were not defined in C for speed, the definition of @code{nth} "
"would be:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7359
#, no-wrap
msgid ""
"(defun nth (n list)\n"
"  \"Returns the Nth element of LIST.\n"
"N counts from zero.  If LIST is not that long, nil is returned.\"\n"
"  (car (nthcdr n list)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7365
msgid ""
"(Originally, @code{nth} was defined in Emacs Lisp in @file{subr.el}, but its "
"definition was redone in C in the 1980s.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7368
msgid ""
"The @code{nth} function returns a single element of a list.  This can be "
"very convenient."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7374
msgid ""
"Note that the elements are numbered from zero, not one.  That is to say, the "
"first element of a list, its @sc{car} is the zeroth element.  This is called "
"`zero-based' counting and often bothers people who are accustomed to the "
"first element in a list being number one, which is `one-based'."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:7377 emacs-lisp-intro.texi:9408 emacs-lisp-intro.texi:9424 emacs-lisp-intro.texi:9449 emacs-lisp-intro.texi:9464 emacs-lisp-intro.texi:9487 emacs-lisp-intro.texi:13588 emacs-lisp-intro.texi:13640
msgid "For example:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7382
#, no-wrap
msgid ""
"(nth 0 '(\"one\" \"two\" \"three\"))\n"
"    @result{} \"one\"\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7385
#, no-wrap
msgid ""
"(nth 1 '(\"one\" \"two\" \"three\"))\n"
"    @result{} \"two\"\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7392
msgid ""
"It is worth mentioning that @code{nth}, like @code{nthcdr} and @code{cdr}, "
"does not change the original list---the function is non-destructive.  This "
"is in sharp contrast to the @code{setcar} and @code{setcdr} functions."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7402
msgid ""
"As you might guess from their names, the @code{setcar} and @code{setcdr} "
"functions set the @sc{car} or the @sc{cdr} of a list to a new value.  They "
"actually change the original list, unlike @code{car} and @code{cdr} which "
"leave the original list as it was.  One way to find out how this works is to "
"experiment.  We will start with the @code{setcar} function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7406
msgid ""
"First, we can make a list and then set the value of a variable to the list, "
"using the @code{setq} function.  Here is a list of animals:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:7409
#, no-wrap
msgid "(setq animals '(antelope giraffe lion tiger))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7422
msgid ""
"If you are reading this in Info inside of GNU Emacs, you can evaluate this "
"expression in the usual fashion, by positioning the cursor after the "
"expression and typing @kbd{C-x C-e}.  (I'm doing this right here as I write "
"this.  This is one of the advantages of having the interpreter built into "
"the computing environment.  Incidentally, when there is nothing on the line "
"after the final parentheses, such as a comment, point can be on the next "
"line.  Thus, if your cursor is in the first column of the next line, you do "
"not need to move it.  Indeed, Emacs permits any amount of white space after "
"the final parenthesis.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7426
msgid ""
"When we evaluate the variable @code{animals}, we see that it is bound to the "
"list @code{(antelope giraffe lion tiger)}:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7431
#, no-wrap
msgid ""
"animals\n"
"     @result{} (antelope giraffe lion tiger)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7437
msgid ""
"Put another way, the variable @code{animals} points to the list "
"@code{(antelope giraffe lion tiger)}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7443
msgid ""
"Next, evaluate the function @code{setcar} while passing it two arguments, "
"the variable @code{animals} and the quoted symbol @code{hippopotamus}; this "
"is done by writing the three element list @code{(setcar animals "
"'hippopotamus)} and then evaluating it in the usual fashion:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:7446
#, no-wrap
msgid "(setcar animals 'hippopotamus)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7452
msgid ""
"After evaluating this expression, evaluate the variable @code{animals} "
"again.  You will see that the list of animals has changed:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7457
#, no-wrap
msgid ""
"animals\n"
"     @result{} (hippopotamus giraffe lion tiger)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7463
msgid ""
"The first element on the list, @code{antelope} is replaced by "
"@code{hippopotamus}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7467
msgid ""
"So we can see that @code{setcar} did not add a new element to the list as "
"@code{cons} would have; it replaced @code{antelope} with "
"@code{hippopotamus}; it @emph{changed} the list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7475
msgid ""
"The @code{setcdr} function is similar to the @code{setcar} function, except "
"that the function replaces the second and subsequent elements of a list "
"rather than the first element."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7479
msgid ""
"(To see how to change the last element of a list, look ahead to "
"@ref{kill-new function, , The @code{kill-new} function}, which uses the "
"@code{nthcdr} and @code{setcdr} functions.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7483
msgid ""
"To see how this works, set the value of the variable to a list of "
"domesticated animals by evaluating the following expression:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:7486
#, no-wrap
msgid "(setq domesticated-animals '(horse cow sheep goat))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7492
msgid ""
"If you now evaluate the list, you will be returned the list @code{(horse cow "
"sheep goat)}:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7497
#, no-wrap
msgid ""
"domesticated-animals\n"
"     @result{} (horse cow sheep goat)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7504
msgid ""
"Next, evaluate @code{setcdr} with two arguments, the name of the variable "
"which has a list as its value, and the list to which the @sc{cdr} of the "
"first list will be set;"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:7507
#, no-wrap
msgid "(setcdr domesticated-animals '(cat dog))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7514
msgid ""
"If you evaluate this expression, the list @code{(cat dog)} will appear in "
"the echo area.  This is the value returned by the function.  The result we "
"are interested in is the ``side effect'', which we can see by evaluating the "
"variable @code{domesticated-animals}:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7519
#, no-wrap
msgid ""
"domesticated-animals\n"
"     @result{} (horse cat dog)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7526
msgid ""
"Indeed, the list is changed from @code{(horse cow sheep goat)} to "
"@code{(horse cat dog)}.  The @sc{cdr} of the list is changed from @code{(cow "
"sheep goat)} to @code{(cat dog)}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7534
msgid ""
"Construct a list of four birds by evaluating several expressions with "
"@code{cons}.  Find out what happens when you @code{cons} a list onto "
"itself.  Replace the first element of the list of four birds with a fish.  "
"Replace the rest of that list with a list of other fish."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:7537
#, no-wrap
msgid "Cutting and storing text"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:7538
#, no-wrap
msgid "Storing and cutting text"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:7539
#, no-wrap
msgid "Killing text"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:7540
#, no-wrap
msgid "Clipping text"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:7541
#, no-wrap
msgid "Erasing text"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:7542
#, no-wrap
msgid "Deleting text"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7547
msgid ""
"Whenever you cut or clip text out of a buffer with a `kill' command in GNU "
"Emacs, it is stored in a list and you can bring it back with a `yank' "
"command."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7555
msgid ""
"(The use of the word `kill' in Emacs for processes which specifically "
"@emph{do not} destroy the values of the entities is an unfortunate "
"historical accident.  A much more appropriate word would be `clip' since "
"that is what the kill commands do; they clip text out of a buffer and put it "
"into storage from which it can be brought back.  I have often been tempted "
"to replace globally all occurrences of `kill' in the Emacs sources with "
"`clip' and all occurrences of `killed' with `clipped'.)"
msgstr ""

#. type: unnumberedsec
#: emacs-lisp-intro.texi:7569
#, no-wrap
msgid "Storing Text in a List"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7575
msgid ""
"When text is cut out of a buffer, it is stored on a list.  Successive pieces "
"of text are stored on the list successively, so the list might look like "
"this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:7578
#, no-wrap
msgid "(\"a piece of text\" \"previous piece\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7585
msgid ""
"The function @code{cons} can be used to create a new list from a piece of "
"text (an `atom', to use the jargon) and an existing list, like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7590
#, no-wrap
msgid ""
"(cons \"another piece\"\n"
"      '(\"a piece of text\" \"previous piece\"))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7597
msgid ""
"If you evaluate this expression, a list of three elements will appear in the "
"echo area:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:7600
#, no-wrap
msgid "(\"another piece\" \"a piece of text\" \"previous piece\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7607
msgid ""
"With the @code{car} and @code{nthcdr} functions, you can retrieve whichever "
"piece of text you want.  For example, in the following code, @code{nthcdr 1 "
"@dots{}} returns the list with the first item removed; and the @code{car} "
"returns the first element of that remainder---the second element of the "
"original list:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7614
#, no-wrap
msgid ""
"(car (nthcdr 1 '(\"another piece\"\n"
"                 \"a piece of text\"\n"
"                 \"previous piece\")))\n"
"     @result{} \"a piece of text\"\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7623
msgid ""
"The actual functions in Emacs are more complex than this, of course.  The "
"code for cutting and retrieving text has to be written so that Emacs can "
"figure out which element in the list you want---the first, second, third, or "
"whatever.  In addition, when you get to the end of the list, Emacs should "
"give you the first element of the list, rather than nothing at all."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7630
msgid ""
"The list that holds the pieces of text is called the @dfn{kill ring}.  This "
"chapter leads up to a description of the kill ring and how it is used by "
"first tracing how the @code{zap-to-char} function works.  This function uses "
"(or `calls') a function that invokes a function that manipulates the kill "
"ring.  Thus, before reaching the mountains, we climb the foothills."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7633
msgid ""
"A subsequent chapter describes how text that is cut from the buffer is "
"retrieved.  @xref{Yanking, , Yanking Text Back}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7643
msgid ""
"The @code{zap-to-char} function changed little between GNU Emacs version 19 "
"and GNU Emacs version 22.  However, @code{zap-to-char} calls another "
"function, @code{kill-region}, which enjoyed a major rewrite."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7646
msgid ""
"The @code{kill-region} function in Emacs 19 is complex, but does not use "
"code that is important at this time.  We will skip it."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7650
msgid ""
"The @code{kill-region} function in Emacs 22 is easier to read than the same "
"function in Emacs 19 and introduces a very important concept, that of error "
"handling.  We will walk through the function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7652
msgid "But first, let us look at the interactive @code{zap-to-char} function."
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:7664
#, no-wrap
msgid "The Complete @code{zap-to-char} Implementation"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7677
msgid ""
"The @code{zap-to-char} function removes the text in the region between the "
"location of the cursor (i.e., of point) up to and including the next "
"occurrence of a specified character.  The text that @code{zap-to-char} "
"removes is put in the kill ring; and it can be retrieved from the kill ring "
"by typing @kbd{C-y} (@code{yank}).  If the command is given an argument, it "
"removes text through that number of occurrences.  Thus, if the cursor were "
"at the beginning of this sentence and the character were @samp{s}, "
"@samp{Thus} would be removed.  If the argument were two, @samp{Thus, if the "
"curs} would be removed, up to and including the @samp{s} in @samp{cursor}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7681
msgid ""
"If the specified character is not found, @code{zap-to-char} will say "
"``Search failed'', tell you the character you typed, and not remove any "
"text."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7686
msgid ""
"In order to determine how much text to remove, @code{zap-to-char} uses a "
"search function.  Searches are used extensively in code that manipulates "
"text, and we will focus attention on them as well as on the deletion "
"command."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7702
msgid "Here is the complete text of the version 22 implementation of the function:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7717
#, no-wrap
msgid ""
"(defun zap-to-char (arg char)\n"
"  \"Kill up to and including ARG'th occurrence of CHAR.\n"
"Case is ignored if `case-fold-search' is non-nil in the current buffer.\n"
"Goes backward if ARG is negative; error if CHAR not found.\"\n"
"  (interactive \"p\\ncZap to char: \")\n"
"  (if (char-table-p translation-table-for-input)\n"
"      (setq char (or (aref translation-table-for-input char) char)))\n"
"  (kill-region (point) (progn\n"
"                         (search-forward (char-to-string char)\n"
"                                         nil nil arg)\n"
"                         (point))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7722
msgid ""
"The documentation is thorough.  You do need to know the jargon meaning of "
"the word `kill'."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:7724
#, no-wrap
msgid "The @code{interactive} Expression"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7729
msgid ""
"The interactive expression in the @code{zap-to-char} command looks like "
"this:"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7742
msgid ""
"The part within quotation marks, @code{\"p\\ncZap to char:@: \"}, specifies "
"two different things.  First, and most simply, is the @samp{p}.  This part "
"is separated from the next part by a newline, @samp{\\n}.  The @samp{p} "
"means that the first argument to the function will be passed the value of a "
"`processed prefix'.  The prefix argument is passed by typing @kbd{C-u} and a "
"number, or @kbd{M-} and a number.  If the function is called interactively "
"without a prefix, 1 is passed to this argument."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7749
msgid ""
"The second part of @code{\"p\\ncZap to char:@: \"} is @samp{cZap to char:@: "
"}.  In this part, the lower case @samp{c} indicates that @code{interactive} "
"expects a prompt and that the argument will be a character.  The prompt "
"follows the @samp{c} and is the string @samp{Zap to char:@: } (with a space "
"after the colon to make it look good)."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7752
msgid ""
"What all this does is prepare the arguments to @code{zap-to-char} so they "
"are of the right type, and give the user a prompt."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7757
msgid ""
"In a read-only buffer, the @code{zap-to-char} function copies the text to "
"the kill ring, but does not remove it.  The echo area displays a message "
"saying that the buffer is read-only.  Also, the terminal may beep or blink "
"at you."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:7759
#, no-wrap
msgid "The Body of @code{zap-to-char}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7764
msgid ""
"The body of the @code{zap-to-char} function contains the code that kills "
"(that is, removes) the text in the region from the current position of the "
"cursor up to and including the specified character."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7766
msgid "The first part of the code looks like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:7773
#, no-wrap
msgid ""
"(if (char-table-p translation-table-for-input)\n"
"    (setq char (or (aref translation-table-for-input char) char)))\n"
"(kill-region (point) (progn\n"
"                       (search-forward (char-to-string char) nil nil arg)\n"
"                       (point)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7784
msgid ""
"@code{char-table-p} is an hitherto unseen function.  It determines whether "
"its argument is a character table.  When it is, it sets the character passed "
"to @code{zap-to-char} to one of them, if that character exists, or to the "
"character itself.  (This becomes important for certain characters in "
"non-European languages.  The @code{aref} function extracts an element from "
"an array.  It is an array-specific function that is not described in this "
"document.  @xref{Arrays, , Arrays, elisp, The GNU Emacs Lisp Reference "
"Manual}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7787
msgid "@code{(point)} is the current position of the cursor."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7791
msgid ""
"The next part of the code is an expression using @code{progn}.  The body of "
"the @code{progn} consists of calls to @code{search-forward} and "
"@code{point}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7795
msgid ""
"It is easier to understand how @code{progn} works after learning about "
"@code{search-forward}, so we will look at @code{search-forward} and then at "
"@code{progn}."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:7797
#, no-wrap
msgid "The @code{search-forward} Function"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7810
msgid ""
"The @code{search-forward} function is used to locate the "
"zapped-for-character in @code{zap-to-char}.  If the search is successful, "
"@code{search-forward} leaves point immediately after the last character in "
"the target string.  (In @code{zap-to-char}, the target string is just one "
"character long.  @code{zap-to-char} uses the function @code{char-to-string} "
"to ensure that the computer treats that character as a string.)  If the "
"search is backwards, @code{search-forward} leaves point just before the "
"first character in the target.  Also, @code{search-forward} returns @code{t} "
"for true.  (Moving point is therefore a `side effect'.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7813
msgid "In @code{zap-to-char}, the @code{search-forward} function looks like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:7816
#, no-wrap
msgid "(search-forward (char-to-string char) nil nil arg)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7819
msgid "The @code{search-forward} function takes four arguments:"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:7824
msgid ""
"The first argument is the target, what is searched for.  This must be a "
"string, such as @samp{\"z\"}."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:7837
msgid ""
"As it happens, the argument passed to @code{zap-to-char} is a single "
"character.  Because of the way computers are built, the Lisp interpreter may "
"treat a single character as being different from a string of characters.  "
"Inside the computer, a single character has a different electronic format "
"than a string of one character.  (A single character can often be recorded "
"in the computer using exactly one byte; but a string may be longer, and the "
"computer needs to be ready for this.)  Since the @code{search-forward} "
"function searches for a string, the character that the @code{zap-to-char} "
"function receives as its argument must be converted inside the computer from "
"one format to the other; otherwise the @code{search-forward} function will "
"fail.  The @code{char-to-string} function is used to make this conversion."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:7842
msgid ""
"The second argument bounds the search; it is specified as a position in the "
"buffer.  In this case, the search can go to the end of the buffer, so no "
"bound is set and the second argument is @code{nil}."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:7848
msgid ""
"The third argument tells the function what it should do if the search "
"fails---it can signal an error (and print a message) or it can return "
"@code{nil}.  A @code{nil} as the third argument causes the function to "
"signal an error when the search fails."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:7855
msgid ""
"The fourth argument to @code{search-forward} is the repeat count---how many "
"occurrences of the string to look for.  This argument is optional and if the "
"function is called without a repeat count, this argument is passed the value "
"1.  If this argument is negative, the search goes backwards."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7859
msgid "In template form, a @code{search-forward} expression looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7866
#, no-wrap
msgid ""
"(search-forward \"@var{target-string}\"\n"
"                @var{limit-of-search}\n"
"                @var{what-to-do-if-search-fails}\n"
"                @var{repeat-count})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7870
msgid "We will look at @code{progn} next."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:7872
#, no-wrap
msgid "The @code{progn} Special Form"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7879
msgid ""
"@code{progn} is a special form that causes each of its arguments to be "
"evaluated in sequence and then returns the value of the last one.  The "
"preceding expressions are evaluated only for the side effects they perform.  "
"The values produced by them are discarded."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7882
msgid "The template for a @code{progn} expression is very simple:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:7887
#, no-wrap
msgid ""
"(progn\n"
"  @var{body}@dots{})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7893
msgid ""
"In @code{zap-to-char}, the @code{progn} expression has to do two things: put "
"point in exactly the right position; and return the location of point so "
"that @code{kill-region} will know how far to kill to."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7900
msgid ""
"The first argument to the @code{progn} is @code{search-forward}.  When "
"@code{search-forward} finds the string, the function leaves point "
"immediately after the last character in the target string.  (In this case "
"the target string is just one character long.)  If the search is backwards, "
"@code{search-forward} leaves point just before the first character in the "
"target.  The movement of point is a side effect."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7910
msgid ""
"The second and last argument to @code{progn} is the expression "
"@code{(point)}.  This expression returns the value of point, which in this "
"case will be the location to which it has been moved by "
"@code{search-forward}.  (In the source, a line that tells the function to go "
"to the previous character, if it is going forward, was commented out in "
"1999; I don't remember whether that feature or mis-feature was ever a part "
"of the distributed source.)  The value of @code{point} is returned by the "
"@code{progn} expression and is passed to @code{kill-region} as "
"@code{kill-region}'s second argument."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:7912
#, no-wrap
msgid "Summing up @code{zap-to-char}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7916
msgid ""
"Now that we have seen how @code{search-forward} and @code{progn} work, we "
"can see how the @code{zap-to-char} function works as a whole."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7924
msgid ""
"The first argument to @code{kill-region} is the position of the cursor when "
"the @code{zap-to-char} command is given---the value of point at that time.  "
"Within the @code{progn}, the search function then moves point to just after "
"the zapped-to-character and @code{point} returns the value of this "
"location.  The @code{kill-region} function puts together these two values of "
"point, the first one as the beginning of the region and the second one as "
"the end of the region, and removes the region."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7931
msgid ""
"The @code{progn} special form is necessary because the @code{kill-region} "
"command takes two arguments; and it would fail if @code{search-forward} and "
"@code{point} expressions were written in sequence as two additional "
"arguments.  The @code{progn} expression is a single argument to "
"@code{kill-region} and returns the one value that @code{kill-region} needs "
"for its second argument."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:7939
msgid ""
"The @code{zap-to-char} function uses the @code{kill-region} function.  This "
"function clips text from a region and copies that text to the kill ring, "
"from which it may be retrieved."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8003
msgid ""
"The Emacs 22 version of that function uses @code{condition-case} and "
"@code{copy-region-as-kill}, both of which we will explain.  "
"@code{condition-case} is an important special form."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8009
msgid ""
"In essence, the @code{kill-region} function calls @code{condition-case}, "
"which takes three arguments.  In this function, the first argument does "
"nothing.  The second argument contains the code that does the work when all "
"goes well.  The third argument contains the code that is called in the event "
"of an error."
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:8018
#, no-wrap
msgid "The Complete @code{kill-region} Definition"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8025
msgid ""
"We will go through the @code{condition-case} code in a moment.  First, let "
"us look at the definition of @code{kill-region}, with comments added:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8033
#, no-wrap
msgid ""
"(defun kill-region (beg end)\n"
"  \"Kill (\\\"cut\\\") text between point and mark.\n"
"This deletes the text from the buffer and saves it in the kill ring.\n"
"The command \\\\[yank] can retrieve it from there. @dots{} \"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8042
#, no-wrap
msgid ""
"  ;; @bullet{} Since order matters, pass point first.\n"
"  (interactive (list (point) (mark)))\n"
"  ;; @bullet{} And tell us if we cannot cut the text.\n"
"  ;; `unless' is an `if' without a then-part.\n"
"  (unless (and beg end)\n"
"    (error \"The mark is not set now, so there is no region\"))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8050
#, no-wrap
msgid ""
"  ;; @bullet{} `condition-case' takes three arguments.\n"
"  ;;    If the first argument is nil, as it is here,\n"
"  ;;    information about the error signal is not\n"
"  ;;    stored for use by another function.\n"
"  (condition-case nil\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8055
#, no-wrap
msgid ""
"      ;; @bullet{} The second argument to `condition-case' tells the\n"
"      ;;    Lisp interpreter what to do when all goes well.\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8065
#, no-wrap
msgid ""
"      ;;    It starts with a `let' function that extracts the string\n"
"      ;;    and tests whether it exists.  If so (that is what the\n"
"      ;;    `when' checks), it calls an `if' function that determines\n"
"      ;;    whether the previous command was another call to\n"
"      ;;    `kill-region'; if it was, then the new text is appended to\n"
"      ;;    the previous text; if not, then a different function,\n"
"      ;;    `kill-new', is called.\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8071
#, no-wrap
msgid ""
"      ;;    The `kill-append' function concatenates the new string and\n"
"      ;;    the old.  The `kill-new' function inserts text into a new\n"
"      ;;    item in the kill ring.\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8080
#, no-wrap
msgid ""
"      ;;    `when' is an `if' without an else-part.  The second `when'\n"
"      ;;    again checks whether the current string exists; in\n"
"      ;;    addition, it checks whether the previous command was\n"
"      ;;    another call to `kill-region'.  If one or the other\n"
"      ;;    condition is true, then it sets the current command to\n"
"      ;;    be `kill-region'.\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8086
#, no-wrap
msgid ""
"      (let ((string (filter-buffer-substring beg end t)))\n"
"        (when string                    ;STRING is nil if BEG = END\n"
"          ;; Add that string to the kill ring, one way or another.\n"
"          (if (eq last-command 'kill-region)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8097
#, no-wrap
msgid ""
"              ;;    @minus{} `yank-handler' is an optional argument to\n"
"              ;;    `kill-region' that tells the `kill-append' and\n"
"              ;;    `kill-new' functions how deal with properties\n"
"              ;;    added to the text, such as `bold' or `italics'.\n"
"              (kill-append string (< end beg) yank-handler)\n"
"            (kill-new string nil yank-handler)))\n"
"        (when (or string (eq last-command 'kill-region))\n"
"          (setq this-command 'kill-region))\n"
"        nil)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8102
#, no-wrap
msgid ""
"    ;;  @bullet{} The third argument to `condition-case' tells the "
"interpreter\n"
"    ;;    what to do with an error.\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8108 emacs-lisp-intro.texi:8187
#, no-wrap
msgid ""
"    ;;    The third argument has a conditions part and a body part.\n"
"    ;;    If the conditions are met (in this case,\n"
"    ;;             if text or buffer are read-only)\n"
"    ;;    then the body is executed.\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8114
#, no-wrap
msgid ""
"    ;;    The first part of the third argument is the following:\n"
"    ((buffer-read-only text-read-only) ;; the if-part\n"
"     ;; @dots{}  the then-part\n"
"     (copy-region-as-kill beg end)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8122
#, no-wrap
msgid ""
"     ;;    Next, also as part of the then-part, set this-command, so\n"
"     ;;    it will be set in an error\n"
"     (setq this-command 'kill-region)\n"
"     ;;    Finally, in the then-part, send a message if you may copy\n"
"     ;;    the text to the kill ring without signaling an error, but\n"
"     ;;    don't if you may not.\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8129
#, no-wrap
msgid ""
"     (if kill-read-only-ok\n"
"         (progn (message \"Read only text copied to kill ring\") nil)\n"
"       (barf-if-buffer-read-only)\n"
"       ;; If the buffer isn't read-only, the text is.\n"
"       (signal 'text-read-only (list (current-buffer)))))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8140
#, no-wrap
msgid ""
"(defun kill-region (beg end)\n"
"  \"Kill between point and mark.\n"
"The text is deleted but saved in the kill ring.\"\n"
"  (interactive \"r\")\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8148
#, no-wrap
msgid ""
"  ;; 1. `condition-case' takes three arguments.\n"
"  ;;    If the first argument is nil, as it is here,\n"
"  ;;    information about the error signal is not\n"
"  ;;    stored for use by another function.\n"
"  (condition-case nil\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8153
#, no-wrap
msgid ""
"      ;; 2. The second argument to `condition-case'\n"
"      ;;    tells the Lisp interpreter what to do when all goes well.\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8160
#, no-wrap
msgid ""
"      ;;    The `delete-and-extract-region' function usually does the\n"
"      ;;    work.  If the beginning and ending of the region are both\n"
"      ;;    the same, then the variable `string' will be empty, or nil\n"
"      (let ((string (delete-and-extract-region beg end)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8166
#, no-wrap
msgid ""
"        ;; `when' is an `if' clause that cannot take an `else-part'.\n"
"        ;; Emacs normally sets the value of `last-command' to the\n"
"        ;; previous command.\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8176
#, no-wrap
msgid ""
"        ;; `kill-append' concatenates the new string and the old.\n"
"        ;; `kill-new' inserts text into a new item in the kill ring.\n"
"        (when string\n"
"          (if (eq last-command 'kill-region)\n"
"              ;; if true, prepend string\n"
"              (kill-append string (< end beg))\n"
"            (kill-new string)))\n"
"        (setq this-command 'kill-region))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8181
#, no-wrap
msgid ""
"    ;; 3. The third argument to `condition-case' tells the interpreter\n"
"    ;;    what to do with an error.\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8192
#, no-wrap
msgid ""
"    ((buffer-read-only text-read-only) ;; this is the if-part\n"
"     ;; then...\n"
"     (copy-region-as-kill beg end)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8200
#, no-wrap
msgid ""
"     (if kill-read-only-ok            ;; usually this variable is nil\n"
"         (message \"Read only text copied to kill ring\")\n"
"       ;; or else, signal an error if the buffer is read-only;\n"
"       (barf-if-buffer-read-only)\n"
"       ;; and, in any case, signal that the text is read-only.\n"
"       (signal 'text-read-only (list (current-buffer)))))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8213
msgid ""
"As we have seen earlier (@pxref{Making Errors, , Generate an Error "
"Message}), when the Emacs Lisp interpreter has trouble evaluating an "
"expression, it provides you with help; in the jargon, this is called "
"``signaling an error''.  Usually, the computer stops the program and shows "
"you a message."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8221
msgid ""
"However, some programs undertake complicated actions.  They should not "
"simply stop on an error.  In the @code{kill-region} function, the most "
"likely error is that you will try to kill text that is read-only and cannot "
"be removed.  So the @code{kill-region} function contains code to handle this "
"circumstance.  This code, which makes up the body of the @code{kill-region} "
"function, is inside of a @code{condition-case} special form."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8224
msgid "The template for @code{condition-case} looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8231
#, no-wrap
msgid ""
"(condition-case\n"
"  @var{var}\n"
"  @var{bodyform}\n"
"  @var{error-handler}@dots{})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8238
msgid ""
"The second argument, @var{bodyform}, is straightforward.  The "
"@code{condition-case} special form causes the Lisp interpreter to evaluate "
"the code in @var{bodyform}.  If no error occurs, the special form returns "
"the code's value and produces the side-effects, if any."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8242
msgid ""
"In short, the @var{bodyform} part of a @code{condition-case} expression "
"determines what should happen when everything works correctly."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8246
msgid ""
"However, if an error occurs, among its other actions, the function "
"generating the error signal will define one or more error condition names."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8252
msgid ""
"An error handler is the third argument to @code{condition case}.  An error "
"handler has two parts, a @var{condition-name} and a @var{body}.  If the "
"@var{condition-name} part of an error handler matches a condition name "
"generated by an error, then the @var{body} part of the error handler is run."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8255
msgid ""
"As you will expect, the @var{condition-name} part of an error handler may be "
"either a single condition name or a list of condition names."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8259
msgid ""
"Also, a complete @code{condition-case} expression may contain more than one "
"error handler.  When an error occurs, the first applicable handler is run."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8265
msgid ""
"Lastly, the first argument to the @code{condition-case} expression, the "
"@var{var} argument, is sometimes bound to a variable that contains "
"information about the error.  However, if that argument is nil, as is the "
"case in @code{kill-region}, that information is discarded."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8269
msgid ""
"In brief, in the @code{kill-region} function, the code @code{condition-case} "
"works like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8274
#, no-wrap
msgid ""
"@var{If no errors}, @var{run only this code}\n"
"    @var{but}, @var{if errors}, @var{run this other code}.\n"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:8292
#, no-wrap
msgid "Macro, lisp"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8299
msgid ""
"The part of the @code{condition-case} expression that is evaluated in the "
"expectation that all goes well has a @code{when}.  The code uses @code{when} "
"to determine whether the @code{string} variable points to text that exists."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8304
msgid ""
"A @code{when} expression is simply a programmers' convenience.  It is an "
"@code{if} without the possibility of an else clause.  In your mind, you can "
"replace @code{when} with @code{if} and understand what goes on.  That is "
"what the Lisp interpreter does."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8310
msgid ""
"Technically speaking, @code{when} is a Lisp macro.  A Lisp @dfn{macro} "
"enables you to define new control constructs and other language features.  "
"It tells the interpreter how to compute another Lisp expression which will "
"in turn compute the value.  In this case, the `other expression' is an "
"@code{if} expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8314
msgid ""
"The @code{kill-region} function definition also has an @code{unless} macro; "
"it is the converse of @code{when}.  The @code{unless} macro is an @code{if} "
"without a then clause"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8318
msgid ""
"For more about Lisp macros, see @ref{Macros, , Macros, elisp, The GNU Emacs "
"Lisp Reference Manual}.  The C programming language also provides macros.  "
"These are different, but also useful."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8329
msgid ""
"Regarding the @code{when} macro, in the @code{condition-case} expression, "
"when the string has content, then another conditional expression is "
"executed.  This is an @code{if} with both a then-part and an else-part."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8335
#, no-wrap
msgid ""
"(if (eq last-command 'kill-region)\n"
"    (kill-append string (< end beg) yank-handler)\n"
"  (kill-new string nil yank-handler))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8340
msgid ""
"The then-part is evaluated if the previous command was another call to "
"@code{kill-region}; if not, the else-part is evaluated."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8344
msgid ""
"@code{yank-handler} is an optional argument to @code{kill-region} that tells "
"the @code{kill-append} and @code{kill-new} functions how deal with "
"properties added to the text, such as `bold' or `italics'."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8348
msgid ""
"@code{last-command} is a variable that comes with Emacs that we have not "
"seen before.  Normally, whenever a function is executed, Emacs sets the "
"value of @code{last-command} to the previous command."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8352
msgid ""
"In this segment of the definition, the @code{if} expression checks whether "
"the previous command was @code{kill-region}.  If it was,"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:8355
#, no-wrap
msgid "(kill-append string (< end beg) yank-handler)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8360
msgid ""
"concatenates a copy of the newly clipped text to the just previously clipped "
"text in the kill ring."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8369
msgid ""
"The @code{copy-region-as-kill} function copies a region of text from a "
"buffer and (via either @code{kill-append} or @code{kill-new}) saves it in "
"the @code{kill-ring}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8376
msgid ""
"If you call @code{copy-region-as-kill} immediately after a "
"@code{kill-region} command, Emacs appends the newly copied text to the "
"previously copied text.  This means that if you yank back the text, you get "
"it all, from both this and the previous operation.  On the other hand, if "
"some other command precedes the @code{copy-region-as-kill}, the function "
"copies the text into a separate entry in the kill ring."
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:8384
#, no-wrap
msgid "The complete @code{copy-region-as-kill} function definition"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8390
msgid ""
"Here is the complete text of the version 22 @code{copy-region-as-kill} "
"function:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8399
#, no-wrap
msgid ""
"(defun copy-region-as-kill (beg end)\n"
"  \"Save the region as if killed, but don't kill it.\n"
"In Transient Mark mode, deactivate the mark.\n"
"If `interprogram-cut-function' is non-nil, also save the text for a window\n"
"system cut and paste.\"\n"
"  (interactive \"r\")\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8404
#, no-wrap
msgid ""
"  (if (eq last-command 'kill-region)\n"
"      (kill-append (filter-buffer-substring beg end) (< end beg))\n"
"    (kill-new (filter-buffer-substring beg end)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8409
#, no-wrap
msgid ""
"  (if transient-mark-mode\n"
"      (setq deactivate-mark t))\n"
"  nil)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8414
msgid "As usual, this function can be divided into its component parts:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8421
#, no-wrap
msgid ""
"(defun copy-region-as-kill (@var{argument-list})\n"
"  \"@var{documentation}@dots{}\"\n"
"  (interactive \"r\")\n"
"  @var{body}@dots{})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8429
msgid ""
"The arguments are @code{beg} and @code{end} and the function is interactive "
"with @code{\"r\"}, so the two arguments must refer to the beginning and end "
"of the region.  If you have been reading though this document from the "
"beginning, understanding these parts of a function is almost becoming "
"routine."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8434
msgid ""
"The documentation is somewhat confusing unless you remember that the word "
"`kill' has a meaning different from usual.  The `Transient Mark' and "
"@code{interprogram-cut-function} comments explain certain side-effects."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8441
msgid ""
"After you once set a mark, a buffer always contains a region.  If you wish, "
"you can use Transient Mark mode to highlight the region temporarily.  (No "
"one wants to highlight the region all the time, so Transient Mark mode "
"highlights it only at appropriate times.  Many people turn off Transient "
"Mark mode, so the region is never highlighted.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8447
msgid ""
"Also, a windowing system allows you to copy, cut, and paste among different "
"programs.  In the X windowing system, for example, the "
"@code{interprogram-cut-function} function is @code{x-select-text}, which "
"works with the windowing system's equivalent of the Emacs kill ring."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8455
msgid ""
"The body of the @code{copy-region-as-kill} function starts with an @code{if} "
"clause.  What this clause does is distinguish between two different "
"situations: whether or not this command is executed immediately after a "
"previous @code{kill-region} command.  In the first case, the new region is "
"appended to the previously copied text.  Otherwise, it is inserted into the "
"beginning of the kill ring as a separate piece of text from the previous "
"piece."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8458
msgid ""
"The last two lines of the function prevent the region from lighting up if "
"Transient Mark mode is turned on."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8460
msgid "The body of @code{copy-region-as-kill} merits discussion in detail."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8473
msgid ""
"The @code{copy-region-as-kill} function works in much the same way as the "
"@code{kill-region} function.  Both are written so that two or more kills in "
"a row combine their text into a single entry.  If you yank back the text "
"from the kill ring, you get it all in one piece.  Moreover, kills that kill "
"forward from the current position of the cursor are added to the end of the "
"previously copied text and commands that copy text backwards add it to the "
"beginning of the previously copied text.  This way, the words in the text "
"stay in the proper order."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8477
msgid ""
"Like @code{kill-region}, the @code{copy-region-as-kill} function makes use "
"of the @code{last-command} variable that keeps track of the previous Emacs "
"command."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:8485
#, no-wrap
msgid "last-command & this-command"
msgstr ""

#. type: unnumberedsubsubsec
#: emacs-lisp-intro.texi:8486
#, no-wrap
msgid "@code{last-command} and @code{this-command}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8494
msgid ""
"Normally, whenever a function is executed, Emacs sets the value of "
"@code{this-command} to the function being executed (which in this case would "
"be @code{copy-region-as-kill}).  At the same time, Emacs sets the value of "
"@code{last-command} to the previous value of @code{this-command}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8505
msgid ""
"In the first part of the body of the @code{copy-region-as-kill} function, an "
"@code{if} expression determines whether the value of @code{last-command} is "
"@code{kill-region}.  If so, the then-part of the @code{if} expression is "
"evaluated; it uses the @code{kill-append} function to concatenate the text "
"copied at this call to the function with the text already in the first "
"element (the @sc{car}) of the kill ring.  On the other hand, if the value of "
"@code{last-command} is not @code{kill-region}, then the "
"@code{copy-region-as-kill} function attaches a new element to the kill ring "
"using the @code{kill-new} function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8508
msgid "The @code{if} expression reads as follows; it uses @code{eq}:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8516
#, no-wrap
msgid ""
"  (if (eq last-command 'kill-region)\n"
"      ;; @r{then-part}\n"
"      (kill-append  (filter-buffer-substring beg end) (< end beg))\n"
"    ;; @r{else-part}\n"
"    (kill-new  (filter-buffer-substring beg end)))\n"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:8519
#, no-wrap
msgid "filter-buffer-substring"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8526
msgid ""
"(The @code{filter-buffer-substring} function returns a filtered substring of "
"the buffer, if any.  Optionally---the arguments are not here, so neither is "
"done---the function may delete the initial text or return the text without "
"its properties; this function is a replacement for the older "
"@code{buffer-substring} function, which came before text properties were "
"implemented.)"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:8527
#, no-wrap
msgid "eq @r{(example of use)}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8536
msgid ""
"The @code{eq} function tests whether its first argument is the same Lisp "
"object as its second argument.  The @code{eq} function is similar to the "
"@code{equal} function in that it is used to test for equality, but differs "
"in that it determines whether two representations are actually the same "
"object inside the computer, but with different names.  @code{equal} "
"determines whether the structure and contents of two expressions are the "
"same."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8539
msgid ""
"If the previous command was @code{kill-region}, then the Emacs Lisp "
"interpreter calls the @code{kill-append} function"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:8540
#, no-wrap
msgid "kill-append function"
msgstr ""

#. type: unnumberedsubsubsec
#: emacs-lisp-intro.texi:8541
#, no-wrap
msgid "The @code{kill-append} function"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:8542
#, no-wrap
msgid "kill-append"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8546
msgid "The @code{kill-append} function looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8560
#, no-wrap
msgid ""
"(defun kill-append (string before-p &optional yank-handler)\n"
"  \"Append STRING to the end of the latest kill in the kill ring.\n"
"If BEFORE-P is non-nil, prepend STRING to the kill.\n"
"@dots{} \"\n"
"  (let* ((cur (car kill-ring)))\n"
"    (kill-new (if before-p (concat string cur) (concat cur string))\n"
"              (or (= (length cur) 0)\n"
"                  (equal yank-handler\n"
"                         (get-text-property 0 'yank-handler cur)))\n"
"              yank-handler)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8580
msgid ""
"The @code{kill-append} function is fairly straightforward.  It uses the "
"@code{kill-new} function, which we will discuss in more detail in a moment."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8585
msgid ""
"(Also, the function provides an optional argument called "
"@code{yank-handler}; when invoked, this argument tells the function how to "
"deal with properties added to the text, such as `bold' or `italics'.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8591
msgid ""
"It has a @code{let*} function to set the value of the first element of the "
"kill ring to @code{cur}.  (I do not know why the function does not use "
"@code{let} instead; only one value is set in the expression.  Perhaps this "
"is a bug that produces no problems?)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8596
msgid ""
"Consider the conditional that is one of the two arguments to "
"@code{kill-new}.  It uses @code{concat} to concatenate the new text to the "
"@sc{car} of the kill ring.  Whether it prepends or appends the text depends "
"on the results of an @code{if} expression:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8602
#, no-wrap
msgid ""
"(if before-p                            ; @r{if-part}\n"
"    (concat string cur)                 ; @r{then-part}\n"
"  (concat cur string))                  ; @r{else-part}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8613
msgid ""
"If the region being killed is before the region that was killed in the last "
"command, then it should be prepended before the material that was saved in "
"the previous kill; and conversely, if the killed text follows what was just "
"killed, it should be appended after the previous text.  The @code{if} "
"expression depends on the predicate @code{before-p} to decide whether the "
"newly saved text should be put before or after the previously saved text."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8628
msgid ""
"The symbol @code{before-p} is the name of one of the arguments to "
"@code{kill-append}.  When the @code{kill-append} function is evaluated, it "
"is bound to the value returned by evaluating the actual argument.  In this "
"case, this is the expression @code{(< end beg)}.  This expression does not "
"directly determine whether the killed text in this command is located before "
"or after the kill text of the last command; what it does is determine "
"whether the value of the variable @code{end} is less than the value of the "
"variable @code{beg}.  If it is, it means that the user is most likely "
"heading towards the beginning of the buffer.  Also, the result of evaluating "
"the predicate expression, @code{(< end beg)}, will be true and the text will "
"be prepended before the previous text.  On the other hand, if the value of "
"the variable @code{end} is greater than the value of the variable "
"@code{beg}, the text will be appended after the previous text."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8632
msgid ""
"When the newly saved text will be prepended, then the string with the new "
"text will be concatenated before the old text:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:8635
#, no-wrap
msgid "(concat string cur)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8641
msgid ""
"But if the text will be appended, it will be concatenated after the old "
"text:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:8644
#, no-wrap
msgid "(concat cur string))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8649
msgid ""
"To understand how this works, we first need to review the @code{concat} "
"function.  The @code{concat} function links together or unites two strings "
"of text.  The result is a string.  For example:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8654
#, no-wrap
msgid ""
"(concat \"abc\" \"def\")\n"
"     @result{} \"abcdef\"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8660
#, no-wrap
msgid ""
"(concat \"new \"\n"
"        (car '(\"first element\" \"second element\")))\n"
"     @result{} \"new first element\"\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8664
#, no-wrap
msgid ""
"(concat (car\n"
"        '(\"first element\" \"second element\")) \" modified\")\n"
"     @result{} \"first element modified\"\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8671
msgid ""
"We can now make sense of @code{kill-append}: it modifies the contents of the "
"kill ring.  The kill ring is a list, each element of which is saved text.  "
"The @code{kill-append} function uses the @code{kill-new} function which in "
"turn uses the @code{setcar} function."
msgstr ""

#. type: unnumberedsubsubsec
#: emacs-lisp-intro.texi:8673
#, no-wrap
msgid "The @code{kill-new} function"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:8674
#, no-wrap
msgid "kill-new"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8690
msgid "The @code{kill-new} function looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8696
#, no-wrap
msgid ""
"(defun kill-new (string &optional replace yank-handler)\n"
"  \"Make STRING the latest kill in the kill ring.\n"
"Set `kill-ring-yank-pointer' to point to it.\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8701
#, no-wrap
msgid ""
"If `interprogram-cut-function' is non-nil, apply it to STRING.\n"
"Optional second argument REPLACE non-nil means that STRING will replace\n"
"the front of the kill ring, rather than being added to the list.\n"
"@dots{}\"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8710
#, no-wrap
msgid ""
"  (if (> (length string) 0)\n"
"      (if yank-handler\n"
"          (put-text-property 0 (length string)\n"
"                             'yank-handler yank-handler string))\n"
"    (if yank-handler\n"
"        (signal 'args-out-of-range\n"
"                (list string \"yank-handler specified for empty "
"string\"))))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8714
#, no-wrap
msgid ""
"  (if (fboundp 'menu-bar-update-yank-menu)\n"
"      (menu-bar-update-yank-menu string (and replace (car kill-ring))))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8721
#, no-wrap
msgid ""
"  (if (and replace kill-ring)\n"
"      (setcar kill-ring string)\n"
"    (push string kill-ring)\n"
"    (if (> (length kill-ring) kill-ring-max)\n"
"        (setcdr (nthcdr (1- kill-ring-max) kill-ring) nil)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8726 emacs-lisp-intro.texi:8794
#, no-wrap
msgid ""
"  (setq kill-ring-yank-pointer kill-ring)\n"
"  (if interprogram-cut-function\n"
"      (funcall interprogram-cut-function string (not replace))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8749
msgid "(Notice that the function is not interactive.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8751
msgid "As usual, we can look at this function in parts."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8755
msgid ""
"The function definition has an optional @code{yank-handler} argument, which "
"when invoked tells the function how to deal with properties added to the "
"text, such as `bold' or `italics'.  We will skip that."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8758
msgid "The first line of the documentation makes sense:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:8761
#, no-wrap
msgid "Make STRING the latest kill in the kill ring.\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8765
msgid "Let's skip over the rest of the documentation for the moment."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8770
msgid ""
"Also, let's skip over the initial @code{if} expression and those lines of "
"code involving @code{menu-bar-update-yank-menu}.  We will explain them "
"below."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8773
msgid "The critical lines are these:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8779
#, no-wrap
msgid ""
"  (if (and replace kill-ring)\n"
"      ;; @r{then}\n"
"      (setcar kill-ring string)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8783
#, no-wrap
msgid ""
"    ;; @r{else}\n"
"  (push string kill-ring)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8789
#, no-wrap
msgid ""
"    (setq kill-ring (cons string kill-ring))\n"
"    (if (> (length kill-ring) kill-ring-max)\n"
"        ;; @r{avoid overly long kill ring}\n"
"        (setcdr (nthcdr (1- kill-ring-max) kill-ring) nil)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8800
msgid ""
"The conditional test is @w{@code{(and replace kill-ring)}}.  This will be "
"true when two conditions are met: the kill ring has something in it, and the "
"@code{replace} variable is true."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8805
msgid ""
"When the @code{kill-append} function sets @code{replace} to be true and when "
"the kill ring has at least one item in it, the @code{setcar} expression is "
"executed:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:8808
#, no-wrap
msgid "(setcar kill-ring string)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8813
msgid ""
"The @code{setcar} function actually changes the first element of the "
"@code{kill-ring} list to the value of @code{string}.  It replaces the first "
"element."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8817
msgid ""
"On the other hand, if the kill ring is empty, or replace is false, the "
"else-part of the condition is executed:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:8820
#, no-wrap
msgid "(push string kill-ring)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8826
msgid ""
"@code{push} puts its first argument onto the second.  It is similar to the "
"older"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:8829
#, no-wrap
msgid "(setq kill-ring (cons string kill-ring))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8834
msgid "or the newer"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:8837
#, no-wrap
msgid "(add-to-list kill-ring string)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8845
msgid ""
"When it is false, the expression first constructs a new version of the kill "
"ring by prepending @code{string} to the existing kill ring as a new element "
"(that is what the @code{push} does).  Then it executes a second @code{if} "
"clause.  This second @code{if} clause keeps the kill ring from growing too "
"long."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8847
msgid "Let's look at these two expressions in order."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8851
msgid ""
"The @code{push} line of the else-part sets the new value of the kill ring to "
"what results from adding the string being killed to the old kill ring."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8853
msgid "We can see how this works with an example."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8856
msgid "First,"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:8859
#, no-wrap
msgid "(setq example-list '(\"here is a clause\" \"another clause\"))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8865
msgid ""
"After evaluating this expression with @kbd{C-x C-e}, you can evaluate "
"@code{example-list} and see what it returns:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8870
#, no-wrap
msgid ""
"example-list\n"
"     @result{} (\"here is a clause\" \"another clause\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8877
msgid ""
"Now, we can add a new element on to this list by evaluating the following "
"expression:"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:8877
#, no-wrap
msgid "push, @r{example}"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:8881
#, no-wrap
msgid "(push \"a third clause\" example-list)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8886
msgid "When we evaluate @code{example-list}, we find its value is:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8891
#, no-wrap
msgid ""
"example-list\n"
"     @result{} (\"a third clause\" \"here is a clause\" \"another "
"clause\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8896
msgid "Thus, the third clause is added to the list by @code{push}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8900
msgid ""
"Now for the second part of the @code{if} clause.  This expression keeps the "
"kill ring from growing too long.  It looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8905
#, no-wrap
msgid ""
"(if (> (length kill-ring) kill-ring-max)\n"
"    (setcdr (nthcdr (1- kill-ring-max) kill-ring) nil))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8914
msgid ""
"The code checks whether the length of the kill ring is greater than the "
"maximum permitted length.  This is the value of @code{kill-ring-max} (which "
"is 60, by default).  If the length of the kill ring is too long, then this "
"code sets the last element of the kill ring to @code{nil}.  It does this by "
"using two functions, @code{nthcdr} and @code{setcdr}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8923
msgid ""
"We looked at @code{setcdr} earlier (@pxref{setcdr, , @code{setcdr}}).  It "
"sets the @sc{cdr} of a list, just as @code{setcar} sets the @sc{car} of a "
"list.  In this case, however, @code{setcdr} will not be setting the @sc{cdr} "
"of the whole kill ring; the @code{nthcdr} function is used to cause it to "
"set the @sc{cdr} of the next to last element of the kill ring---this means "
"that since the @sc{cdr} of the next to last element is the last element of "
"the kill ring, it will set the last element of the kill ring."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:8924
#, no-wrap
msgid "nthcdr, @r{example}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8929
msgid ""
"The @code{nthcdr} function works by repeatedly taking the @sc{cdr} of a "
"list---it takes the @sc{cdr} of the @sc{cdr} of the @sc{cdr} @dots{} It does "
"this @var{N} times and returns the results.  (@xref{nthcdr, , "
"@code{nthcdr}}.)"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:8930
#, no-wrap
msgid "setcdr, @r{example}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8937
msgid ""
"Thus, if we had a four element list that was supposed to be three elements "
"long, we could set the @sc{cdr} of the next to last element to @code{nil}, "
"and thereby shorten the list.  (If you set the last element to some other "
"value than @code{nil}, which you could do, then you would not have shortened "
"the list.  @xref{setcdr, , @code{setcdr}}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8942
msgid ""
"You can see shortening by evaluating the following three expressions in "
"turn.  First set the value of @code{trees} to @code{(maple oak pine birch)}, "
"then set the @sc{cdr} of its second @sc{cdr} to @code{nil} and then find the "
"value of @code{trees}:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8947
#, no-wrap
msgid ""
"(setq trees '(maple oak pine birch))\n"
"     @result{} (maple oak pine birch)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8952
#, no-wrap
msgid ""
"(setcdr (nthcdr 2 trees) nil)\n"
"     @result{} nil\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8955
#, no-wrap
msgid ""
"trees\n"
"     @result{} (maple oak pine)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8961
msgid ""
"(The value returned by the @code{setcdr} expression is @code{nil} since that "
"is what the @sc{cdr} is set to.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8967
msgid ""
"To repeat, in @code{kill-new}, the @code{nthcdr} function takes the @sc{cdr} "
"a number of times that is one less than the maximum permitted size of the "
"kill ring and @code{setcdr} sets the @sc{cdr} of that element (which will be "
"the rest of the elements in the kill ring) to @code{nil}.  This prevents the "
"kill ring from growing too long."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8970
msgid "The next to last expression in the @code{kill-new} function is"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:8973 emacs-lisp-intro.texi:19180
#, no-wrap
msgid "(setq kill-ring-yank-pointer kill-ring)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8977
msgid ""
"The @code{kill-ring-yank-pointer} is a global variable that is set to be the "
"@code{kill-ring}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8981
msgid ""
"Even though the @code{kill-ring-yank-pointer} is called a @samp{pointer}, it "
"is a variable just like the kill ring.  However, the name has been chosen to "
"help humans understand how the variable is used."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8984
msgid "Now, to return to an early expression in the body of the function:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:8989
#, no-wrap
msgid ""
"  (if (fboundp 'menu-bar-update-yank-menu)\n"
"       (menu-bar-update-yank-menu string (and replace (car kill-ring))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:8994
msgid "It starts with an @code{if} expression"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9002
msgid ""
"In this case, the expression tests first to see whether "
"@code{menu-bar-update-yank-menu} exists as a function, and if so, calls it.  "
"The @code{fboundp} function returns true if the symbol it is testing has a "
"function definition that `is not void'.  If the symbol's function definition "
"were void, we would receive an error message, as we did when we created "
"errors intentionally (@pxref{Making Errors, , Generate an Error Message})."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9006
msgid ""
"The then-part contains an expression whose first element is the function "
"@code{and}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9016
msgid ""
"The @code{and} special form evaluates each of its arguments until one of the "
"arguments returns a value of @code{nil}, in which case the @code{and} "
"expression returns @code{nil}; however, if none of the arguments returns a "
"value of @code{nil}, the value resulting from evaluating the last argument "
"is returned.  (Since such a value is not @code{nil}, it is considered true "
"in Emacs Lisp.)  In other words, an @code{and} expression returns a true "
"value only if all its arguments are true.  (@xref{Second Buffer Related "
"Review}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9019
msgid ""
"The expression determines whether the second argument to "
"@code{menu-bar-update-yank-menu} is true or not."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9028
msgid ""
"@code{menu-bar-update-yank-menu} is one of the functions that make it "
"possible to use the `Select and Paste' menu in the Edit item of a menu bar; "
"using a mouse, you can look at the various pieces of text you have saved and "
"select one piece to paste."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9035
msgid ""
"The last expression in the @code{kill-new} function adds the newly copied "
"string to whatever facility exists for copying and pasting among different "
"programs running in a windowing system.  In the X Windowing system, for "
"example, the @code{x-select-text} function takes the string and stores it in "
"memory operated by X@.  You can paste the string in another program, such as "
"an Xterm."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:9043
#, no-wrap
msgid ""
"  (if interprogram-cut-function\n"
"      (funcall interprogram-cut-function string (not replace))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9051
msgid ""
"If an @code{interprogram-cut-function} exists, then Emacs executes "
"@code{funcall}, which in turn calls its first argument as a function and "
"passes the remaining arguments to it.  (Incidentally, as far as I can see, "
"this @code{if} expression could be replaced by an @code{and} expression "
"similar to the one in the first part of the function.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9055
msgid ""
"We are not going to discuss windowing systems and other programs further, "
"but merely note that this is a mechanism that enables GNU Emacs to work "
"easily and well with other programs."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9063
msgid ""
"This code for placing text in the kill ring, either concatenated with an "
"existing element or as a new element, leads us to the code for bringing back "
"text that has been cut out of the buffer---the yank commands.  However, "
"before discussing the yank commands, it is better to learn how lists are "
"implemented in a computer.  This will make clear such mysteries as the use "
"of the term `pointer'.  But before that, we will digress into C."
msgstr ""

#. type: itemx
#: emacs-lisp-intro.texi:9103 emacs-lisp-intro.texi:9527
#, no-wrap
msgid "delete-and-extract-region"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:9104
#, no-wrap
msgid "C, a digression into"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9112
msgid ""
"The @code{copy-region-as-kill} function (@pxref{copy-region-as-kill, , "
"@code{copy-region-as-kill}}) uses the @code{filter-buffer-substring} "
"function, which in turn uses the @code{delete-and-extract-region} function.  "
"It removes the contents of a region and you cannot get them back."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9118
msgid ""
"Unlike the other code discussed here, the @code{delete-and-extract-region} "
"function is not written in Emacs Lisp; it is written in C and is one of the "
"primitives of the GNU Emacs system.  Since it is very simple, I will digress "
"briefly from Lisp and describe it here."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9127
msgid ""
"Like many of the other Emacs primitives, @code{delete-and-extract-region} is "
"written as an instance of a C macro, a macro being a template for code.  The "
"complete macro looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:9140
#, no-wrap
msgid ""
"DEFUN (\"delete-and-extract-region\", Fdelete_and_extract_region,\n"
"       Sdelete_and_extract_region, 2, 2, 0,\n"
"       doc: /* Delete the text between START and END and return it.  */)\n"
"       (Lisp_Object start, Lisp_Object end)\n"
"@{\n"
"  validate_region (&start, &end);\n"
"  if (XINT (start) == XINT (end))\n"
"    return empty_unibyte_string;\n"
"  return del_range_1 (XINT (start), XINT (end), 1, 1);\n"
"@}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9148
msgid ""
"Without going into the details of the macro writing process, let me point "
"out that this macro starts with the word @code{DEFUN}.  The word "
"@code{DEFUN} was chosen since the code serves the same purpose as "
"@code{defun} does in Lisp.  (The @code{DEFUN} C macro is defined in "
"@file{emacs/src/lisp.h}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9151
msgid "The word @code{DEFUN} is followed by seven parts inside of parentheses:"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:9156
msgid ""
"The first part is the name given to the function in Lisp, "
"@code{delete-and-extract-region}."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:9162
msgid ""
"The second part is the name of the function in C, "
"@code{Fdelete_and_extract_region}.  By convention, it starts with @samp{F}.  "
"Since C does not use hyphens in names, underscores are used instead."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:9167
msgid ""
"The third part is the name for the C constant structure that records "
"information on this function for internal use.  It is the name of the "
"function in C but begins with an @samp{S} instead of an @samp{F}."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:9172
msgid ""
"The fourth and fifth parts specify the minimum and maximum number of "
"arguments the function can have.  This function demands exactly 2 arguments."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:9179
msgid ""
"The sixth part is nearly like the argument that follows the "
"@code{interactive} declaration in a function written in Lisp: a letter "
"followed, perhaps, by a prompt.  The only difference from the Lisp is when "
"the macro is called with no arguments.  Then you write a @code{0} (which is "
"a `null string'), as in this macro."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:9185
msgid ""
"If you were to specify arguments, you would place them between quotation "
"marks.  The C macro for @code{goto-char} includes @code{\"NGoto char: \"} in "
"this position to indicate that the function expects a raw prefix, in this "
"case, a numerical location in a buffer, and provides a prompt."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:9191
msgid ""
"The seventh part is a documentation string, just like the one for a function "
"written in Emacs Lisp.  This is written as a C comment.  (When you build "
"Emacs, the program @command{lib-src/make-docfile} extracts these comments "
"and uses them to make the ``real'' documentation.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9198
msgid ""
"In a C macro, the formal parameters come next, with a statement of what kind "
"of object they are, followed by what might be called the `body' of the "
"macro.  For @code{delete-and-extract-region} the `body' consists of the "
"following four lines:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:9205
#, no-wrap
msgid ""
"validate_region (&start, &end);\n"
"if (XINT (start) == XINT (end))\n"
"  return empty_unibyte_string;\n"
"return del_range_1 (XINT (start), XINT (end), 1, 1);\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9212
msgid ""
"The @code{validate_region} function checks whether the values passed as the "
"beginning and end of the region are the proper type and are within range.  "
"If the beginning and end positions are the same, then return an empty "
"string."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9218
msgid ""
"The @code{del_range_1} function actually deletes the text.  It is a complex "
"function we will not look into.  It updates the buffer and does other "
"things.  However, it is worth looking at the two arguments passed to "
"@code{del_range}.  These are @w{@code{XINT (start)}} and @w{@code{XINT "
"(end)}}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9224
msgid ""
"As far as the C language is concerned, @code{start} and @code{end} are two "
"integers that mark the beginning and end of the region to be "
"deleted@footnote{More precisely, and requiring more expert knowledge to "
"understand, the two integers are of type `Lisp_Object', which can also be a "
"C union instead of an integer type.}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9229
msgid ""
"In early versions of Emacs, these two numbers were thirty-two bits long, but "
"the code is slowly being generalized to handle other lengths.  Three of the "
"available bits are used to specify the type of information; the remaining "
"bits are used as `content'."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9232
msgid ""
"@samp{XINT} is a C macro that extracts the relevant number from the longer "
"collection of bits; the three other bits are discarded."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9235
msgid "The command in @code{delete-and-extract-region} looks like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:9238
#, no-wrap
msgid "del_range_1 (XINT (start), XINT (end), 1, 1);\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9243
msgid ""
"It deletes the region between the beginning position, @code{start}, and the "
"ending position, @code{end}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9247
msgid ""
"From the point of view of the person writing Lisp, Emacs is all very simple; "
"but hidden underneath is a great deal of complexity to make it all work."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:9251
#, no-wrap
msgid "Initializing a variable"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:9252
#, no-wrap
msgid "Variable initialization"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9272
msgid ""
"The @code{copy-region-as-kill} function is written in Emacs Lisp.  Two "
"functions within it, @code{kill-append} and @code{kill-new}, copy a region "
"in a buffer and save it in a variable called the @code{kill-ring}.  This "
"section describes how the @code{kill-ring} variable is created and "
"initialized using the @code{defvar} special form."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9276
msgid ""
"(Again we note that the term @code{kill-ring} is a misnomer.  The text that "
"is clipped out of the buffer can be brought back; it is not a ring of "
"corpses, but a ring of resurrectable text.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9280
msgid ""
"In Emacs Lisp, a variable such as the @code{kill-ring} is created and given "
"an initial value by using the @code{defvar} special form.  The name comes "
"from ``define variable''."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9287
msgid ""
"The @code{defvar} special form is similar to @code{setq} in that it sets the "
"value of a variable.  It is unlike @code{setq} in two ways: first, it only "
"sets the value of the variable if the variable does not already have a "
"value.  If the variable already has a value, @code{defvar} does not override "
"the existing value.  Second, @code{defvar} has a documentation string."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9291
msgid ""
"(Another special form, @code{defcustom}, is designed for variables that "
"people customize.  It has more features than @code{defvar}.  "
"(@xref{defcustom, , Setting Variables with @code{defcustom}}.)"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:9298
#, no-wrap
msgid "See variable current value"
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:9299
#, no-wrap
msgid "Seeing the Current Value of a Variable"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9310
msgid ""
"You can see the current value of a variable, any variable, by using the "
"@code{describe-variable} function, which is usually invoked by typing "
"@kbd{C-h v}.  If you type @kbd{C-h v} and then @code{kill-ring} (followed by "
"@key{RET}) when prompted, you will see what is in your current kill "
"ring---this may be quite a lot! Conversely, if you have been doing nothing "
"this Emacs session except read this document, you may have nothing in it.  "
"Also, you will see the documentation for @code{kill-ring}:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:9317
#, no-wrap
msgid ""
"Documentation:\n"
"List of killed text sequences.\n"
"Since the kill ring is supposed to interact nicely with cut-and-paste\n"
"facilities offered by window systems, use of this variable should\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:9324
#, no-wrap
msgid ""
"interact nicely with `interprogram-cut-function' and\n"
"`interprogram-paste-function'.  The functions `kill-new',\n"
"`kill-append', and `current-kill' are supposed to implement this\n"
"interaction; you may want to use them instead of manipulating the kill\n"
"ring directly.\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9329
msgid "The kill ring is defined by a @code{defvar} in the following way:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:9335
#, no-wrap
msgid ""
"(defvar kill-ring nil\n"
"  \"List of killed text sequences.\n"
"@dots{}\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9348
msgid ""
"In this variable definition, the variable is given an initial value of "
"@code{nil}, which makes sense, since if you have saved nothing, you want "
"nothing back if you give a @code{yank} command.  The documentation string is "
"written just like the documentation string of a @code{defun}.  As with the "
"documentation string of the @code{defun}, the first line of the "
"documentation should be a complete sentence, since some commands, like "
"@code{apropos}, print only the first line of documentation.  Succeeding "
"lines should not be indented; otherwise they look odd when you use @kbd{C-h "
"v} (@code{describe-variable})."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:9350
#, no-wrap
msgid "@code{defvar} and an asterisk"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:9351
#, no-wrap
msgid "defvar @r{for a user customizable variable}"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:9352
#, no-wrap
msgid "defvar @r{with an asterisk}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9361
msgid ""
"In the past, Emacs used the @code{defvar} special form both for internal "
"variables that you would not expect a user to change and for variables that "
"you do expect a user to change.  Although you can still use @code{defvar} "
"for user customizable variables, please use @code{defcustom} instead, since "
"that special form provides a path into the Customization commands.  "
"(@xref{defcustom, , Specifying Variables using @code{defcustom}}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9366
msgid ""
"When you specified a variable using the @code{defvar} special form, you "
"could distinguish a variable that a user might want to change from others by "
"typing an asterisk, @samp{*}, in the first column of its documentation "
"string.  For example:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:9372
#, no-wrap
msgid ""
"(defvar shell-command-default-error-buffer nil\n"
"  \"*Buffer name for `shell-command' @dots{} error output.\n"
"@dots{} \")\n"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:9375
#, no-wrap
msgid "set-variable"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9385
msgid ""
"You could (and still can) use the @code{set-variable} command to change the "
"value of @code{shell-command-default-error-buffer} temporarily.  However, "
"options set using @code{set-variable} are set only for the duration of your "
"editing session.  The new values are not saved between sessions.  Each time "
"Emacs starts, it reads the original value, unless you change the value "
"within your @file{.emacs} file, either by setting it manually or by using "
"@code{customize}.  @xref{Emacs Initialization, , Your @file{.emacs} File}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9393
msgid ""
"For me, the major use of the @code{set-variable} command is to suggest "
"variables that I might want to set in my @file{.emacs} file.  There are now "
"more than 700 such variables, far too many to remember readily.  "
"Fortunately, you can press @key{TAB} after calling the @code{M-x "
"set-variable} command to see the list of variables.  (@xref{Examining, , "
"Examining and Setting Variables, emacs, The GNU Emacs Manual}.)"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:9395
#, no-wrap
msgid "cons & search-fwd Review"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9399 emacs-lisp-intro.texi:13579
msgid "Here is a brief summary of some recently introduced functions."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:9401
#, no-wrap
msgid "car"
msgstr ""

#. type: itemx
#: emacs-lisp-intro.texi:9402
#, no-wrap
msgid "cdr"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:9405
msgid ""
"@code{car} returns the first element of a list; @code{cdr} returns the "
"second and subsequent elements of a list."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:9415
#, no-wrap
msgid ""
"(car '(1 2 3 4 5 6 7))\n"
"     @result{} 1\n"
"(cdr '(1 2 3 4 5 6 7))\n"
"     @result{} (2 3 4 5 6 7)\n"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:9421
msgid ""
"@code{cons} constructs a list by prepending its first argument to its second "
"argument."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:9429
#, no-wrap
msgid ""
"(cons 1 '(2 3 4))\n"
"     @result{} (1 2 3 4)\n"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:9432
#, no-wrap
msgid "funcall"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:9435
msgid ""
"@code{funcall} evaluates its first argument as a function.  It passes its "
"remaining arguments to its first argument."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:9438
msgid "Return the result of taking @sc{cdr} `n' times on a list."
msgstr ""

#. type: iftex
#: emacs-lisp-intro.texi:9440
msgid "The"
msgstr ""

#. type: tex
#: emacs-lisp-intro.texi:9442
#, no-wrap
msgid "$n^{th}$\n"
msgstr ""

#. type: iftex
#: emacs-lisp-intro.texi:9444
msgid "@code{cdr}."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:9446
msgid "The `rest of the rest', as it were."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:9454
#, no-wrap
msgid ""
"(nthcdr 3 '(1 2 3 4 5 6 7))\n"
"     @result{} (4 5 6 7)\n"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:9461
msgid ""
"@code{setcar} changes the first element of a list; @code{setcdr} changes the "
"second and subsequent elements of a list."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:9468
#, no-wrap
msgid ""
"(setq triple '(1 2 3))\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:9470
#, no-wrap
msgid ""
"(setcar triple '37)\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:9473
#, no-wrap
msgid ""
"triple\n"
"     @result{} (37 2 3)\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:9475
#, no-wrap
msgid ""
"(setcdr triple '(\"foo\" \"bar\"))\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:9478
#, no-wrap
msgid ""
"triple\n"
"     @result{} (37 \"foo\" \"bar\")\n"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:9484
msgid "Evaluate each argument in sequence and then return the value of the last."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:9492
#, no-wrap
msgid ""
"(progn 1 2 3 4)\n"
"     @result{} 4\n"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:9498
msgid ""
"Record whatever narrowing is in effect in the current buffer, if any, and "
"restore that narrowing after evaluating the arguments."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:9504
msgid ""
"Search for a string, and if the string is found, move point.  With a regular "
"expression, use the similar @code{re-search-forward}.  (@xref{Regexp Search, "
", Regular Expression Searches}, for an explanation of regular expression "
"patterns and searches.)"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:9509
msgid "@code{search-forward} and @code{re-search-forward} take four arguments:"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:9513
msgid "The string or regular expression to search for."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:9516 emacs-lisp-intro.texi:13622
msgid "Optionally, the limit of the search."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:9520 emacs-lisp-intro.texi:13626
msgid ""
"Optionally, what to do if the search fails, return @code{nil} or an error "
"message."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:9524 emacs-lisp-intro.texi:13630
msgid ""
"Optionally, how many times to repeat the search; if negative, the search "
"goes backwards."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:9533
msgid ""
"@code{kill-region} cuts the text between point and mark from the buffer and "
"stores that text in the kill ring, so you can get it back by yanking."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:9537
msgid ""
"@code{copy-region-as-kill} copies the text between point and mark into the "
"kill ring, from which you can get it by yanking.  The function does not cut "
"or remove the text from the buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9542
msgid ""
"@code{delete-and-extract-region} removes the text between point and mark "
"from the buffer and throws it away.  You cannot get it back.  (This is not "
"an interactive command.)"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:9545
#, no-wrap
msgid "Searching Exercises"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:9555
msgid ""
"Write an interactive function that searches for a string.  If the search "
"finds the string, leave point after it and display a message that says "
"``Found!''.  (Do not use @code{search-forward} for the name of this "
"function; if you do, you will overwrite the existing version of "
"@code{search-forward} that comes with Emacs.  Use a name such as "
"@code{test-search} instead.)"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:9560
msgid ""
"Write a function that prints the third element of the kill ring in the echo "
"area, if any; if the kill ring does not contain a third element, print an "
"appropriate message."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:9564
#, no-wrap
msgid "Lists in a computer"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9576
msgid ""
"In Lisp, atoms are recorded in a straightforward fashion; if the "
"implementation is not straightforward in practice, it is, nonetheless, "
"straightforward in theory.  The atom @samp{rose}, for example, is recorded "
"as the four contiguous letters @samp{r}, @samp{o}, @samp{s}, @samp{e}.  A "
"list, on the other hand, is kept differently.  The mechanism is equally "
"simple, but it takes a moment to get used to the idea.  A list is kept using "
"a series of pairs of pointers.  In the series, the first pointer in each "
"pair points to an atom or to another list, and the second pointer in each "
"pair points to the next pair, or to the symbol @code{nil}, which marks the "
"end of the list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9579
msgid ""
"A pointer itself is quite simply the electronic address of what is pointed "
"to.  Hence, a list is kept as a series of electronic addresses."
msgstr ""

#. type: unnumberedsec
#: emacs-lisp-intro.texi:9587 emacs-lisp-intro.texi:9588
#, no-wrap
msgid "Lists diagrammed"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9598
msgid ""
"For example, the list @code{(rose violet buttercup)} has three elements, "
"@samp{rose}, @samp{violet}, and @samp{buttercup}.  In the computer, the "
"electronic address of @samp{rose} is recorded in a segment of computer "
"memory along with the address that gives the electronic address of where the "
"atom @samp{violet} is located; and that address (the one that tells where "
"@samp{violet} is located) is kept along with an address that tells where the "
"address for the atom @samp{buttercup} is located."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9601
msgid "This sounds more complicated than it is and is easier seen in a diagram:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:9612 emacs-lisp-intro.texi:9635
#, no-wrap
msgid ""
"    ___ ___      ___ ___      ___ ___\n"
"   |___|___|--> |___|___|--> |___|___|--> nil\n"
"     |            |            |\n"
"     |            |            |\n"
"      --> rose     --> violet   --> buttercup\n"
msgstr ""

#. type: center
#: emacs-lisp-intro.texi:9618
#, no-wrap
msgid "@image{cons-1}"
msgstr ""

#. type: tex
#: emacs-lisp-intro.texi:9623
#, no-wrap
msgid ""
"%%%% old method of including an image\n"
"% \\input /usr/local/lib/tex/inputs/psfig.tex\n"
"% \\centerline{\\psfig{figure=/usr/local/lib/emacs/man/cons-1.eps}}\n"
"% \\catcode`\\@=0 %\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9650
msgid ""
"In the diagram, each box represents a word of computer memory that holds a "
"Lisp object, usually in the form of a memory address.  The boxes, i.e., the "
"addresses, are in pairs.  Each arrow points to what the address is the "
"address of, either an atom or another pair of addresses.  The first box is "
"the electronic address of @samp{rose} and the arrow points to @samp{rose}; "
"the second box is the address of the next pair of boxes, the first part of "
"which is the address of @samp{violet} and the second part of which is the "
"address of the next pair.  The very last box points to the symbol "
"@code{nil}, which marks the end of the list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9655
msgid ""
"When a variable is set to a list with a function such as @code{setq}, it "
"stores the address of the first box in the variable.  Thus, evaluation of "
"the expression"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:9658
#, no-wrap
msgid "(setq bouquet '(rose violet buttercup))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9663
msgid "creates a situation like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:9675 emacs-lisp-intro.texi:9700
#, no-wrap
msgid ""
"bouquet\n"
"     |\n"
"     |     ___ ___      ___ ___      ___ ___\n"
"      --> |___|___|--> |___|___|--> |___|___|--> nil\n"
"            |            |            |\n"
"            |            |            |\n"
"             --> rose     --> violet   --> buttercup\n"
msgstr ""

#. type: center
#: emacs-lisp-intro.texi:9681
#, no-wrap
msgid "@image{cons-2}"
msgstr ""

#. type: tex
#: emacs-lisp-intro.texi:9686
#, no-wrap
msgid ""
"%%%% old method of including an image\n"
"% \\input /usr/local/lib/tex/inputs/psfig.tex\n"
"% \\centerline{\\psfig{figure=/usr/local/lib/emacs/man/cons-2.eps}}\n"
"% \\catcode`\\@=0 %\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9708
msgid ""
"In this example, the symbol @code{bouquet} holds the address of the first "
"pair of boxes."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9712
msgid ""
"This same list can be illustrated in a different sort of box notation like "
"this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:9724 emacs-lisp-intro.texi:9749
#, no-wrap
msgid ""
"bouquet\n"
" |\n"
" |    --------------       ---------------       ----------------\n"
" |   | car   | cdr  |     | car    | cdr  |     | car     | cdr  |\n"
"  -->| rose  |   o------->| violet |   o------->| butter- |  nil |\n"
"     |       |      |     |        |      |     | cup     |      |\n"
"      --------------       ---------------       ----------------\n"
msgstr ""

#. type: center
#: emacs-lisp-intro.texi:9730
#, no-wrap
msgid "@image{cons-2a}"
msgstr ""

#. type: tex
#: emacs-lisp-intro.texi:9735
#, no-wrap
msgid ""
"%%%% old method of including an image\n"
"% \\input /usr/local/lib/tex/inputs/psfig.tex\n"
"% \\centerline{\\psfig{figure=/usr/local/lib/emacs/man/cons-2a.eps}}\n"
"% \\catcode`\\@=0 %\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9763
msgid ""
"(Symbols consist of more than pairs of addresses, but the structure of a "
"symbol is made up of addresses.  Indeed, the symbol @code{bouquet} consists "
"of a group of address-boxes, one of which is the address of the printed word "
"@samp{bouquet}, a second of which is the address of a function definition "
"attached to the symbol, if any, a third of which is the address of the first "
"pair of address-boxes for the list @code{(rose violet buttercup)}, and so "
"on.  Here we are showing that the symbol's third address-box points to the "
"first pair of address-boxes for the list.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9768
msgid ""
"If a symbol is set to the @sc{cdr} of a list, the list itself is not "
"changed; the symbol simply has an address further down the list.  (In the "
"jargon, @sc{car} and @sc{cdr} are `non-destructive'.)  Thus, evaluation of "
"the following expression"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:9771
#, no-wrap
msgid "(setq flowers (cdr bouquet))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9776 emacs-lisp-intro.texi:15544
msgid "produces this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:9790 emacs-lisp-intro.texi:9818
#, no-wrap
msgid ""
"bouquet        flowers\n"
"  |              |\n"
"  |     ___ ___  |     ___ ___      ___ ___\n"
"   --> |   |   |  --> |   |   |    |   |   |\n"
"       |___|___|----> |___|___|--> |___|___|--> nil\n"
"         |              |            |\n"
"         |              |            |\n"
"          --> rose       --> violet   --> buttercup\n"
msgstr ""

#. type: center
#: emacs-lisp-intro.texi:9797
#, no-wrap
msgid "@image{cons-3}"
msgstr ""

#. type: tex
#: emacs-lisp-intro.texi:9802
#, no-wrap
msgid ""
"%%%% old method of including an image\n"
"% \\input /usr/local/lib/tex/inputs/psfig.tex\n"
"% \\centerline{\\psfig{figure=/usr/local/lib/emacs/man/cons-3.eps}}\n"
"% \\catcode`\\@=0 %\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9829
msgid ""
"The value of @code{flowers} is @code{(violet buttercup)}, which is to say, "
"the symbol @code{flowers} holds the address of the pair of address-boxes, "
"the first of which holds the address of @code{violet}, and the second of "
"which holds the address of @code{buttercup}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9835
msgid ""
"A pair of address-boxes is called a @dfn{cons cell} or @dfn{dotted pair}.  "
"@xref{Cons Cell Type, , Cons Cell and List Types, elisp, The GNU Emacs Lisp "
"Reference Manual}, and @ref{Dotted Pair Notation, , Dotted Pair Notation, "
"elisp, The GNU Emacs Lisp Reference Manual}, for more information about cons "
"cells and dotted pairs."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9840
msgid ""
"The function @code{cons} adds a new pair of addresses to the front of a "
"series of addresses like that shown above.  For example, evaluating the "
"expression"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:9843
#, no-wrap
msgid "(setq bouquet (cons 'lily bouquet))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9848 emacs-lisp-intro.texi:15989
msgid "produces:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:9862 emacs-lisp-intro.texi:9890
#, no-wrap
msgid ""
"bouquet                       flowers\n"
"  |                             |\n"
"  |     ___ ___        ___ ___  |     ___ ___       ___ ___\n"
"   --> |   |   |      |   |   |  --> |   |   |     |   |   |\n"
"       |___|___|----> |___|___|----> |___|___|---->|___|___|--> nil\n"
"         |              |              |             |\n"
"         |              |              |             |\n"
"          --> lily      --> rose       --> violet    --> buttercup\n"
msgstr ""

#. type: center
#: emacs-lisp-intro.texi:9869
#, no-wrap
msgid "@image{cons-4}"
msgstr ""

#. type: tex
#: emacs-lisp-intro.texi:9874
#, no-wrap
msgid ""
"%%%% old method of including an image\n"
"% \\input /usr/local/lib/tex/inputs/psfig.tex\n"
"% \\centerline{\\psfig{figure=/usr/local/lib/emacs/man/cons-4.eps}}\n"
"% \\catcode`\\@=0 %\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9900
msgid ""
"However, this does not change the value of the symbol @code{flowers}, as you "
"can see by evaluating the following,"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:9903
#, no-wrap
msgid "(eq (cdr (cdr bouquet)) flowers)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9907
msgid "which returns @code{t} for true."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9912
msgid ""
"Until it is reset, @code{flowers} still has the value @code{(violet "
"buttercup)}; that is, it has the address of the cons cell whose first "
"address is of @code{violet}.  Also, this does not alter any of the "
"pre-existing cons cells; they are all still there."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9919
msgid ""
"Thus, in Lisp, to get the @sc{cdr} of a list, you just get the address of "
"the next cons cell in the series; to get the @sc{car} of a list, you get the "
"address of the first element of the list; to @code{cons} a new element on a "
"list, you add a new cons cell to the front of the list.  That is all there "
"is to it! The underlying structure of Lisp is brilliantly simple!"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9922
msgid ""
"And what does the last address in a series of cons cells refer to? It is the "
"address of the empty list, of @code{nil}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9925
msgid ""
"In summary, when a Lisp variable is set to a value, it is provided with the "
"address of the list to which the variable refers."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:9927 emacs-lisp-intro.texi:9928
#, no-wrap
msgid "Symbols as a Chest of Drawers"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:9929
#, no-wrap
msgid "Chest of Drawers, metaphor for a symbol"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:9930
#, no-wrap
msgid "Drawers, Chest of, metaphor for a symbol"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9937
msgid ""
"In an earlier section, I suggested that you might imagine a symbol as being "
"a chest of drawers.  The function definition is put in one drawer, the value "
"in another, and so on.  What is put in the drawer holding the value can be "
"changed without affecting the contents of the drawer holding the function "
"definition, and vice-verse."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9942
msgid ""
"Actually, what is put in each drawer is the address of the value or function "
"definition.  It is as if you found an old chest in the attic, and in one of "
"its drawers you found a map giving you directions to where the buried "
"treasure lies."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9948
msgid ""
"(In addition to its name, symbol definition, and variable value, a symbol "
"has a `drawer' for a @dfn{property list} which can be used to record other "
"information.  Property lists are not discussed here; see @ref{Property "
"Lists, , Property Lists, elisp, The GNU Emacs Lisp Reference Manual}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:9951
msgid "Here is a fanciful representation:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:9958 emacs-lisp-intro.texi:10000
#, no-wrap
msgid ""
"            Chest of Drawers            Contents of Drawers\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:9979 emacs-lisp-intro.texi:10021
#, no-wrap
msgid ""
"            __   o0O0o   __\n"
"          /                 \\\n"
"         ---------------------\n"
"        |    directions to    |            [map to]\n"
"        |     symbol name     |             bouquet\n"
"        |                     |\n"
"        +---------------------+\n"
"        |    directions to    |\n"
"        |  symbol definition  |             [none]\n"
"        |                     |\n"
"        +---------------------+\n"
"        |    directions to    |            [map to]\n"
"        |    variable value   |             (rose violet buttercup)\n"
"        |                     |\n"
"        +---------------------+\n"
"        |    directions to    |\n"
"        |    property list    |             [not described here]\n"
"        |                     |\n"
"        +---------------------+\n"
"        |/                   \\|\n"
msgstr ""

#. type: center
#: emacs-lisp-intro.texi:9986
#, no-wrap
msgid "@image{drawers}"
msgstr ""

#. type: tex
#: emacs-lisp-intro.texi:9991
#, no-wrap
msgid ""
"%%%% old method of including an image\n"
"% \\input /usr/local/lib/tex/inputs/psfig.tex\n"
"% \\centerline{\\psfig{figure=/usr/local/lib/emacs/man/drawers.eps}}\n"
"% \\catcode`\\@=0 %\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10034
msgid ""
"Set @code{flowers} to @code{violet} and @code{buttercup}.  Cons two more "
"flowers on to this list and set this new list to @code{more-flowers}.  Set "
"the @sc{car} of @code{flowers} to a fish.  What does the @code{more-flowers} "
"list now contain?"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:10038
#, no-wrap
msgid "Text retrieval"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:10039
#, no-wrap
msgid "Retrieving text"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:10040
#, no-wrap
msgid "Pasting text"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10047
msgid ""
"Whenever you cut text out of a buffer with a `kill' command in GNU Emacs, "
"you can bring it back with a `yank' command.  The text that is cut out of "
"the buffer is put in the kill ring and the yank commands insert the "
"appropriate contents of the kill ring back into a buffer (not necessarily "
"the original buffer)."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10059
msgid ""
"A simple @kbd{C-y} (@code{yank}) command inserts the first item from the "
"kill ring into the current buffer.  If the @kbd{C-y} command is followed "
"immediately by @kbd{M-y}, the first element is replaced by the second "
"element.  Successive @kbd{M-y} commands replace the second element with the "
"third, fourth, or fifth element, and so on.  When the last element in the "
"kill ring is reached, it is replaced by the first element and the cycle is "
"repeated.  (Thus the kill ring is called a `ring' rather than just a "
"`list'.  However, the actual data structure that holds the text is a list.  "
"@xref{Kill Ring, , Handling the Kill Ring}, for the details of how the list "
"is handled as a ring.)"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:10066 emacs-lisp-intro.texi:10067
#, no-wrap
msgid "Kill Ring Overview"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:10068
#, no-wrap
msgid "Kill ring overview"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10071
msgid "The kill ring is a list of textual strings.  This is what it looks like:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:10074 emacs-lisp-intro.texi:10121
#, no-wrap
msgid "(\"some text\" \"a different piece of text\" \"yet more text\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10079
msgid ""
"If this were the contents of my kill ring and I pressed @kbd{C-y}, the "
"string of characters saying @samp{some text} would be inserted in this "
"buffer where my cursor is located."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10083
msgid ""
"The @code{yank} command is also used for duplicating text by copying it.  "
"The copied text is not cut from the buffer, but a copy of it is put on the "
"kill ring and is inserted by yanking it back."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10088
msgid ""
"Three functions are used for bringing text back from the kill ring: "
"@code{yank}, which is usually bound to @kbd{C-y}; @code{yank-pop}, which is "
"usually bound to @kbd{M-y}; and @code{rotate-yank-pointer}, which is used by "
"the two other functions."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10092
msgid ""
"These functions refer to the kill ring through a variable called the "
"@code{kill-ring-yank-pointer}.  Indeed, the insertion code for both the "
"@code{yank} and @code{yank-pop} functions is:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:10095
#, no-wrap
msgid "(insert (car kill-ring-yank-pointer))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10105
msgid ""
"(Well, no more.  In GNU Emacs 22, the function has been replaced by "
"@code{insert-for-yank} which calls @code{insert-for-yank-1} repetitively for "
"each @code{yank-handler} segment.  In turn, @code{insert-for-yank-1} strips "
"text properties from the inserted text according to "
"@code{yank-excluded-properties}.  Otherwise, it is just like @code{insert}.  "
"We will stick with plain @code{insert} since it is easier to understand.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10108
msgid ""
"To begin to understand how @code{yank} and @code{yank-pop} work, it is first "
"necessary to look at the @code{kill-ring-yank-pointer} variable."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:10110
#, no-wrap
msgid "The @code{kill-ring-yank-pointer} Variable"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10115
msgid ""
"@code{kill-ring-yank-pointer} is a variable, just as @code{kill-ring} is a "
"variable.  It points to something by being bound to the value of what it "
"points to, like any other Lisp variable."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10118
msgid "Thus, if the value of the kill ring is:"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10127
msgid ""
"and the @code{kill-ring-yank-pointer} points to the second clause, the value "
"of @code{kill-ring-yank-pointer} is:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:10130
#, no-wrap
msgid "(\"a different piece of text\" \"yet more text\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10138
msgid ""
"As explained in the previous chapter (@pxref{List Implementation}), the "
"computer does not keep two different copies of the text being pointed to by "
"both the @code{kill-ring} and the @code{kill-ring-yank-pointer}.  The words "
"``a different piece of text'' and ``yet more text'' are not duplicated.  "
"Instead, the two Lisp variables point to the same pieces of text.  Here is a "
"diagram:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10155
#, no-wrap
msgid ""
"kill-ring     kill-ring-yank-pointer\n"
"    |               |\n"
"    |      ___ ___  |     ___ ___      ___ ___\n"
"     ---> |   |   |  --> |   |   |    |   |   |\n"
"          |___|___|----> |___|___|--> |___|___|--> nil\n"
"            |              |            |\n"
"            |              |            |\n"
"            |              |             --> \"yet more text\"\n"
"            |              |\n"
"            |               --> \"a different piece of text\"\n"
"            |\n"
"             --> \"some text\"\n"
msgstr ""

#. type: center
#: emacs-lisp-intro.texi:10162
#, no-wrap
msgid "@image{cons-5}"
msgstr ""

#. type: tex
#: emacs-lisp-intro.texi:10167
#, no-wrap
msgid ""
"%%%% old method of including an image\n"
"% \\input /usr/local/lib/tex/inputs/psfig.tex\n"
"% \\centerline{\\psfig{figure=/usr/local/lib/emacs/man/cons-5.eps}}\n"
"% \\catcode`\\@=0 %\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10186
#, no-wrap
msgid ""
"kill-ring     kill-ring-yank-pointer\n"
"    |               |\n"
"    |      ___ ___  |     ___ ___      ___ ___\n"
"     ---> |   |   |  --> |   |   |    |   |   |\n"
"          |___|___|----> |___|___|--> |___|___|--> nil\n"
"            |              |            |\n"
"            |              |            |\n"
"            |              |             --> \"yet more text\"\n"
"            |              |\n"
"            |               --> \"a different piece of text\n"
"            |\n"
"             --> \"some text\"\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10198
msgid ""
"Both the variable @code{kill-ring} and the variable "
"@code{kill-ring-yank-pointer} are pointers.  But the kill ring itself is "
"usually described as if it were actually what it is composed of.  The "
"@code{kill-ring} is spoken of as if it were the list rather than that it "
"points to the list.  Conversely, the @code{kill-ring-yank-pointer} is spoken "
"of as pointing to a list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10206
msgid ""
"These two ways of talking about the same thing sound confusing at first but "
"make sense on reflection.  The kill ring is generally thought of as the "
"complete structure of data that holds the information of what has recently "
"been cut out of the Emacs buffers.  The @code{kill-ring-yank-pointer} on the "
"other hand, serves to indicate---that is, to `point to'---that part of the "
"kill ring of which the first element (the @sc{car}) will be inserted."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:10249
#, no-wrap
msgid "Exercises with @code{yank} and @code{nthcdr}"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:10259
msgid ""
"Using @kbd{C-h v} (@code{describe-variable}), look at the value of your kill "
"ring.  Add several items to your kill ring; look at its value again.  Using "
"@kbd{M-y} (@code{yank-pop)}, move all the way around the kill ring.  How "
"many items were in your kill ring? Find the value of @code{kill-ring-max}.  "
"Was your kill ring full, or could you have kept more blocks of text within "
"it?"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:10263
msgid ""
"Using @code{nthcdr} and @code{car}, construct a series of expressions to "
"return the first, second, third, and fourth elements of a list."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:10267
#, no-wrap
msgid "Loops and recursion"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:10268
#, no-wrap
msgid "Recursion and loops"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:10269
#, no-wrap
msgid "Repetition (loops)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10274
msgid ""
"Emacs Lisp has two primary ways to cause an expression, or a series of "
"expressions, to be evaluated repeatedly: one uses a @code{while} loop, and "
"the other uses @dfn{recursion}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10281
msgid ""
"Repetition can be very valuable.  For example, to move forward four "
"sentences, you need only write a program that will move forward one sentence "
"and then repeat the process four times.  Since a computer does not get bored "
"or tired, such repetitive action does not have the deleterious effects that "
"excessive or the wrong kinds of repetition can have on humans."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10293
msgid ""
"People mostly write Emacs Lisp functions using @code{while} loops and their "
"kin; but you can use recursion, which provides a very powerful way to think "
"about and then to solve problems@footnote{You can write recursive functions "
"to be frugal or wasteful of mental or computer resources; as it happens, "
"methods that people find easy---that are frugal of `mental "
"resources'---sometimes use considerable computer resources.  Emacs was "
"designed to run on machines that we now consider limited and its default "
"settings are conservative.  You may want to increase the values of "
"@code{max-specpdl-size} and @code{max-lisp-eval-depth}.  In my @file{.emacs} "
"file, I set them to 15 and 30 times their default value.}."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:10303
#, no-wrap
msgid "Loops"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10310
msgid ""
"The @code{while} special form tests whether the value returned by evaluating "
"its first argument is true or false.  This is similar to what the Lisp "
"interpreter does with an @code{if}; what the interpreter does next, however, "
"is different."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10319
msgid ""
"In a @code{while} expression, if the value returned by evaluating the first "
"argument is false, the Lisp interpreter skips the rest of the expression "
"(the @dfn{body} of the expression) and does not evaluate it.  However, if "
"the value is true, the Lisp interpreter evaluates the body of the expression "
"and then again tests whether the first argument to @code{while} is true or "
"false.  If the value returned by evaluating the first argument is again "
"true, the Lisp interpreter again evaluates the body of the expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10322
msgid "The template for a @code{while} expression looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10327
#, no-wrap
msgid ""
"(while @var{true-or-false-test}\n"
"  @var{body}@dots{})\n"
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:10341
#, no-wrap
msgid "Looping with @code{while}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10351
msgid ""
"So long as the true-or-false-test of the @code{while} expression returns a "
"true value when it is evaluated, the body is repeatedly evaluated.  This "
"process is called a loop since the Lisp interpreter repeats the same thing "
"again and again, like an airplane doing a loop.  When the result of "
"evaluating the true-or-false-test is false, the Lisp interpreter does not "
"evaluate the rest of the @code{while} expression and `exits the loop'."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10360
msgid ""
"Clearly, if the value returned by evaluating the first argument to "
"@code{while} is always true, the body following will be evaluated again and "
"again @dots{} and again @dots{} forever.  Conversely, if the value returned "
"is never true, the expressions in the body will never be evaluated.  The "
"craft of writing a @code{while} loop consists of choosing a mechanism such "
"that the true-or-false-test returns true just the number of times that you "
"want the subsequent expressions to be evaluated, and then have the test "
"return false."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10372
msgid ""
"The value returned by evaluating a @code{while} is the value of the "
"true-or-false-test.  An interesting consequence of this is that a "
"@code{while} loop that evaluates without error will return @code{nil} or "
"false regardless of whether it has looped 1 or 100 times or none at all.  A "
"@code{while} expression that evaluates successfully never returns a true "
"value! What this means is that @code{while} is always evaluated for its side "
"effects, which is to say, the consequences of evaluating the expressions "
"within the body of the @code{while} loop.  This makes sense.  It is not the "
"mere act of looping that is desired, but the consequences of what happens "
"when the expressions in the loop are repeatedly evaluated."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:10374
#, no-wrap
msgid "A @code{while} Loop and a List"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10380
msgid ""
"A common way to control a @code{while} loop is to test whether a list has "
"any elements.  If it does, the loop is repeated; but if it does not, the "
"repetition is ended.  Since this is an important technique, we will create a "
"short example to illustrate it."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10388
msgid ""
"A simple way to test whether a list has elements is to evaluate the list: if "
"it has no elements, it is an empty list and will return the empty list, "
"@code{()}, which is a synonym for @code{nil} or false.  On the other hand, a "
"list with elements will return those elements when it is evaluated.  Since "
"Emacs Lisp considers as true any value that is not @code{nil}, a list that "
"returns elements will test true in a @code{while} loop."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10392
msgid ""
"For example, you can set the variable @code{empty-list} to @code{nil} by "
"evaluating the following @code{setq} expression:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:10395
#, no-wrap
msgid "(setq empty-list ())\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10402
msgid ""
"After evaluating the @code{setq} expression, you can evaluate the variable "
"@code{empty-list} in the usual way, by placing the cursor after the symbol "
"and typing @kbd{C-x C-e}; @code{nil} will appear in your echo area:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:10405
#, no-wrap
msgid "empty-list\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10410
msgid ""
"On the other hand, if you set a variable to be a list with elements, the "
"list will appear when you evaluate the variable, as you can see by "
"evaluating the following two expressions:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10414 emacs-lisp-intro.texi:10521 emacs-lisp-intro.texi:11105 emacs-lisp-intro.texi:11117 emacs-lisp-intro.texi:11137 emacs-lisp-intro.texi:11396
#, no-wrap
msgid ""
"(setq animals '(gazelle giraffe lion tiger))\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10416
#, no-wrap
msgid "animals\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10422
msgid ""
"Thus, to create a @code{while} loop that tests whether there are any items "
"in the list @code{animals}, the first part of the loop will be written like "
"this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10427
#, no-wrap
msgid ""
"(while animals\n"
"       @dots{}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10436
msgid ""
"When the @code{while} tests its first argument, the variable @code{animals} "
"is evaluated.  It returns a list.  So long as the list has elements, the "
"@code{while} considers the results of the test to be true; but when the list "
"is empty, it considers the results of the test to be false."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10445
msgid ""
"To prevent the @code{while} loop from running forever, some mechanism needs "
"to be provided to empty the list eventually.  An oft-used technique is to "
"have one of the subsequent forms in the @code{while} expression set the "
"value of the list to be the @sc{cdr} of the list.  Each time the @code{cdr} "
"function is evaluated, the list will be made shorter, until eventually only "
"the empty list will be left.  At this point, the test of the @code{while} "
"loop will return false, and the arguments to the @code{while} will no longer "
"be evaluated."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10449
msgid ""
"For example, the list of animals bound to the variable @code{animals} can be "
"set to be the @sc{cdr} of the original list with the following expression:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:10452
#, no-wrap
msgid "(setq animals (cdr animals))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10460
msgid ""
"If you have evaluated the previous expressions and then evaluate this "
"expression, you will see @code{(giraffe lion tiger)} appear in the echo "
"area.  If you evaluate the expression again, @code{(lion tiger)} will appear "
"in the echo area.  If you evaluate it again and yet again, @code{(tiger)} "
"appears and then the empty list, shown by @code{nil}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10464
msgid ""
"A template for a @code{while} loop that uses the @code{cdr} function "
"repeatedly to cause the true-or-false-test eventually to test false looks "
"like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10470 emacs-lisp-intro.texi:15283
#, no-wrap
msgid ""
"(while @var{test-whether-list-is-empty}\n"
"  @var{body}@dots{}\n"
"  @var{set-list-to-cdr-of-list})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10476
msgid ""
"This test and use of @code{cdr} can be put together in a function that goes "
"through a list and prints each element of the list on a line of its own."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:10478
#, no-wrap
msgid "An Example: @code{print-elements-of-list}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10483
msgid ""
"The @code{print-elements-of-list} function illustrates a @code{while} loop "
"with a list."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:10484
#, no-wrap
msgid "@file{*scratch*} buffer"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10489
msgid ""
"The function requires several lines for its output.  If you are reading this "
"in a recent instance of GNU Emacs, you can evaluate the following expression "
"inside of Info, as usual."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10494
msgid ""
"If you are using an earlier version of Emacs, you need to copy the necessary "
"expressions to your @file{*scratch*} buffer and evaluate them there.  This "
"is because the echo area had only one line in the earlier versions."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10502
msgid ""
"You can copy the expressions by marking the beginning of the region with "
"@kbd{C-@key{SPC}} (@code{set-mark-command}), moving the cursor to the end of "
"the region and then copying the region using @kbd{M-w} "
"(@code{kill-ring-save}, which calls @code{copy-region-as-kill} and then "
"provides visual feedback).  In the @file{*scratch*} buffer, you can yank the "
"expressions back by typing @kbd{C-y} (@code{yank})."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10512
msgid ""
"After you have copied the expressions to the @file{*scratch*} buffer, "
"evaluate each expression in turn.  Be sure to evaluate the last expression, "
"@code{(print-elements-of-list animals)}, by typing @kbd{C-u C-x C-e}, that "
"is, by giving an argument to @code{eval-last-sexp}.  This will cause the "
"result of the evaluation to be printed in the @file{*scratch*} buffer "
"instead of being printed in the echo area.  (Otherwise you will see "
"something like this in your echo area: "
"@code{^Jgazelle^J^Jgiraffe^J^Jlion^J^Jtiger^Jnil}, in which each @samp{^J} "
"stands for a `newline'.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10517
msgid ""
"In a recent instance of GNU Emacs, you can evaluate these expressions "
"directly in the Info buffer, and the echo area will grow to show the "
"results."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10527
#, no-wrap
msgid ""
"(defun print-elements-of-list (list)\n"
"  \"Print each element of LIST on a line of its own.\"\n"
"  (while list\n"
"    (print (car list))\n"
"    (setq list (cdr list))))\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10529
#, no-wrap
msgid "(print-elements-of-list animals)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10536
msgid "When you evaluate the three expressions in sequence, you will see this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10540 emacs-lisp-intro.texi:11454
#, no-wrap
msgid ""
"gazelle\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10542 emacs-lisp-intro.texi:11456
#, no-wrap
msgid ""
"giraffe\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10544 emacs-lisp-intro.texi:11458
#, no-wrap
msgid ""
"lion\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10547 emacs-lisp-intro.texi:11461
#, no-wrap
msgid ""
"tiger\n"
"nil\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10555
msgid ""
"Each element of the list is printed on a line of its own (that is what the "
"function @code{print} does) and then the value returned by the function is "
"printed.  Since the last expression in the function is the @code{while} "
"loop, and since @code{while} loops always return @code{nil}, a @code{nil} is "
"printed after the last element of the list."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:10557
#, no-wrap
msgid "A Loop with an Incrementing Counter"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10565
msgid ""
"A loop is not useful unless it stops when it ought.  Besides controlling a "
"loop with a list, a common way of stopping a loop is to write the first "
"argument as a test that returns false when the correct number of repetitions "
"are complete.  This means that the loop must have a counter---an expression "
"that counts how many times the loop repeats itself."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:10567
#, no-wrap
msgid "Incrementing Loop Details"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10581
msgid ""
"The test for a loop with an incrementing counter can be an expression such "
"as @code{(< count desired-number)} which returns @code{t} for true if the "
"value of @code{count} is less than the @code{desired-number} of repetitions "
"and @code{nil} for false if the value of @code{count} is equal to or is "
"greater than the @code{desired-number}.  The expression that increments the "
"count can be a simple @code{setq} such as @code{(setq count (1+ count))}, "
"where @code{1+} is a built-in function in Emacs Lisp that adds 1 to its "
"argument.  (The expression @w{@code{(1+ count)}} has the same result as "
"@w{@code{(+ count 1)}}, but is easier for a human to read.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10585
msgid ""
"The template for a @code{while} loop controlled by an incrementing counter "
"looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10592
#, no-wrap
msgid ""
"@var{set-count-to-initial-value}\n"
"(while (< count desired-number)         ; @r{true-or-false-test}\n"
"  @var{body}@dots{}\n"
"  (setq count (1+ count)))              ; @r{incrementer}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10598
msgid ""
"Note that you need to set the initial value of @code{count}; usually it is "
"set to 1."
msgstr ""

#. type: unnumberedsubsubsec
#: emacs-lisp-intro.texi:10606
#, no-wrap
msgid "Example with incrementing counter"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10611
msgid ""
"Suppose you are playing on the beach and decide to make a triangle of "
"pebbles, putting one pebble in the first row, two in the second row, three "
"in the third row and so on, like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10621
#, no-wrap
msgid ""
"               *\n"
"              * *\n"
"             * * *\n"
"            * * * *\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10631
#, no-wrap
msgid ""
"               @bullet{}\n"
"              @bullet{} @bullet{}\n"
"             @bullet{} @bullet{} @bullet{}\n"
"            @bullet{} @bullet{} @bullet{} @bullet{}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10639
msgid ""
"(About 2500 years ago, Pythagoras and others developed the beginnings of "
"number theory by considering questions such as this.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10642
msgid ""
"Suppose you want to know how many pebbles you will need to make a triangle "
"with 7 rows?"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10650
msgid ""
"Clearly, what you need to do is add up the numbers from 1 to 7.  There are "
"two ways to do this; start with the smallest number, one, and add up the "
"list in sequence, 1, 2, 3, 4 and so on; or start with the largest number and "
"add the list going down: 7, 6, 5, 4 and so on.  Because both mechanisms "
"illustrate common ways of writing @code{while} loops, we will create two "
"examples, one counting up and the other counting down.  In this first "
"example, we will start with 1 and add 2, 3, 4 and so on."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10657
msgid ""
"If you are just adding up a short list of numbers, the easiest way to do it "
"is to add up all the numbers at once.  However, if you do not know ahead of "
"time how many numbers your list will have, or if you want to be prepared for "
"a very long list, then you need to design your addition so that what you do "
"is repeat a simple process many times instead of doing a more complex "
"process once."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10663
msgid ""
"For example, instead of adding up all the pebbles all at once, what you can "
"do is add the number of pebbles in the first row, 1, to the number in the "
"second row, 2, and then add the total of those two rows to the third row, "
"3.  Then you can add the number in the fourth row, 4, to the total of the "
"first three rows; and so on."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10671
msgid ""
"The critical characteristic of the process is that each repetitive action is "
"simple.  In this case, at each step we add only two numbers, the number of "
"pebbles in the row and the total already found.  This process of adding two "
"numbers is repeated again and again until the last row has been added to the "
"total of all the preceding rows.  In a more complex loop the repetitive "
"action might not be so simple, but it will be simpler than doing everything "
"all at once."
msgstr ""

#. type: unnumberedsubsubsec
#: emacs-lisp-intro.texi:10673 emacs-lisp-intro.texi:10940
#, no-wrap
msgid "The parts of the function definition"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10679
msgid ""
"The preceding analysis gives us the bones of our function definition: first, "
"we will need a variable that we can call @code{total} that will be the total "
"number of pebbles.  This will be the value returned by the function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10683
msgid ""
"Second, we know that the function will require an argument: this argument "
"will be the total number of rows in the triangle.  It can be called "
"@code{number-of-rows}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10688
msgid ""
"Finally, we need a variable to use as a counter.  We could call this "
"variable @code{counter}, but a better name is @code{row-number}.  That is "
"because what the counter does in this function is count rows, and a program "
"should be written to be as understandable as possible."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10696
msgid ""
"When the Lisp interpreter first starts evaluating the expressions in the "
"function, the value of @code{total} should be set to zero, since we have not "
"added anything to it.  Then the function should add the number of pebbles in "
"the first row to the total, and then add the number of pebbles in the second "
"to the total, and then add the number of pebbles in the third row to the "
"total, and so on, until there are no more rows left to add."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10703
msgid ""
"Both @code{total} and @code{row-number} are used only inside the function, "
"so they can be declared as local variables with @code{let} and given initial "
"values.  Clearly, the initial value for @code{total} should be 0.  The "
"initial value of @code{row-number} should be 1, since we start with the "
"first row.  This means that the @code{let} statement will look like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10709
#, no-wrap
msgid ""
"  (let ((total 0)\n"
"        (row-number 1))\n"
"    @var{body}@dots{})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10720
msgid ""
"After the internal variables are declared and bound to their initial values, "
"we can begin the @code{while} loop.  The expression that serves as the test "
"should return a value of @code{t} for true so long as the @code{row-number} "
"is less than or equal to the @code{number-of-rows}.  (If the expression "
"tests true only so long as the row number is less than the number of rows in "
"the triangle, the last row will never be added to the total; hence the row "
"number has to be either less than or equal to the number of rows.)"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:10722
#, no-wrap
msgid "<= @r{(less than or equal)}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10727
msgid ""
"Lisp provides the @code{<=} function that returns true if the value of its "
"first argument is less than or equal to the value of its second argument and "
"false otherwise.  So the expression that the @code{while} will evaluate as "
"its test should look like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:10730
#, no-wrap
msgid "(<= row-number number-of-rows)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10739
msgid ""
"The total number of pebbles can be found by repeatedly adding the number of "
"pebbles in a row to the total already found.  Since the number of pebbles in "
"the row is equal to the row number, the total can be found by adding the row "
"number to the total.  (Clearly, in a more complex situation, the number of "
"pebbles in the row might be related to the row number in a more complicated "
"way; if this were the case, the row number would be replaced by the "
"appropriate expression.)"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:10742
#, no-wrap
msgid "(setq total (+ total row-number))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10747
msgid ""
"What this does is set the new value of @code{total} to be equal to the sum "
"of adding the number of pebbles in the row to the previous total."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10757
msgid ""
"After setting the value of @code{total}, the conditions need to be "
"established for the next repetition of the loop, if there is one.  This is "
"done by incrementing the value of the @code{row-number} variable, which "
"serves as a counter.  After the @code{row-number} variable has been "
"incremented, the true-or-false-test at the beginning of the @code{while} "
"loop tests whether its value is still less than or equal to the value of the "
"@code{number-of-rows} and if it is, adds the new value of the "
"@code{row-number} variable to the @code{total} of the previous repetition of "
"the loop."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10761
msgid ""
"The built-in Emacs Lisp function @code{1+} adds 1 to a number, so the "
"@code{row-number} variable can be incremented with this expression:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:10764
#, no-wrap
msgid "(setq row-number (1+ row-number))\n"
msgstr ""

#. type: unnumberedsubsubsec
#: emacs-lisp-intro.texi:10767 emacs-lisp-intro.texi:11002
#, no-wrap
msgid "Putting the function definition together"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10771
msgid ""
"We have created the parts for the function definition; now we need to put "
"them together."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10774
msgid "First, the contents of the @code{while} expression:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10780
#, no-wrap
msgid ""
"(while (<= row-number number-of-rows)   ; @r{true-or-false-test}\n"
"  (setq total (+ total row-number))\n"
"  (setq row-number (1+ row-number)))    ; @r{incrementer}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10786
msgid ""
"Along with the @code{let} expression varlist, this very nearly completes the "
"body of the function definition.  However, it requires one final element, "
"the need for which is somewhat subtle."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10792
msgid ""
"The final touch is to place the variable @code{total} on a line by itself "
"after the @code{while} expression.  Otherwise, the value returned by the "
"whole function is the value of the last expression that is evaluated in the "
"body of the @code{let}, and this is the value returned by the @code{while}, "
"which is always @code{nil}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10799
msgid ""
"This may not be evident at first sight.  It almost looks as if the "
"incrementing expression is the last expression of the whole function.  But "
"that expression is part of the body of the @code{while}; it is the last "
"element of the list that starts with the symbol @code{while}.  Moreover, the "
"whole of the @code{while} loop is a list within the body of the @code{let}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10802
msgid "In outline, the function will look like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10811
#, no-wrap
msgid ""
"(defun @var{name-of-function} (@var{argument-list})\n"
"  \"@var{documentation}@dots{}\"\n"
"  (let (@var{varlist})\n"
"    (while (@var{true-or-false-test})\n"
"      @var{body-of-while}@dots{} )\n"
"    @dots{} ))                    ; @r{Need final expression here.}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10824
msgid ""
"The result of evaluating the @code{let} is what is going to be returned by "
"the @code{defun} since the @code{let} is not embedded within any containing "
"list, except for the @code{defun} as a whole.  However, if the @code{while} "
"is the last element of the @code{let} expression, the function will always "
"return @code{nil}.  This is not what we want! Instead, what we want is the "
"value of the variable @code{total}.  This is returned by simply placing the "
"symbol as the last element of the list starting with @code{let}.  It gets "
"evaluated after the preceding elements of the list are evaluated, which "
"means it gets evaluated after it has been assigned the correct value for the "
"total."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10830
msgid ""
"It may be easier to see this by printing the list starting with @code{let} "
"all on one line.  This format makes it evident that the @var{varlist} and "
"@code{while} expressions are the second and third elements of the list "
"starting with @code{let}, and the @code{total} is the last element:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10834
#, no-wrap
msgid ""
"(let (@var{varlist}) (while (@var{true-or-false-test}) "
"@var{body-of-while}@dots{} ) total)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10840
msgid ""
"Putting everything together, the @code{triangle} function definition looks "
"like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10849
#, no-wrap
msgid ""
"(defun triangle (number-of-rows)    ; @r{Version with}\n"
"                                    ; @r{  incrementing counter.}\n"
"  \"Add up the number of pebbles in a triangle.\n"
"The first row has one pebble, the second row two pebbles,\n"
"the third row three pebbles, and so on.\n"
"The argument is NUMBER-OF-ROWS.\"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10857
#, no-wrap
msgid ""
"  (let ((total 0)\n"
"        (row-number 1))\n"
"    (while (<= row-number number-of-rows)\n"
"      (setq total (+ total row-number))\n"
"      (setq row-number (1+ row-number)))\n"
"    total))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10863
msgid ""
"After you have installed @code{triangle} by evaluating the function, you can "
"try it out.  Here are two examples:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10867
#, no-wrap
msgid ""
"(triangle 4)\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10869
#, no-wrap
msgid "(triangle 7)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10875
msgid ""
"The sum of the first four numbers is 10 and the sum of the first seven "
"numbers is 28."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10886
msgid ""
"Another common way to write a @code{while} loop is to write the test so that "
"it determines whether a counter is greater than zero.  So long as the "
"counter is greater than zero, the loop is repeated.  But when the counter is "
"equal to or less than zero, the loop is stopped.  For this to work, the "
"counter has to start out greater than zero and then be made smaller and "
"smaller by a form that is evaluated repeatedly."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10894
msgid ""
"The test will be an expression such as @code{(> counter 0)} which returns "
"@code{t} for true if the value of @code{counter} is greater than zero, and "
"@code{nil} for false if the value of @code{counter} is equal to or less than "
"zero.  The expression that makes the number smaller and smaller can be a "
"simple @code{setq} such as @code{(setq counter (1- counter))}, where "
"@code{1-} is a built-in function in Emacs Lisp that subtracts 1 from its "
"argument."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10897
msgid "The template for a decrementing @code{while} loop looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10903
#, no-wrap
msgid ""
"(while (> counter 0)                    ; @r{true-or-false-test}\n"
"  @var{body}@dots{}\n"
"  (setq counter (1- counter)))          ; @r{decrementer}\n"
msgstr ""

#. type: unnumberedsubsubsec
#: emacs-lisp-intro.texi:10913
#, no-wrap
msgid "Example with decrementing counter"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10917
msgid ""
"To illustrate a loop with a decrementing counter, we will rewrite the "
"@code{triangle} function so the counter decreases to zero."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10923
msgid ""
"This is the reverse of the earlier version of the function.  In this case, "
"to find out how many pebbles are needed to make a triangle with 3 rows, add "
"the number of pebbles in the third row, 3, to the number in the preceding "
"row, 2, and then add the total of those two rows to the row that precedes "
"them, which is 1."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10932
msgid ""
"Likewise, to find the number of pebbles in a triangle with 7 rows, add the "
"number of pebbles in the seventh row, 7, to the number in the preceding row, "
"which is 6, and then add the total of those two rows to the row that "
"precedes them, which is 5, and so on.  As in the previous example, each "
"addition only involves adding two numbers, the total of the rows already "
"added up and the number of pebbles in the row that is being added to the "
"total.  This process of adding two numbers is repeated again and again until "
"there are no more pebbles to add."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10938
msgid ""
"We know how many pebbles to start with: the number of pebbles in the last "
"row is equal to the number of rows.  If the triangle has seven rows, the "
"number of pebbles in the last row is 7.  Likewise, we know how many pebbles "
"are in the preceding row: it is one less than the number in the row."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10947
msgid ""
"We start with three variables: the total number of rows in the triangle; the "
"number of pebbles in a row; and the total number of pebbles, which is what "
"we want to calculate.  These variables can be named @code{number-of-rows}, "
"@code{number-of-pebbles-in-row}, and @code{total}, respectively."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10954
msgid ""
"Both @code{total} and @code{number-of-pebbles-in-row} are used only inside "
"the function and are declared with @code{let}.  The initial value of "
"@code{total} should, of course, be zero.  However, the initial value of "
"@code{number-of-pebbles-in-row} should be equal to the number of rows in the "
"triangle, since the addition will start with the longest row."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10958
msgid ""
"This means that the beginning of the @code{let} expression will look like "
"this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10964
#, no-wrap
msgid ""
"(let ((total 0)\n"
"      (number-of-pebbles-in-row number-of-rows))\n"
"  @var{body}@dots{})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10970
msgid ""
"The total number of pebbles can be found by repeatedly adding the number of "
"pebbles in a row to the total already found, that is, by repeatedly "
"evaluating the following expression:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:10973
#, no-wrap
msgid "(setq total (+ total number-of-pebbles-in-row))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10980
msgid ""
"After the @code{number-of-pebbles-in-row} is added to the @code{total}, the "
"@code{number-of-pebbles-in-row} should be decremented by one, since the next "
"time the loop repeats, the preceding row will be added to the total."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10985
msgid ""
"The number of pebbles in a preceding row is one less than the number of "
"pebbles in a row, so the built-in Emacs Lisp function @code{1-} can be used "
"to compute the number of pebbles in the preceding row.  This can be done "
"with the following expression:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:10990
#, no-wrap
msgid ""
"(setq number-of-pebbles-in-row\n"
"      (1- number-of-pebbles-in-row))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:10996
msgid ""
"Finally, we know that the @code{while} loop should stop making repeated "
"additions when there are no pebbles in a row.  So the test for the "
"@code{while} loop is simply:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:10999
#, no-wrap
msgid "(while (> number-of-pebbles-in-row 0)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11007
msgid ""
"We can put these expressions together to create a function definition that "
"works.  However, on examination, we find that one of the local variables is "
"unneeded!"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11010
msgid "The function definition looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11023
#, no-wrap
msgid ""
";;; @r{First subtractive version.}\n"
"(defun triangle (number-of-rows)\n"
"  \"Add up the number of pebbles in a triangle.\"\n"
"  (let ((total 0)\n"
"        (number-of-pebbles-in-row number-of-rows))\n"
"    (while (> number-of-pebbles-in-row 0)\n"
"      (setq total (+ total number-of-pebbles-in-row))\n"
"      (setq number-of-pebbles-in-row\n"
"            (1- number-of-pebbles-in-row)))\n"
"    total))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11027
msgid "As written, this function works."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11029
msgid "However, we do not need @code{number-of-pebbles-in-row}."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:11030
#, no-wrap
msgid "Argument as local variable"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11039
msgid ""
"When the @code{triangle} function is evaluated, the symbol "
"@code{number-of-rows} will be bound to a number, giving it an initial "
"value.  That number can be changed in the body of the function as if it were "
"a local variable, without any fear that such a change will effect the value "
"of the variable outside of the function.  This is a very useful "
"characteristic of Lisp; it means that the variable @code{number-of-rows} can "
"be used anywhere in the function where @code{number-of-pebbles-in-row} is "
"used."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11042
msgid "Here is a second version of the function written a bit more cleanly:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11052
#, no-wrap
msgid ""
"(defun triangle (number)                ; @r{Second version.}\n"
"  \"Return sum of numbers 1 through NUMBER inclusive.\"\n"
"  (let ((total 0))\n"
"    (while (> number 0)\n"
"      (setq total (+ total number))\n"
"      (setq number (1- number)))\n"
"    total))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11056
msgid "In brief, a properly written @code{while} loop will consist of three parts:"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:11061
msgid ""
"A test that will return false after the loop has repeated itself the correct "
"number of times."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:11065
msgid ""
"An expression the evaluation of which will return the value desired after "
"being repeatedly evaluated."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:11070
msgid ""
"An expression to change the value passed to the true-or-false-test so that "
"the test returns false after the loop has repeated itself the right number "
"of times."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:11072
#, no-wrap
msgid "dolist dotimes"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11079
msgid ""
"In addition to @code{while}, both @code{dolist} and @code{dotimes} provide "
"for looping.  Sometimes these are quicker to write than the equivalent "
"@code{while} loop.  Both are Lisp macros.  (@xref{Macros, , Macros, elisp, "
"The GNU Emacs Lisp Reference Manual}. )"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11084
msgid ""
"@code{dolist} works like a @code{while} loop that `@sc{cdr}s down a list': "
"@code{dolist} automatically shortens the list each time it loops---takes the "
"@sc{cdr} of the list---and binds the @sc{car} of each shorter version of the "
"list to the first of its arguments."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11086
msgid "@code{dotimes} loops a specific number of times: you specify the number."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:11092 emacs-lisp-intro.texi:11094
#, no-wrap
msgid "dolist"
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:11093
#, no-wrap
msgid "The @code{dolist} Macro"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11098
msgid ""
"Suppose, for example, you want to reverse a list, so that ``first'' "
"``second'' ``third'' becomes ``third'' ``second'' ``first''."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11101
msgid "In practice, you would use the @code{reverse} function, like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11107
#, no-wrap
msgid "(reverse animals)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11113
msgid "Here is how you could reverse the list using a @code{while} loop:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11125
#, no-wrap
msgid ""
"(defun reverse-list-with-while (list)\n"
"  \"Using while, reverse the order of LIST.\"\n"
"  (let (value)  ; make sure list starts empty\n"
"    (while list\n"
"      (setq value (cons (car list) value))\n"
"      (setq list (cdr list)))\n"
"    value))\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11127
#, no-wrap
msgid "(reverse-list-with-while animals)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11133
msgid "And here is how you could use the @code{dolist} macro:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11143
#, no-wrap
msgid ""
"(defun reverse-list-with-dolist (list)\n"
"  \"Using dolist, reverse the order of LIST.\"\n"
"  (let (value)  ; make sure list starts empty\n"
"    (dolist (element list value)\n"
"      (setq value (cons element value)))))\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11145
#, no-wrap
msgid "(reverse-list-with-dolist animals)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11152
msgid ""
"In Info, you can place your cursor after the closing parenthesis of each "
"expression and type @kbd{C-x C-e}; in each case, you should see"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:11155
#, no-wrap
msgid "(tiger lion giraffe gazelle)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11159
msgid "in the echo area."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11168
msgid ""
"For this example, the existing @code{reverse} function is obviously best.  "
"The @code{while} loop is just like our first example (@pxref{Loop Example, , "
"A @code{while} Loop and a List}).  The @code{while} first checks whether the "
"list has elements; if so, it constructs a new list by adding the first "
"element of the list to the existing list (which in the first iteration of "
"the loop is @code{nil}).  Since the second element is prepended in front of "
"the first element, and the third element is prepended in front of the second "
"element, the list is reversed."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11175
msgid ""
"In the expression using a @code{while} loop, the @w{@code{(setq list (cdr "
"list))}} expression shortens the list, so the @code{while} loop eventually "
"stops.  In addition, it provides the @code{cons} expression with a new first "
"element by creating a new and shorter list at each repetition of the loop."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11179
msgid ""
"The @code{dolist} expression does very much the same as the @code{while} "
"expression, except that the @code{dolist} macro does some of the work you "
"have to do when writing a @code{while} expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11185
msgid ""
"Like a @code{while} loop, a @code{dolist} loops.  What is different is that "
"it automatically shortens the list each time it loops---it `@sc{cdr}s down "
"the list' on its own---and it automatically binds the @sc{car} of each "
"shorter version of the list to the first of its arguments."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11190
msgid ""
"In the example, the @sc{car} of each shorter version of the list is referred "
"to using the symbol @samp{element}, the list itself is called @samp{list}, "
"and the value returned is called @samp{value}.  The remainder of the "
"@code{dolist} expression is the body."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11195
msgid ""
"The @code{dolist} expression binds the @sc{car} of each shorter version of "
"the list to @code{element} and then evaluates the body of the expression; "
"and repeats the loop.  The result is returned in @code{value}."
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:11197
#, no-wrap
msgid "The @code{dotimes} Macro"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11202
msgid ""
"The @code{dotimes} macro is similar to @code{dolist}, except that it loops a "
"specific number of times."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11207
msgid ""
"The first argument to @code{dotimes} is assigned the numbers 0, 1, 2 and so "
"forth each time around the loop, and the value of the third argument is "
"returned.  You need to provide the value of the second argument, which is "
"how many times the macro loops."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11214
msgid ""
"For example, the following binds the numbers from 0 up to, but not "
"including, the number 3 to the first argument, @var{number}, and then "
"constructs a list of the three numbers.  (The first number is 0, the second "
"number is 1, and the third number is 2; this makes a total of three numbers "
"in all, starting with zero as the first number.)"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11220
#, no-wrap
msgid ""
"(let (value)      ; otherwise a value is a void variable\n"
"  (dotimes (number 3 value)\n"
"    (setq value (cons number value))))\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11222
#, no-wrap
msgid "@result{} (2 1 0)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11229
msgid ""
"@code{dotimes} returns @code{value}, so the way to use @code{dotimes} is to "
"operate on some expression @var{number} number of times and then return the "
"result, either as a list or an atom."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11233
msgid ""
"Here is an example of a @code{defun} that uses @code{dotimes} to add up the "
"number of pebbles in a triangle."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11241
#, no-wrap
msgid ""
"(defun triangle-using-dotimes (number-of-rows)\n"
"  \"Using dotimes, add up the number of pebbles in a triangle.\"\n"
"(let ((total 0))  ; otherwise a total is a void variable\n"
"  (dotimes (number number-of-rows total)\n"
"    (setq total (+ total (1+ number))))))\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11243
#, no-wrap
msgid "(triangle-using-dotimes 4)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11256
msgid ""
"A recursive function contains code that tells the Lisp interpreter to call a "
"program that runs exactly like itself, but with slightly different "
"arguments.  The code runs exactly the same because it has the same name.  "
"However, even though the program has the same name, it is not the same "
"entity.  It is different.  In the jargon, it is a different `instance'."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11260
msgid ""
"Eventually, if the program is written correctly, the `slightly different "
"arguments' will become sufficiently different from the first arguments that "
"the final instance will stop."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:11273
#, no-wrap
msgid "Building Robots: Extending the Metaphor"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:11274
#, no-wrap
msgid "Building robots"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:11275
#, no-wrap
msgid "Robots, building"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11282
msgid ""
"It is sometimes helpful to think of a running program as a robot that does a "
"job.  In doing its job, a recursive function calls on a second robot to help "
"it.  The second robot is identical to the first in every way, except that "
"the second robot helps the first and has been passed different arguments "
"than the first."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11286
msgid ""
"In a recursive function, the second robot may call a third; and the third "
"may call a fourth, and so on.  Each of these is a different entity; but all "
"are clones."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11290
msgid ""
"Since each robot has slightly different instructions---the arguments will "
"differ from one robot to the next---the last robot should know when to stop."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11292
msgid "Let's expand on the metaphor in which a computer program is a robot."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11300
msgid ""
"A function definition provides the blueprints for a robot.  When you install "
"a function definition, that is, when you evaluate a @code{defun} special "
"form, you install the necessary equipment to build robots.  It is as if you "
"were in a factory, setting up an assembly line.  Robots with the same name "
"are built according to the same blueprints.  So they have, as it were, the "
"same `model number', but a different `serial number'."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11305
msgid ""
"We often say that a recursive function `calls itself'.  What we mean is that "
"the instructions in a recursive function cause the Lisp interpreter to run a "
"different function that has the same name and does the same job as the "
"first, but with different arguments."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11308
msgid ""
"It is important that the arguments differ from one instance to the next; "
"otherwise, the process will never stop."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:11310
#, no-wrap
msgid "The Parts of a Recursive Definition"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:11311
#, no-wrap
msgid "Parts of a Recursive Definition"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11316
msgid ""
"A recursive function typically contains a conditional expression which has "
"three parts:"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:11321
msgid ""
"A true-or-false-test that determines whether the function is called again, "
"here called the @dfn{do-again-test}."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:11325
msgid ""
"The name of the function.  When this name is called, a new instance of the "
"function---a new robot, as it were---is created and told what to do."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:11333
msgid ""
"An expression that returns a different value each time the function is "
"called, here called the @dfn{next-step-expression}.  Consequently, the "
"argument (or arguments) passed to the new instance of the function will be "
"different from that passed to the previous instance.  This causes the "
"conditional expression, the @dfn{do-again-test}, to test false after the "
"correct number of repetitions."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11340
msgid ""
"Recursive functions can be much simpler than any other kind of function.  "
"Indeed, when people first start to use them, they often look so mysteriously "
"simple as to be incomprehensible.  Like riding a bicycle, reading a "
"recursive function definition takes a certain knack which is hard at first "
"but then seems simple."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11344
msgid ""
"There are several different common recursive patterns.  A very simple "
"pattern looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11353
#, no-wrap
msgid ""
"(defun @var{name-of-recursive-function} (@var{argument-list})\n"
"  \"@var{documentation}@dots{}\"\n"
"  (if @var{do-again-test}\n"
"    @var{body}@dots{}\n"
"    (@var{name-of-recursive-function}\n"
"         @var{next-step-expression})))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11358
msgid ""
"Each time a recursive function is evaluated, a new instance of it is created "
"and told what to do.  The arguments tell the instance what to do."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11361
msgid ""
"An argument is bound to the value of the next-step-expression.  Each "
"instance runs with a different value of the next-step-expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11363
msgid "The value in the next-step-expression is used in the do-again-test."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11369
msgid ""
"The value returned by the next-step-expression is passed to the new instance "
"of the function, which evaluates it (or some transmogrification of it) to "
"determine whether to continue or stop.  The next-step-expression is designed "
"so that the do-again-test returns false when the function should no longer "
"be repeated."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11372
msgid ""
"The do-again-test is sometimes called the @dfn{stop condition}, since it "
"stops the repetitions when it tests false."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:11374
#, no-wrap
msgid "Recursion with a List"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11379
msgid ""
"The example of a @code{while} loop that printed the elements of a list of "
"numbers can be written recursively.  Here is the code, including an "
"expression to set the value of the variable @code{animals} to a list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11387
msgid ""
"If you are reading this in Info in Emacs, you can evaluate this expression "
"directly in Info.  Otherwise, you must copy the example to the "
"@file{*scratch*} buffer and evaluate each expression there.  Use @kbd{C-u "
"C-x C-e} to evaluate the @code{(print-elements-recursively animals)} "
"expression so that the results are printed in the buffer; otherwise the Lisp "
"interpreter will try to squeeze the results into the one line of the echo "
"area."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11391
msgid ""
"Also, place your cursor immediately after the last closing parenthesis of "
"the @code{print-elements-recursively} function, before the comment.  "
"Otherwise, the Lisp interpreter will try to evaluate the comment."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:11392
#, no-wrap
msgid "print-elements-recursively"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11404 emacs-lisp-intro.texi:11824
#, no-wrap
msgid ""
"(defun print-elements-recursively (list)\n"
"  \"Print each element of LIST on a line of its own.\n"
"Uses recursion.\"\n"
"  (when list                            ; @r{do-again-test}\n"
"        (print (car list))              ; @r{body}\n"
"        (print-elements-recursively     ; @r{recursive call}\n"
"         (cdr list))))                  ; @r{next-step-expression}\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11406 emacs-lisp-intro.texi:11826
#, no-wrap
msgid "(print-elements-recursively animals)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11415
msgid ""
"The @code{print-elements-recursively} function first tests whether there is "
"any content in the list; if there is, the function prints the first element "
"of the list, the @sc{car} of the list.  Then the function `invokes itself', "
"but gives itself as its argument, not the whole list, but the second and "
"subsequent elements of the list, the @sc{cdr} of the list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11420
msgid ""
"Put another way, if the list is not empty, the function invokes another "
"instance of code that is similar to the initial code, but is a different "
"thread of execution, with different arguments than the first instance."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11424
msgid ""
"Put in yet another way, if the list is not empty, the first robot assembles "
"a second robot and tells it what to do; the second robot is a different "
"individual from the first, but is the same model."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11431
msgid ""
"When the second evaluation occurs, the @code{when} expression is evaluated "
"and if true, prints the first element of the list it receives as its "
"argument (which is the second element of the original list).  Then the "
"function `calls itself' with the @sc{cdr} of the list it is invoked with, "
"which (the second time around) is the @sc{cdr} of the @sc{cdr} of the "
"original list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11436
msgid ""
"Note that although we say that the function `calls itself', what we mean is "
"that the Lisp interpreter assembles and instructs a new instance of the "
"program.  The new instance is a clone of the first, but is a separate "
"individual."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11440
msgid ""
"Each time the function `invokes itself', it invokes itself on a shorter "
"version of the original list.  It creates a new instance that works on a "
"shorter list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11446
msgid ""
"Eventually, the function invokes itself on an empty list.  It creates a new "
"instance whose argument is @code{nil}.  The conditional expression tests the "
"value of @code{list}.  Since the value of @code{list} is @code{nil}, the "
"@code{when} expression tests false so the then-part is not evaluated.  The "
"function as a whole then returns @code{nil}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11450
msgid ""
"When you evaluate the expression @code{(print-elements-recursively animals)} "
"in the @file{*scratch*} buffer, you see this result:"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:11465
#, no-wrap
msgid "Recursive triangle function"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:11467
#, no-wrap
msgid "triangle-recursively"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11472
msgid ""
"The @code{triangle} function described in a previous section can also be "
"written recursively.  It looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11483
#, no-wrap
msgid ""
"(defun triangle-recursively (number)\n"
"  \"Return the sum of the numbers 1 through NUMBER inclusive.\n"
"Uses recursion.\"\n"
"  (if (= number 1)                    ; @r{do-again-test}\n"
"      1                               ; @r{then-part}\n"
"    (+ number                         ; @r{else-part}\n"
"       (triangle-recursively          ; @r{recursive call}\n"
"        (1- number)))))               ; @r{next-step-expression}\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11485
#, no-wrap
msgid "(triangle-recursively 7)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11493
msgid ""
"You can install this function by evaluating it and then try it by evaluating "
"@code{(triangle-recursively 7)}.  (Remember to put your cursor immediately "
"after the last parenthesis of the function definition, before the comment.)  "
"The function evaluates to 28."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11497
msgid ""
"To understand how this function works, let's consider what happens in the "
"various cases when the function is passed 1, 2, 3, or 4 as the value of its "
"argument."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:11504
#, no-wrap
msgid "Recursive Example arg of 1 or 2"
msgstr ""

#. type: unnumberedsubsubsec
#: emacs-lisp-intro.texi:11505
#, no-wrap
msgid "An argument of 1 or 2"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11509
msgid "First, what happens if the value of the argument is 1?"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11515
msgid ""
"The function has an @code{if} expression after the documentation string.  It "
"tests whether the value of @code{number} is equal to 1; if so, Emacs "
"evaluates the then-part of the @code{if} expression, which returns the "
"number 1 as the value of the function.  (A triangle with one row has one "
"pebble in it.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11518
msgid ""
"Suppose, however, that the value of the argument is 2.  In this case, Emacs "
"evaluates the else-part of the @code{if} expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11523
msgid ""
"The else-part consists of an addition, the recursive call to "
"@code{triangle-recursively} and a decrementing action; and it looks like "
"this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:11526
#, no-wrap
msgid "(+ number (triangle-recursively (1- number)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11531
msgid ""
"When Emacs evaluates this expression, the innermost expression is evaluated "
"first; then the other parts in sequence.  Here are the steps in detail:"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:11533
#, no-wrap
msgid "Step 1 @w{  } Evaluate the innermost expression."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:11537
msgid ""
"The innermost expression is @code{(1- number)} so Emacs decrements the value "
"of @code{number} from 2 to 1."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:11538
#, no-wrap
msgid "Step 2 @w{  } Evaluate the @code{triangle-recursively} function."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:11545
msgid ""
"The Lisp interpreter creates an individual instance of "
"@code{triangle-recursively}.  It does not matter that this function is "
"contained within itself.  Emacs passes the result Step 1 as the argument "
"used by this instance of the @code{triangle-recursively} function"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:11549
msgid ""
"In this case, Emacs evaluates @code{triangle-recursively} with an argument "
"of 1.  This means that this evaluation of @code{triangle-recursively} "
"returns 1."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:11550
#, no-wrap
msgid "Step 3 @w{  } Evaluate the value of @code{number}."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:11554
msgid ""
"The variable @code{number} is the second element of the list that starts "
"with @code{+}; its value is 2."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:11555
#, no-wrap
msgid "Step 4 @w{  } Evaluate the @code{+} expression."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:11560
msgid ""
"The @code{+} expression receives two arguments, the first from the "
"evaluation of @code{number} (Step 3) and the second from the evaluation of "
"@code{triangle-recursively} (Step 2)."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:11564
msgid ""
"The result of the addition is the sum of 2 plus 1, and the number 3 is "
"returned, which is correct.  A triangle with two rows has three pebbles in "
"it."
msgstr ""

#. type: unnumberedsubsubsec
#: emacs-lisp-intro.texi:11567
#, no-wrap
msgid "An argument of 3 or 4"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11571
msgid "Suppose that @code{triangle-recursively} is called with an argument of 3."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:11573
#, no-wrap
msgid "Step 1 @w{  } Evaluate the do-again-test."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:11580
msgid ""
"The @code{if} expression is evaluated first.  This is the do-again test and "
"returns false, so the else-part of the @code{if} expression is evaluated.  "
"(Note that in this example, the do-again-test causes the function to call "
"itself when it tests false, not when it tests true.)"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:11581
#, no-wrap
msgid "Step 2 @w{  } Evaluate the innermost expression of the else-part."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:11585
msgid ""
"The innermost expression of the else-part is evaluated, which decrements 3 "
"to 2.  This is the next-step-expression."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:11586
#, no-wrap
msgid "Step 3 @w{  } Evaluate the @code{triangle-recursively} function."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:11589
msgid "The number 2 is passed to the @code{triangle-recursively} function."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:11593
msgid ""
"We already know what happens when Emacs evaluates "
"@code{triangle-recursively} with an argument of 2.  After going through the "
"sequence of actions described earlier, it returns a value of 3.  So that is "
"what will happen here."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:11594
#, no-wrap
msgid "Step 4 @w{  } Evaluate the addition."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:11598
msgid ""
"3 will be passed as an argument to the addition and will be added to the "
"number with which the function was called, which is 3."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11602
msgid "The value returned by the function as a whole will be 6."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11606
msgid ""
"Now that we know what will happen when @code{triangle-recursively} is called "
"with an argument of 3, it is evident what will happen if it is called with "
"an argument of 4:"
msgstr ""

#. type: quotation
#: emacs-lisp-intro.texi:11610
msgid "In the recursive call, the evaluation of"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:11613
#, no-wrap
msgid "(triangle-recursively (1- 4))\n"
msgstr ""

#. type: quotation
#: emacs-lisp-intro.texi:11618
msgid "will return the value of evaluating"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:11621
#, no-wrap
msgid "(triangle-recursively 3)\n"
msgstr ""

#. type: quotation
#: emacs-lisp-intro.texi:11626
msgid ""
"which is 6 and this value will be added to 4 by the addition in the third "
"line."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11630
msgid "The value returned by the function as a whole will be 10."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11635
msgid ""
"Each time @code{triangle-recursively} is evaluated, it evaluates a version "
"of itself---a different instance of itself---with a smaller argument, until "
"the argument is small enough so that it does not evaluate itself."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11638
msgid ""
"Note that this particular design for a recursive function requires that "
"operations be deferred."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11647
msgid ""
"Before @code{(triangle-recursively 7)} can calculate its answer, it must "
"call @code{(triangle-recursively 6)}; and before @code{(triangle-recursively "
"6)} can calculate its answer, it must call @code{(triangle-recursively 5)}; "
"and so on.  That is to say, the calculation that @code{(triangle-recursively "
"7)} makes must be deferred until @code{(triangle-recursively 6)} makes its "
"calculation; and @code{(triangle-recursively 6)} must defer until "
"@code{(triangle-recursively 5)} completes; and so on."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11652
msgid ""
"If each of these instances of @code{triangle-recursively} are thought of as "
"different robots, the first robot must wait for the second to complete its "
"job, which must wait until the third completes, and so on."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11655
msgid ""
"There is a way around this kind of waiting, which we will discuss in @ref{No "
"Deferment, , Recursion without Deferments}."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:11656
#, no-wrap
msgid "Recursion with cond"
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:11657
#, no-wrap
msgid "Recursion Example Using @code{cond}"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:11658
#, no-wrap
msgid "cond"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11664
msgid ""
"The version of @code{triangle-recursively} described earlier is written with "
"the @code{if} special form.  It can also be written using another special "
"form called @code{cond}.  The name of the special form @code{cond} is an "
"abbreviation of the word @samp{conditional}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11668
msgid ""
"Although the @code{cond} special form is not used as often in the Emacs Lisp "
"sources as @code{if}, it is used often enough to justify explaining it."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11671
msgid "The template for a @code{cond} expression looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11676
#, no-wrap
msgid ""
"(cond\n"
" @var{body}@dots{})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11681
msgid "where the @var{body} is a series of lists."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11684
msgid "Written out more fully, the template looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11692
#, no-wrap
msgid ""
"(cond\n"
" (@var{first-true-or-false-test} @var{first-consequent})\n"
" (@var{second-true-or-false-test} @var{second-consequent})\n"
" (@var{third-true-or-false-test} @var{third-consequent})\n"
"  @dots{})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11699
msgid ""
"When the Lisp interpreter evaluates the @code{cond} expression, it evaluates "
"the first element (the @sc{car} or true-or-false-test) of the first "
"expression in a series of expressions within the body of the @code{cond}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11709
msgid ""
"If the true-or-false-test returns @code{nil} the rest of that expression, "
"the consequent, is skipped and the true-or-false-test of the next expression "
"is evaluated.  When an expression is found whose true-or-false-test returns "
"a value that is not @code{nil}, the consequent of that expression is "
"evaluated.  The consequent can be one or more expressions.  If the "
"consequent consists of more than one expression, the expressions are "
"evaluated in sequence and the value of the last one is returned.  If the "
"expression does not have a consequent, the value of the true-or-false-test "
"is returned."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11712
msgid ""
"If none of the true-or-false-tests test true, the @code{cond} expression "
"returns @code{nil}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11715
msgid "Written using @code{cond}, the @code{triangle} function looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11723
#, no-wrap
msgid ""
"(defun triangle-using-cond (number)\n"
"  (cond ((<= number 0) 0)\n"
"        ((= number 1) 1)\n"
"        ((> number 1)\n"
"         (+ number (triangle-using-cond (1- number))))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11731
msgid ""
"In this example, the @code{cond} returns 0 if the number is less than or "
"equal to 0, it returns 1 if the number is 1 and it evaluates @code{(+ number "
"(triangle-using-cond (1- number)))} if the number is greater than 1."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11739
msgid ""
"Here are three common recursive patterns.  Each involves a list.  Recursion "
"does not need to involve lists, but Lisp is designed for lists and this "
"provides a sense of its primal capabilities."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:11746
#, no-wrap
msgid "Every"
msgstr ""

#. type: unnumberedsubsubsec
#: emacs-lisp-intro.texi:11747
#, no-wrap
msgid "Recursive Pattern: @emph{every}"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:11748
#, no-wrap
msgid "Every, type of recursive pattern"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:11749
#, no-wrap
msgid "Recursive pattern: every"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11753
msgid ""
"In the @code{every} recursive pattern, an action is performed on every "
"element of a list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11756
msgid "The basic pattern is:"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:11760 emacs-lisp-intro.texi:11915
msgid "If a list be empty, return @code{nil}."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:11770
msgid ""
"Else, act on the beginning of the list (the @sc{car} of the list)  @itemize "
"@minus @item through a recursive call by the function on the rest (the "
"@sc{cdr}) of the list, @item and, optionally, combine the acted-on element, "
"using @code{cons}, with the results of acting on the rest.  @end itemize"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11774
msgid "Here is example:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11784
#, no-wrap
msgid ""
"(defun square-each (numbers-list)\n"
"  \"Square each of a NUMBERS LIST, recursively.\"\n"
"  (if (not numbers-list)                ; do-again-test\n"
"      nil\n"
"    (cons\n"
"     (* (car numbers-list) (car numbers-list))\n"
"     (square-each (cdr numbers-list))))) ; next-step-expression\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11789
#, no-wrap
msgid ""
"(square-each '(1 2 3))\n"
"    @result{} (1 4 9)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11797
msgid ""
"If @code{numbers-list} is empty, do nothing.  But if it has content, "
"construct a list combining the square of the first number in the list with "
"the result of the recursive call."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11802
msgid ""
"(The example follows the pattern exactly: @code{nil} is returned if the "
"numbers' list is empty.  In practice, you would write the conditional so it "
"carries out the action when the numbers' list is not empty.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11807
msgid ""
"The @code{print-elements-recursively} function (@pxref{Recursion with list, "
", Recursion with a List}) is another example of an @code{every} pattern, "
"except in this case, rather than bring the results together using "
"@code{cons}, we print each element of output."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11810
msgid "The @code{print-elements-recursively} function looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11814
#, no-wrap
msgid "(setq animals '(gazelle giraffe lion tiger))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11831
msgid "The pattern for @code{print-elements-recursively} is:"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:11835
msgid "When the list is empty, do nothing."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:11843
msgid ""
"But when the list has at least one element, @itemize @minus @item act on the "
"beginning of the list (the @sc{car} of the list), @item and make a recursive "
"call on the rest (the @sc{cdr}) of the list.  @end itemize"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:11845
#, no-wrap
msgid "Accumulate"
msgstr ""

#. type: unnumberedsubsubsec
#: emacs-lisp-intro.texi:11846
#, no-wrap
msgid "Recursive Pattern: @emph{accumulate}"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:11847
#, no-wrap
msgid "Accumulate, type of recursive pattern"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:11848
#, no-wrap
msgid "Recursive pattern: accumulate"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11854
msgid ""
"Another recursive pattern is called the @code{accumulate} pattern.  In the "
"@code{accumulate} recursive pattern, an action is performed on every element "
"of a list and the result of that action is accumulated with the results of "
"performing the action on the other elements."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11857
msgid ""
"This is very like the `every' pattern using @code{cons}, except that "
"@code{cons} is not used, but some other combiner."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11860
msgid "The pattern is:"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:11864
msgid "If a list be empty, return zero or some other constant."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:11873
msgid ""
"Else, act on the beginning of the list (the @sc{car} of the list), @itemize "
"@minus @item and combine that acted-on element, using @code{+} or some other "
"combining function, with @item a recursive call by the function on the rest "
"(the @sc{cdr}) of the list.  @end itemize"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11877
msgid "Here is an example:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11885
#, no-wrap
msgid ""
"(defun add-elements (numbers-list)\n"
"  \"Add the elements of NUMBERS-LIST together.\"\n"
"  (if (not numbers-list)\n"
"      0\n"
"    (+ (car numbers-list) (add-elements (cdr numbers-list)))))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11890
#, no-wrap
msgid ""
"(add-elements '(1 2 3 4))\n"
"    @result{} 10\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11895
msgid ""
"@xref{Files List, , Making a List of Files}, for an example of the "
"accumulate pattern."
msgstr ""

#. type: unnumberedsubsubsec
#: emacs-lisp-intro.texi:11897
#, no-wrap
msgid "Recursive Pattern: @emph{keep}"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:11898
#, no-wrap
msgid "Keep, type of recursive pattern"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:11899
#, no-wrap
msgid "Recursive pattern: keep"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11905
msgid ""
"A third recursive pattern is called the @code{keep} pattern.  In the "
"@code{keep} recursive pattern, each element of a list is tested; the element "
"is acted on and the results are kept only if the element meets a criterion."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11908
msgid ""
"Again, this is very like the `every' pattern, except the element is skipped "
"unless it meets a criterion."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11911
msgid "The pattern has three parts:"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:11924
msgid ""
"Else, if the beginning of the list (the @sc{car} of the list) passes a test "
"@itemize @minus @item act on that element and combine it, using @code{cons} "
"with @item a recursive call by the function on the rest (the @sc{cdr}) of "
"the list.  @end itemize"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:11933
msgid ""
"Otherwise, if the beginning of the list (the @sc{car} of the list) fails the "
"test @itemize @minus @item skip on that element, @item and, recursively call "
"the function on the rest (the @sc{cdr}) of the list.  @end itemize"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11937
msgid "Here is an example that uses @code{cond}:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11945
#, no-wrap
msgid ""
"(defun keep-three-letter-words (word-list)\n"
"  \"Keep three letter words in WORD-LIST.\"\n"
"  (cond\n"
"   ;; First do-again-test: stop-condition\n"
"   ((not word-list) nil)\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11950
#, no-wrap
msgid ""
"   ;; Second do-again-test: when to act\n"
"   ((eq 3 (length (symbol-name (car word-list))))\n"
"    ;; combine acted-on element with recursive call on shorter list\n"
"    (cons (car word-list) (keep-three-letter-words (cdr word-list))))\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11954
#, no-wrap
msgid ""
"   ;; Third do-again-test: when to skip element;\n"
"   ;;   recursively call shorter list with next-step expression\n"
"   (t (keep-three-letter-words (cdr word-list)))))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11959
#, no-wrap
msgid ""
"(keep-three-letter-words '(one two three four five six))\n"
"    @result{} (one two six)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11964
msgid ""
"It goes without saying that you need not use @code{nil} as the test for when "
"to stop; and you can, of course, combine these patterns."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:11966 emacs-lisp-intro.texi:11968
#, no-wrap
msgid "Recursion without Deferments"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:11967
#, no-wrap
msgid "Deferment in recursion"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11973
msgid ""
"Let's consider again what happens with the @code{triangle-recursively} "
"function.  We will find that the intermediate calculations are deferred "
"until all can be done."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11976
msgid "Here is the function definition:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:11987
#, no-wrap
msgid ""
"(defun triangle-recursively (number)\n"
"  \"Return the sum of the numbers 1 through NUMBER inclusive.\n"
"Uses recursion.\"\n"
"  (if (= number 1)                    ; @r{do-again-test}\n"
"      1                               ; @r{then-part}\n"
"    (+ number                         ; @r{else-part}\n"
"       (triangle-recursively          ; @r{recursive call}\n"
"        (1- number)))))               ; @r{next-step-expression}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11991
msgid "What happens when we call this function with a argument of 7?"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:11996
msgid ""
"The first instance of the @code{triangle-recursively} function adds the "
"number 7 to the value returned by a second instance of "
"@code{triangle-recursively}, an instance that has been passed an argument of "
"6.  That is to say, the first calculation is:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:11999
#, no-wrap
msgid "(+ 7 (triangle-recursively 6))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12010
msgid ""
"The first instance of @code{triangle-recursively}---you may want to think of "
"it as a little robot---cannot complete its job.  It must hand off the "
"calculation for @code{(triangle-recursively 6)} to a second instance of the "
"program, to a second robot.  This second individual is completely different "
"from the first one; it is, in the jargon, a `different instantiation'.  Or, "
"put another way, it is a different robot.  It is the same model as the "
"first; it calculates triangle numbers recursively; but it has a different "
"serial number."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12015
msgid ""
"And what does @code{(triangle-recursively 6)} return? It returns the number "
"6 added to the value returned by evaluating @code{triangle-recursively} with "
"an argument of 5.  Using the robot metaphor, it asks yet another robot to "
"help it."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12018
msgid "Now the total is:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:12021
#, no-wrap
msgid "(+ 7 6 (triangle-recursively 5))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12025
msgid "And what happens next?"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:12028
#, no-wrap
msgid "(+ 7 6 5 (triangle-recursively 4))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12033
msgid ""
"Each time @code{triangle-recursively} is called, except for the last time, "
"it creates another instance of the program---another robot---and asks it to "
"make a calculation."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12036
msgid "Eventually, the full addition is set up and performed:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:12039
#, no-wrap
msgid "(+ 7 6 5 4 3 2 1)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12047
msgid ""
"This design for the function defers the calculation of the first step until "
"the second can be done, and defers that until the third can be done, and so "
"on.  Each deferment means the computer must remember what is being waited "
"on.  This is not a problem when there are only a few steps, as in this "
"example.  But it can be a problem when there are more steps."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:12049
#, no-wrap
msgid "No Deferment Solution"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:12051
#, no-wrap
msgid "Defermentless solution"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:12052
#, no-wrap
msgid "Solution without deferment"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12061
msgid ""
"The solution to the problem of deferred operations is to write in a manner "
"that does not defer operations@footnote{The phrase @dfn{tail recursive} is "
"used to describe such a process, one that uses `constant space'.}.  This "
"requires writing to a different pattern, often one that involves writing two "
"function definitions, an `initialization' function and a `helper' function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12064
msgid ""
"The `initialization' function sets up the job; the `helper' function does "
"the work."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12068
msgid ""
"Here are the two function definitions for adding up numbers.  They are so "
"simple, I find them hard to understand."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12076
#, no-wrap
msgid ""
"(defun triangle-initialization (number)\n"
"  \"Return the sum of the numbers 1 through NUMBER inclusive.\n"
"This is the `initialization' component of a two function\n"
"duo that uses recursion.\"\n"
"  (triangle-recursive-helper 0 0 number))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12090
#, no-wrap
msgid ""
"(defun triangle-recursive-helper (sum counter number)\n"
"  \"Return SUM, using COUNTER, through NUMBER inclusive.\n"
"This is the `helper' component of a two function duo\n"
"that uses recursion.\"\n"
"  (if (> counter number)\n"
"      sum\n"
"    (triangle-recursive-helper (+ sum counter)  ; @r{sum}\n"
"                               (1+ counter)     ; @r{counter}\n"
"                               number)))        ; @r{number}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12096
msgid ""
"Install both function definitions by evaluating them, then call "
"@code{triangle-initialization} with 2 rows:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12101
#, no-wrap
msgid ""
"(triangle-initialization 2)\n"
"    @result{} 3\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12107
msgid ""
"The `initialization' function calls the first instance of the `helper' "
"function with three arguments: zero, zero, and a number which is the number "
"of rows in the triangle."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12119
msgid ""
"The first two arguments passed to the `helper' function are initialization "
"values.  These values are changed when @code{triangle-recursive-helper} "
"invokes new instances.@footnote{The jargon is mildly confusing: "
"@code{triangle-recursive-helper} uses a process that is iterative in a "
"procedure that is recursive.  The process is called iterative because the "
"computer need only record the three values, @code{sum}, @code{counter}, and "
"@code{number}; the procedure is recursive because the function `calls "
"itself'.  On the other hand, both the process and the procedure used by "
"@code{triangle-recursively} are called recursive.  The word `recursive' has "
"different meanings in the two contexts.}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12122
msgid ""
"Let's see what happens when we have a triangle that has one row.  (This "
"triangle will have one pebble in it!)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12127
msgid ""
"@code{triangle-initialization} will call its helper with the arguments "
"@w{@code{0 0 1}}.  That function will run the conditional test whether "
"@code{(> counter number)}:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:12130
#, no-wrap
msgid "(> 0 1)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12136
msgid ""
"and find that the result is false, so it will invoke the else-part of the "
"@code{if} clause:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12143
#, no-wrap
msgid ""
"    (triangle-recursive-helper\n"
"     (+ sum counter)  ; @r{sum plus counter} @result{} @r{sum}\n"
"     (1+ counter)     ; @r{increment counter} @result{} @r{counter}\n"
"     number)          ; @r{number stays the same}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12149
msgid "which will first compute:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12155
#, no-wrap
msgid ""
"(triangle-recursive-helper (+ 0 0)  ; @r{sum}\n"
"                           (1+ 0)   ; @r{counter}\n"
"                           1)       ; @r{number}\n"
msgstr ""

#. type: exdent
#: emacs-lisp-intro.texi:12155 emacs-lisp-intro.texi:12175
#, no-wrap
msgid "which is:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12158
#, no-wrap
msgid "(triangle-recursive-helper 0 1 1)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12164
msgid ""
"Again, @code{(> counter number)} will be false, so again, the Lisp "
"interpreter will evaluate @code{triangle-recursive-helper}, creating a new "
"instance with new arguments."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12167
msgid "This new instance will be;"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12174
#, no-wrap
msgid ""
"    (triangle-recursive-helper\n"
"     (+ sum counter)  ; @r{sum plus counter} @result{} @r{sum}\n"
"     (1+ counter)     ; @r{increment counter} @result{} @r{counter}\n"
"     number)          ; @r{number stays the same}\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12178
#, no-wrap
msgid "(triangle-recursive-helper 1 2 1)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12184
msgid ""
"In this case, the @code{(> counter number)} test will be true! So the "
"instance will return the value of the sum, which will be 1, as expected."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12187
msgid ""
"Now, let's pass @code{triangle-initialization} an argument of 2, to find out "
"how many pebbles there are in a triangle with two rows."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12189
msgid "That function calls @code{(triangle-recursive-helper 0 0 2)}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12192
msgid "In stages, the instances called will be:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12197
#, no-wrap
msgid ""
"                          @r{sum counter number}\n"
"(triangle-recursive-helper 0    1       2)\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12199
#, no-wrap
msgid ""
"(triangle-recursive-helper 1    2       2)\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12201
#, no-wrap
msgid "(triangle-recursive-helper 3    3       2)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12207
msgid ""
"When the last instance is called, the @code{(> counter number)} test will be "
"true, so the instance will return the value of @code{sum}, which will be 3."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12210
msgid ""
"This kind of pattern helps when you are writing functions that can use many "
"resources in a computer."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:12213
#, no-wrap
msgid "Looping Exercise"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:12219
msgid ""
"Write a function similar to @code{triangle} in which each row has a value "
"which is the square of the row number.  Use a @code{while} loop."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:12223
msgid ""
"Write a function similar to @code{triangle} that multiplies instead of adds "
"the values."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:12227
msgid ""
"Rewrite these two functions recursively.  Rewrite these functions using "
"@code{cond}."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:12234
msgid ""
"Write a function for Texinfo mode that creates an index entry at the "
"beginning of a paragraph for every @samp{@@dfn} within the paragraph.  (In a "
"Texinfo file, @samp{@@dfn} marks a definition.  This book is written in "
"Texinfo.)"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:12242
msgid ""
"Many of the functions you will need are described in two of the previous "
"chapters, @ref{Cutting & Storing Text, , Cutting and Storing Text}, and "
"@ref{Yanking, , Yanking Text Back}.  If you use @code{forward-paragraph} to "
"put the index entry at the beginning of the paragraph, you will have to use "
"@w{@kbd{C-h f}} (@code{describe-function}) to find out how to make the "
"command go backwards."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:12244
msgid "For more information, see"
msgstr ""

#. type: ifinfo
#: emacs-lisp-intro.texi:12246
msgid "@ref{Indicating, , Indicating Definitions, texinfo}."
msgstr ""

#. type: ifhtml
#: emacs-lisp-intro.texi:12252
msgid ""
"@ref{Indicating, , Indicating, texinfo, Texinfo Manual}, which goes to a "
"Texinfo manual in the current directory.  Or, if you are on the Internet, "
"see @uref{http://www.gnu.org/software/texinfo/manual/texinfo/}"
msgstr ""

#. type: iftex
#: emacs-lisp-intro.texi:12256
msgid ""
"``Indicating Definitions, Commands, etc.'' in @cite{Texinfo, The GNU "
"Documentation Format}."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:12261
#, no-wrap
msgid "Searches, illustrating"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:12262
#, no-wrap
msgid "Regular expression searches"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:12263
#, no-wrap
msgid "Patterns, searching for"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:12264
#, no-wrap
msgid "Motion by sentence and paragraph"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:12265
#, no-wrap
msgid "Sentences, movement by"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:12266
#, no-wrap
msgid "Paragraphs, movement by"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12273
msgid ""
"Regular expression searches are used extensively in GNU Emacs.  The two "
"functions, @code{forward-sentence} and @code{forward-paragraph}, illustrate "
"these searches well.  They use regular expressions to find where to move "
"point.  The phrase `regular expression' is often written as `regexp'."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12284
msgid ""
"Regular expression searches are described in @ref{Regexp Search, , Regular "
"Expression Search, emacs, The GNU Emacs Manual}, as well as in @ref{Regular "
"Expressions, , , elisp, The GNU Emacs Lisp Reference Manual}.  In writing "
"this chapter, I am presuming that you have at least a mild acquaintance with "
"them.  The major point to remember is that regular expressions permit you to "
"search for patterns as well as for literal strings of characters.  For "
"example, the code in @code{forward-sentence} searches for the pattern of "
"possible characters that could mark the end of a sentence, and moves point "
"to that spot."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12294
msgid ""
"Before looking at the code for the @code{forward-sentence} function, it is "
"worth considering what the pattern that marks the end of a sentence must "
"be.  The pattern is discussed in the next section; following that is a "
"description of the regular expression search function, "
"@code{re-search-forward}.  The @code{forward-sentence} function is described "
"in the section following.  Finally, the @code{forward-paragraph} function is "
"described in the last section of this chapter.  @code{forward-paragraph} is "
"a complex function that introduces several new features."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:12306
#, no-wrap
msgid "The Regular Expression for @code{sentence-end}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12311
msgid ""
"The symbol @code{sentence-end} is bound to the pattern that marks the end of "
"a sentence.  What should this regular expression be?"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12316
msgid ""
"Clearly, a sentence may be ended by a period, a question mark, or an "
"exclamation mark.  Indeed, in English, only clauses that end with one of "
"those three characters should be considered the end of a sentence.  This "
"means that the pattern should include the character set:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:12319
#, no-wrap
msgid "[.?!]\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12325
msgid ""
"However, we do not want @code{forward-sentence} merely to jump to a period, "
"a question mark, or an exclamation mark, because such a character might be "
"used in the middle of a sentence.  A period, for example, is used after "
"abbreviations.  So other information is needed."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12333
msgid ""
"According to convention, you type two spaces after every sentence, but only "
"one space after a period, a question mark, or an exclamation mark in the "
"body of a sentence.  So a period, a question mark, or an exclamation mark "
"followed by two spaces is a good indicator of an end of sentence.  However, "
"in a file, the two spaces may instead be a tab or the end of a line.  This "
"means that the regular expression should include these three items as "
"alternatives."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12336
msgid "This group of alternatives will look like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12342
#, no-wrap
msgid ""
"\\\\($\\\\| \\\\|  \\\\)\n"
"       ^   ^^\n"
"      TAB  SPC\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12349
msgid ""
"Here, @samp{$} indicates the end of the line, and I have pointed out where "
"the tab and two spaces are inserted in the expression.  Both are inserted by "
"putting the actual characters into the expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12354
msgid ""
"Two backslashes, @samp{\\\\}, are required before the parentheses and "
"vertical bars: the first backslash quotes the following backslash in Emacs; "
"and the second indicates that the following character, the parenthesis or "
"the vertical bar, is special."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12358
msgid "Also, a sentence may be followed by one or more carriage returns, like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12363
#, no-wrap
msgid ""
"[\n"
"]*\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12370
msgid ""
"Like tabs and spaces, a carriage return is inserted into a regular "
"expression by inserting it literally.  The asterisk indicates that the "
"@key{RET} is repeated zero or more times."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12376
msgid ""
"But a sentence end does not consist only of a period, a question mark or an "
"exclamation mark followed by appropriate space: a closing quotation mark or "
"a closing brace of some kind may precede the space.  Indeed more than one "
"such mark or brace may precede the space.  These require a expression that "
"looks like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:12379
#, no-wrap
msgid "[]\\\"')@}]*\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12385
msgid ""
"In this expression, the first @samp{]} is the first character in the "
"expression; the second character is @samp{\"}, which is preceded by a "
"@samp{\\} to tell Emacs the @samp{\"} is @emph{not} special.  The last three "
"characters are @samp{'}, @samp{)}, and @samp{@}}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12389
msgid ""
"All this suggests what the regular expression pattern for matching the end "
"of a sentence should be; and, indeed, if we evaluate @code{sentence-end} we "
"find that it returns the following value:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12395
#, no-wrap
msgid ""
"sentence-end\n"
"     @result{} \"[.?!][]\\\"')@}]*\\\\($\\\\|     \\\\|  \\\\)[\n"
"]*\"\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12412
msgid ""
"(Well, not in GNU Emacs 22; that is because of an effort to make the process "
"simpler and to handle more glyphs and languages.  When the value of "
"@code{sentence-end} is @code{nil}, then use the value defined by the "
"function @code{sentence-end}.  (Here is a use of the difference between a "
"value and a function in Emacs Lisp.)  The function returns a value "
"constructed from the variables @code{sentence-end-base}, "
"@code{sentence-end-double-space}, @code{sentence-end-without-period}, and "
"@code{sentence-end-without-space}.  The critical variable is "
"@code{sentence-end-base}; its global value is similar to the one described "
"above but it also contains two additional quotation marks.  These have "
"differing degrees of curliness.  The @code{sentence-end-without-period} "
"variable, when true, tells Emacs that a sentence may end without a period, "
"such as text in Thai.)"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:12421
#, no-wrap
msgid "[.?!]"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:12425
#, no-wrap
msgid ""
"The first part of the pattern is the three characters, a period, a "
"question\n"
"mark and an exclamation mark, within square brackets.  The pattern must\n"
"begin with one or other of these characters.\n"
"\n"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:12426
#, no-wrap
msgid "[]\\\"')@}]*"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:12436
#, no-wrap
msgid ""
"The second part of the pattern is the group of closing braces and\n"
"quotation marks, which can appear zero or more times.  These may follow\n"
"the period, question mark or exclamation mark.  In a regular expression,\n"
"the backslash, @samp{\\}, followed by the double quotation mark,\n"
"@samp{\"}, indicates the class of string-quote characters.  Usually, the\n"
"double quotation mark is the only character in this class.  The\n"
"asterisk, @samp{*}, indicates that the items in the previous group (the\n"
"group surrounded by square brackets, @samp{[]}) may be repeated zero or\n"
"more times.\n"
"\n"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:12437
#, no-wrap
msgid "\\\\($\\\\|   \\\\|  \\\\)"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:12446
#, no-wrap
msgid ""
"The third part of the pattern is one or other of: either the end of a\n"
"line, or two blank spaces, or a tab.  The double back-slashes are used\n"
"to prevent Emacs from reading the parentheses and vertical bars as part\n"
"of the search pattern; the parentheses are used to mark the group and\n"
"the vertical bars are used to indicated that the patterns to either side\n"
"of them are alternatives.  The dollar sign is used to indicate the end\n"
"of a line and both the two spaces and the tab are each inserted as is to\n"
"indicate what they are.\n"
"\n"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:12447
#, no-wrap
msgid "[@key{RET}]*"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:12453
#, no-wrap
msgid ""
"Finally, the last part of the pattern indicates that the end of the line\n"
"or the whitespace following the period, question mark or exclamation\n"
"mark may, but need not, be followed by one or more carriage returns.  In\n"
"the pattern, the carriage return is inserted as an actual carriage\n"
"return between square brackets but here it is shown as @key{RET}.\n"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:12457
#, no-wrap
msgid "The @code{re-search-forward} Function"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12463
msgid ""
"The @code{re-search-forward} function is very like the @code{search-forward} "
"function.  (@xref{search-forward, , The @code{search-forward} Function}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12470
msgid ""
"@code{re-search-forward} searches for a regular expression.  If the search "
"is successful, it leaves point immediately after the last character in the "
"target.  If the search is backwards, it leaves point just before the first "
"character in the target.  You may tell @code{re-search-forward} to return "
"@code{t} for true.  (Moving point is therefore a `side effect'.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12473
msgid ""
"Like @code{search-forward}, the @code{re-search-forward} function takes four "
"arguments:"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:12478
msgid ""
"The first argument is the regular expression that the function searches "
"for.  The regular expression will be a string between quotation marks."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:12482
msgid ""
"The optional second argument limits how far the function will search; it is "
"a bound, which is specified as a position in the buffer."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:12489
msgid ""
"The optional third argument specifies how the function responds to failure: "
"@code{nil} as the third argument causes the function to signal an error (and "
"print a message) when the search fails; any other value causes it to return "
"@code{nil} if the search fails and @code{t} if the search succeeds."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:12493
msgid ""
"The optional fourth argument is the repeat count.  A negative repeat count "
"causes @code{re-search-forward} to search backwards."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12497
msgid "The template for @code{re-search-forward} looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12504
#, no-wrap
msgid ""
"(re-search-forward \"@var{regular-expression}\"\n"
"                @var{limit-of-search}\n"
"                @var{what-to-do-if-search-fails}\n"
"                @var{repeat-count})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12512
msgid ""
"The second, third, and fourth arguments are optional.  However, if you want "
"to pass a value to either or both of the last two arguments, you must also "
"pass a value to all the preceding arguments.  Otherwise, the Lisp "
"interpreter will mistake which argument you are passing the value to."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12516
msgid ""
"In the @code{forward-sentence} function, the regular expression will be the "
"value of the variable @code{sentence-end}.  In simple form, that is:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12521
#, no-wrap
msgid ""
"\"[.?!][]\\\"')@}]*\\\\($\\\\|  \\\\|  \\\\)[\n"
"]*\"\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12529
msgid ""
"The limit of the search will be the end of the paragraph (since a sentence "
"cannot go beyond a paragraph).  If the search fails, the function will "
"return @code{nil}; and the repeat count will be provided by the argument to "
"the @code{forward-sentence} function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12540
msgid ""
"The command to move the cursor forward a sentence is a straightforward "
"illustration of how to use regular expression searches in Emacs Lisp.  "
"Indeed, the function looks longer and more complicated than it is; this is "
"because the function is designed to go backwards as well as forwards; and, "
"optionally, over more than one sentence.  The function is usually bound to "
"the key command @kbd{M-e}."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:12548
#, no-wrap
msgid "Complete forward-sentence"
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:12549
#, no-wrap
msgid "Complete @code{forward-sentence} function definition"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12554
msgid "Here is the code for @code{forward-sentence}:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12561
#, no-wrap
msgid ""
"(defun forward-sentence (&optional arg)\n"
"  \"Move forward to next `sentence-end'.  With argument, repeat.\n"
"With negative argument, move backward repeatedly to `sentence-beginning'.\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12564
#, no-wrap
msgid ""
"The variable `sentence-end' is a regular expression that matches ends of\n"
"sentences.  Also, every paragraph boundary terminates sentences as well.\"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12579
#, no-wrap
msgid ""
"  (interactive \"p\")\n"
"  (or arg (setq arg 1))\n"
"  (let ((opoint (point))\n"
"        (sentence-end (sentence-end)))\n"
"    (while (< arg 0)\n"
"      (let ((pos (point))\n"
"            (par-beg (save-excursion (start-of-paragraph-text) (point))))\n"
"       (if (and (re-search-backward sentence-end par-beg t)\n"
"                (or (< (match-end 0) pos)\n"
"                    (re-search-backward sentence-end par-beg t)))\n"
"           (goto-char (match-end 0))\n"
"         (goto-char par-beg)))\n"
"      (setq arg (1+ arg)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12588
#, no-wrap
msgid ""
"    (while (> arg 0)\n"
"      (let ((par-end (save-excursion (end-of-paragraph-text) (point))))\n"
"       (if (re-search-forward sentence-end par-end t)\n"
"           (skip-chars-backward \" \\t\\n\")\n"
"         (goto-char par-end)))\n"
"      (setq arg (1- arg)))\n"
"    (constrain-to-field nil opoint t)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12601
#, no-wrap
msgid ""
"(defun forward-sentence (&optional arg)\n"
"  \"Move forward to next sentence-end.  With argument, repeat.\n"
"With negative argument, move backward repeatedly to sentence-beginning.\n"
"Sentence ends are identified by the value of sentence-end\n"
"treated as a regular expression.  Also, every paragraph boundary\n"
"terminates sentences as well.\"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12620
#, no-wrap
msgid ""
"  (interactive \"p\")\n"
"  (or arg (setq arg 1))\n"
"  (while (< arg 0)\n"
"    (let ((par-beg\n"
"           (save-excursion (start-of-paragraph-text) (point))))\n"
"      (if (re-search-backward\n"
"           (concat sentence-end \"[^ \\t\\n]\") par-beg t)\n"
"          (goto-char (1- (match-end 0)))\n"
"        (goto-char par-beg)))\n"
"    (setq arg (1+ arg)))\n"
"  (while (> arg 0)\n"
"    (let ((par-end\n"
"           (save-excursion (end-of-paragraph-text) (point))))\n"
"      (if (re-search-forward sentence-end par-end t)\n"
"          (skip-chars-backward \" \\t\\n\")\n"
"        (goto-char par-end)))\n"
"    (setq arg (1- arg))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12627
msgid ""
"The function looks long at first sight and it is best to look at its "
"skeleton first, and then its muscle.  The way to see the skeleton is to look "
"at the expressions that start in the left-most columns:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12643
#, no-wrap
msgid ""
"(defun forward-sentence (&optional arg)\n"
"  \"@var{documentation}@dots{}\"\n"
"  (interactive \"p\")\n"
"  (or arg (setq arg 1))\n"
"  (let ((opoint (point)) (sentence-end (sentence-end)))\n"
"    (while (< arg 0)\n"
"      (let ((pos (point))\n"
"            (par-beg (save-excursion (start-of-paragraph-text) (point))))\n"
"       @var{rest-of-body-of-while-loop-when-going-backwards}\n"
"    (while (> arg 0)\n"
"      (let ((par-end (save-excursion (end-of-paragraph-text) (point))))\n"
"       @var{rest-of-body-of-while-loop-when-going-forwards}\n"
"    @var{handle-forms-and-equivalent}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12649
msgid ""
"This looks much simpler! The function definition consists of documentation, "
"an @code{interactive} expression, an @code{or} expression, a @code{let} "
"expression, and @code{while} loops."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12651
msgid "Let's look at each of these parts in turn."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12653
msgid "We note that the documentation is thorough and understandable."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12659
msgid ""
"The function has an @code{interactive \"p\"} declaration.  This means that "
"the processed prefix argument, if any, is passed to the function as its "
"argument.  (This will be a number.)  If the function is not passed an "
"argument (it is optional) then the argument @code{arg} will be bound to 1."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12666
msgid ""
"When @code{forward-sentence} is called non-interactively without an "
"argument, @code{arg} is bound to @code{nil}.  The @code{or} expression "
"handles this.  What it does is either leave the value of @code{arg} as it "
"is, but only if @code{arg} is bound to a value; or it sets the value of "
"@code{arg} to 1, in the case when @code{arg} is bound to @code{nil}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12673
msgid ""
"Next is a @code{let}.  That specifies the values of two local variables, "
"@code{point} and @code{sentence-end}.  The local value of point, from before "
"the search, is used in the @code{constrain-to-field} function which handles "
"forms and equivalents.  The @code{sentence-end} variable is set by the "
"@code{sentence-end} function."
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:12675
#, no-wrap
msgid "The @code{while} loops"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12684
msgid ""
"Two @code{while} loops follow.  The first @code{while} has a "
"true-or-false-test that tests true if the prefix argument for "
"@code{forward-sentence} is a negative number.  This is for going backwards.  "
"The body of this loop is similar to the body of the second @code{while} "
"clause, but it is not exactly the same.  We will skip this @code{while} loop "
"and concentrate on the second @code{while} loop."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12688
msgid ""
"The second @code{while} loop is for moving point forward.  Its skeleton "
"looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12697
#, no-wrap
msgid ""
"(while (> arg 0)            ; @r{true-or-false-test}\n"
"  (let @var{varlist}\n"
"    (if (@var{true-or-false-test})\n"
"        @var{then-part}\n"
"      @var{else-part}\n"
"  (setq arg (1- arg))))     ; @code{while} @r{loop decrementer}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12706
msgid ""
"The @code{while} loop is of the decrementing kind.  (@xref{Decrementing "
"Loop, , A Loop with a Decrementing Counter}.)  It has a true-or-false-test "
"that tests true so long as the counter (in this case, the variable "
"@code{arg}) is greater than zero; and it has a decrementer that subtracts 1 "
"from the value of the counter every time the loop repeats."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12710
msgid ""
"If no prefix argument is given to @code{forward-sentence}, which is the most "
"common way the command is used, this @code{while} loop will run once, since "
"the value of @code{arg} will be 1."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12714
msgid ""
"The body of the @code{while} loop consists of a @code{let} expression, which "
"creates and binds a local variable, and has, as its body, an @code{if} "
"expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12717
msgid "The body of the @code{while} loop looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12725
#, no-wrap
msgid ""
"(let ((par-end\n"
"       (save-excursion (end-of-paragraph-text) (point))))\n"
"  (if (re-search-forward sentence-end par-end t)\n"
"      (skip-chars-backward \" \\t\\n\")\n"
"    (goto-char par-end)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12733
msgid ""
"The @code{let} expression creates and binds the local variable "
"@code{par-end}.  As we shall see, this local variable is designed to provide "
"a bound or limit to the regular expression search.  If the search fails to "
"find a proper sentence ending in the paragraph, it will stop on reaching the "
"end of the paragraph."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12738
msgid ""
"But first, let us examine how @code{par-end} is bound to the value of the "
"end of the paragraph.  What happens is that the @code{let} sets the value of "
"@code{par-end} to the value returned when the Lisp interpreter evaluates the "
"expression"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12742
#, no-wrap
msgid "(save-excursion (end-of-paragraph-text) (point))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12753
msgid ""
"In this expression, @code{(end-of-paragraph-text)} moves point to the end of "
"the paragraph, @code{(point)} returns the value of point, and then "
"@code{save-excursion} restores point to its original position.  Thus, the "
"@code{let} binds @code{par-end} to the value returned by the "
"@code{save-excursion} expression, which is the position of the end of the "
"paragraph.  (The @code{end-of-paragraph-text} function uses "
"@code{forward-paragraph}, which we will discuss shortly.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12757
msgid ""
"Emacs next evaluates the body of the @code{let}, which is an @code{if} "
"expression that looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:12763
#, no-wrap
msgid ""
"(if (re-search-forward sentence-end par-end t) ; @r{if-part}\n"
"    (skip-chars-backward \" \\t\\n\")              ; @r{then-part}\n"
"  (goto-char par-end)))                        ; @r{else-part}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12770
msgid ""
"The @code{if} tests whether its first argument is true and if so, evaluates "
"its then-part; otherwise, the Emacs Lisp interpreter evaluates the "
"else-part.  The true-or-false-test of the @code{if} expression is the "
"regular expression search."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12774
msgid ""
"It may seem odd to have what looks like the `real work' of the "
"@code{forward-sentence} function buried here, but this is a common way this "
"kind of operation is carried out in Lisp."
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:12776
#, no-wrap
msgid "The regular expression search"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12782
msgid ""
"The @code{re-search-forward} function searches for the end of the sentence, "
"that is, for the pattern defined by the @code{sentence-end} regular "
"expression.  If the pattern is found---if the end of the sentence is "
"found---then the @code{re-search-forward} function does two things:"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:12787
msgid ""
"The @code{re-search-forward} function carries out a side effect, which is to "
"move point to the end of the occurrence found."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:12792
msgid ""
"The @code{re-search-forward} function returns a value of true.  This is the "
"value received by the @code{if}, and means that the search was successful."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12798
msgid ""
"The side effect, the movement of point, is completed before the @code{if} "
"function is handed the value returned by the successful conclusion of the "
"search."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12808
msgid ""
"When the @code{if} function receives the value of true from a successful "
"call to @code{re-search-forward}, the @code{if} evaluates the then-part, "
"which is the expression @code{(skip-chars-backward \" \\t\\n\")}.  This "
"expression moves backwards over any blank spaces, tabs or carriage returns "
"until a printed character is found and then leaves point after the "
"character.  Since point has already been moved to the end of the pattern "
"that marks the end of the sentence, this action leaves point right after the "
"closing printed character of the sentence, which is usually a period."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12814
msgid ""
"On the other hand, if the @code{re-search-forward} function fails to find a "
"pattern marking the end of the sentence, the function returns false.  The "
"false then causes the @code{if} to evaluate its third argument, which is "
"@code{(goto-char par-end)}: it moves point to the end of the paragraph."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12817
msgid ""
"(And if the text is in a form or equivalent, and point may not move fully, "
"then the @code{constrain-to-field} function comes into play.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12822
msgid ""
"Regular expression searches are exceptionally useful and the pattern "
"illustrated by @code{re-search-forward}, in which the search is the test of "
"an @code{if} expression, is handy.  You will see or write code incorporating "
"this pattern often."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12976
msgid ""
"The @code{forward-paragraph} function moves point forward to the end of the "
"paragraph.  It is usually bound to @kbd{M-@}} and makes use of a number of "
"functions that are important in themselves, including @code{let*}, "
"@code{match-beginning}, and @code{looking-at}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12981
msgid ""
"The function definition for @code{forward-paragraph} is considerably longer "
"than the function definition for @code{forward-sentence} because it works "
"with a paragraph, each line of which may begin with a fill prefix."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12989
msgid ""
"A fill prefix consists of a string of characters that are repeated at the "
"beginning of each line.  For example, in Lisp code, it is a convention to "
"start each line of a paragraph-long comment with @samp{;;; }.  In Text mode, "
"four blank spaces make up another common fill prefix, creating an indented "
"paragraph.  (@xref{Fill Prefix, , , emacs, The GNU Emacs Manual}, for more "
"information about fill prefixes.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12995
msgid ""
"The existence of a fill prefix means that in addition to being able to find "
"the end of a paragraph whose lines begin on the left-most column, the "
"@code{forward-paragraph} function must be able to find the end of a "
"paragraph when all or many of the lines in the buffer begin with the fill "
"prefix."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:12999
msgid ""
"Moreover, it is sometimes practical to ignore a fill prefix that exists, "
"especially when blank lines separate paragraphs.  This is an added "
"complication."
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:13008
#, no-wrap
msgid "Shortened @code{forward-paragraph} function definition"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13014
msgid ""
"Rather than print all of the @code{forward-paragraph} function, we will only "
"print parts of it.  Read without preparation, the function can be daunting!"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13017
msgid "In outline, the function looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:13030
#, no-wrap
msgid ""
"(defun forward-paragraph (&optional arg)\n"
"  \"@var{documentation}@dots{}\"\n"
"  (interactive \"p\")\n"
"  (or arg (setq arg 1))\n"
"  (let*\n"
"      @var{varlist}\n"
"    (while (and (< arg 0) (not (bobp)))     ; @r{backward-moving-code}\n"
"      @dots{}\n"
"    (while (and (> arg 0) (not (eobp)))     ; @r{forward-moving-code}\n"
"      @dots{}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13035
msgid ""
"The first parts of the function are routine: the function's argument list "
"consists of one optional argument.  Documentation follows."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13045
msgid ""
"The lower case @samp{p} in the @code{interactive} declaration means that the "
"processed prefix argument, if any, is passed to the function.  This will be "
"a number, and is the repeat count of how many paragraphs point will move.  "
"The @code{or} expression in the next line handles the common case when no "
"argument is passed to the function, which occurs if the function is called "
"from other code rather than interactively.  This case was described "
"earlier.  (@xref{forward-sentence, The @code{forward-sentence} function}.)  "
"Now we reach the end of the familiar part of this function."
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:13047
#, no-wrap
msgid "The @code{let*} expression"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13052
msgid ""
"The next line of the @code{forward-paragraph} function begins a @code{let*} "
"expression.  This is a different than @code{let}.  The symbol is @code{let*} "
"not @code{let}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13057
msgid ""
"The @code{let*} special form is like @code{let} except that Emacs sets each "
"variable in sequence, one after another, and variables in the latter part of "
"the varlist can make use of the values to which Emacs set variables in the "
"earlier part of the varlist."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13063
msgid ""
"(@ref{append save-excursion, , @code{save-excursion} in "
"@code{append-to-buffer}}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13068
msgid ""
"In the @code{let*} expression in this function, Emacs binds a total of seven "
"variables: @code{opoint}, @code{fill-prefix-regexp}, @code{parstart}, "
"@code{parsep}, @code{sp-parstart}, @code{start}, and @code{found-start}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13071
msgid ""
"The variable @code{parsep} appears twice, first, to remove instances of "
"@samp{^}, and second, to handle fill prefixes."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13075
msgid ""
"The variable @code{opoint} is just the value of @code{point}.  As you can "
"guess, it is used in a @code{constrain-to-field} expression, just as in "
"@code{forward-sentence}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13078
msgid ""
"The variable @code{fill-prefix-regexp} is set to the value returned by "
"evaluating the following list:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:13085
#, no-wrap
msgid ""
"(and fill-prefix\n"
"     (not (equal fill-prefix \"\"))\n"
"     (not paragraph-ignore-fill-prefix)\n"
"     (regexp-quote fill-prefix))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13090
msgid "This is an expression whose first element is the @code{and} special form."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13100
msgid ""
"As we learned earlier (@pxref{kill-new function, , The @code{kill-new} "
"function}), the @code{and} special form evaluates each of its arguments "
"until one of the arguments returns a value of @code{nil}, in which case the "
"@code{and} expression returns @code{nil}; however, if none of the arguments "
"returns a value of @code{nil}, the value resulting from evaluating the last "
"argument is returned.  (Since such a value is not @code{nil}, it is "
"considered true in Lisp.)  In other words, an @code{and} expression returns "
"a true value only if all its arguments are true."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13106
msgid ""
"In this case, the variable @code{fill-prefix-regexp} is bound to a "
"non-@code{nil} value only if the following four expressions produce a true "
"(i.e., a non-@code{nil}) value when they are evaluated; otherwise, "
"@code{fill-prefix-regexp} is bound to @code{nil}."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:13108
#, no-wrap
msgid "fill-prefix"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:13112
msgid ""
"When this variable is evaluated, the value of the fill prefix, if any, is "
"returned.  If there is no fill prefix, this variable returns @code{nil}."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:13113
#, no-wrap
msgid "(not (equal fill-prefix \"\")"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:13117
msgid ""
"This expression checks whether an existing fill prefix is an empty string, "
"that is, a string with no characters in it.  An empty string is not a useful "
"fill prefix."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:13118
#, no-wrap
msgid "(not paragraph-ignore-fill-prefix)"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:13122
msgid ""
"This expression returns @code{nil} if the variable "
"@code{paragraph-ignore-fill-prefix} has been turned on by being set to a "
"true value such as @code{t}."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:13123
#, no-wrap
msgid "(regexp-quote fill-prefix)"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:13128
msgid ""
"This is the last argument to the @code{and} special form.  If all the "
"arguments to the @code{and} are true, the value resulting from evaluating "
"this expression will be returned by the @code{and} expression and bound to "
"the variable @code{fill-prefix-regexp},"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:13130
#, no-wrap
msgid "regexp-quote"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13140
msgid ""
"The result of evaluating this @code{and} expression successfully is that "
"@code{fill-prefix-regexp} will be bound to the value of @code{fill-prefix} "
"as modified by the @code{regexp-quote} function.  What @code{regexp-quote} "
"does is read a string and return a regular expression that will exactly "
"match the string and match nothing else.  This means that "
"@code{fill-prefix-regexp} will be set to a value that will exactly match the "
"fill prefix if the fill prefix exists.  Otherwise, the variable will be set "
"to @code{nil}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13146
msgid ""
"The next two local variables in the @code{let*} expression are designed to "
"remove instances of @samp{^} from @code{parstart} and @code{parsep}, the "
"local variables which indicate the paragraph start and the paragraph "
"separator.  The next expression sets @code{parsep} again.  That is to handle "
"fill prefixes."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13151
msgid ""
"This is the setting that requires the definition call @code{let*} rather "
"than @code{let}.  The true-or-false-test for the @code{if} depends on "
"whether the variable @code{fill-prefix-regexp} evaluates to @code{nil} or "
"some other value."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13156
msgid ""
"If @code{fill-prefix-regexp} does not have a value, Emacs evaluates the "
"else-part of the @code{if} expression and binds @code{parsep} to its local "
"value.  (@code{parsep} is a regular expression that matches what separates "
"paragraphs.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13161
msgid ""
"But if @code{fill-prefix-regexp} does have a value, Emacs evaluates the "
"then-part of the @code{if} expression and binds @code{parsep} to a regular "
"expression that includes the @code{fill-prefix-regexp} as part of the "
"pattern."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13168
msgid ""
"Specifically, @code{parsep} is set to the original value of the paragraph "
"separate regular expression concatenated with an alternative expression that "
"consists of the @code{fill-prefix-regexp} followed by optional whitespace to "
"the end of the line.  The whitespace is defined by @w{@code{\"[ \\t]*$\"}}.)  "
"The @samp{\\\\|} defines this portion of the regexp as an alternative to "
"@code{parsep}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13172
msgid ""
"According to a comment in the code, the next local variable, "
"@code{sp-parstart}, is used for searching, and then the final two, "
"@code{start} and @code{found-start}, are set to @code{nil}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13177
msgid ""
"Now we get into the body of the @code{let*}.  The first part of the body of "
"the @code{let*} deals with the case when the function is given a negative "
"argument and is therefore moving backwards.  We will skip this section."
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:13179
#, no-wrap
msgid "The forward motion @code{while} loop"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13187
msgid ""
"The second part of the body of the @code{let*} deals with forward motion.  "
"It is a @code{while} loop that repeats itself so long as the value of "
"@code{arg} is greater than zero.  In the most common use of the function, "
"the value of the argument is 1, so the body of the @code{while} loop is "
"evaluated exactly once, and the cursor moves forward one paragraph."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13225
msgid ""
"This part handles three situations: when point is between paragraphs, when "
"there is a fill prefix and when there is no fill prefix."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13228
msgid "The @code{while} loop looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:13233
#, no-wrap
msgid ""
";; @r{going forwards and not at the end of the buffer}\n"
"(while (and (> arg 0) (not (eobp)))\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:13244
#, no-wrap
msgid ""
"  ;; @r{between paragraphs}\n"
"  ;; Move forward over separator lines...\n"
"  (while (and (not (eobp))\n"
"              (progn (move-to-left-margin) (not (eobp)))\n"
"              (looking-at parsep))\n"
"    (forward-line 1))\n"
"  ;;  @r{This decrements the loop}\n"
"  (unless (eobp) (setq arg (1- arg)))\n"
"  ;; ... and one more line.\n"
"  (forward-line 1)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:13255 emacs-lisp-intro.texi:13327
#, no-wrap
msgid ""
"  (if fill-prefix-regexp\n"
"      ;; There is a fill prefix; it overrides parstart;\n"
"      ;; we go forward line by line\n"
"      (while (and (not (eobp))\n"
"                  (progn (move-to-left-margin) (not (eobp)))\n"
"                  (not (looking-at parsep))\n"
"                  (looking-at fill-prefix-regexp))\n"
"        (forward-line 1))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:13270
#, no-wrap
msgid ""
"    ;; There is no fill prefix;\n"
"    ;; we go forward character by character\n"
"    (while (and (re-search-forward sp-parstart nil 1)\n"
"                (progn (setq start (match-beginning 0))\n"
"                       (goto-char start)\n"
"                       (not (eobp)))\n"
"                (progn (move-to-left-margin)\n"
"                       (not (looking-at parsep)))\n"
"                (or (not (looking-at parstart))\n"
"                    (and use-hard-newlines\n"
"                         (not (get-text-property (1- start) 'hard)))))\n"
"      (forward-char 1))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:13278
#, no-wrap
msgid ""
"    ;; and if there is no fill prefix and if we are not at the end,\n"
"    ;;     go to whatever was found in the regular expression search\n"
"    ;;     for sp-parstart\n"
"    (if (< (point) (point-max))\n"
"        (goto-char start))))\n"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:13281 emacs-lisp-intro.texi:13658
#, no-wrap
msgid "eobp"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13289
msgid ""
"We can see that this is a decrementing counter @code{while} loop, using the "
"expression @code{(setq arg (1- arg))} as the decrementer.  That expression "
"is not far from the @code{while}, but is hidden in another Lisp macro, an "
"@code{unless} macro.  Unless we are at the end of the buffer---that is what "
"the @code{eobp} function determines; it is an abbreviation of @samp{End Of "
"Buffer P}---we decrease the value of @code{arg} by one."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13295
msgid ""
"(If we are at the end of the buffer, we cannot go forward any more and the "
"next loop of the @code{while} expression will test false since the test is "
"an @code{and} with @code{(not (eobp))}.  The @code{not} function means "
"exactly as you expect; it is another name for @code{null}, a function that "
"returns true when its argument is false.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13299
msgid ""
"Interestingly, the loop count is not decremented until we leave the space "
"between paragraphs, unless we come to the end of buffer or stop seeing the "
"local value of the paragraph separator."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13305
msgid ""
"That second @code{while} also has a @code{(move-to-left-margin)} "
"expression.  The function is self-explanatory.  It is inside a @code{progn} "
"expression and not the last element of its body, so it is only invoked for "
"its side effect, which is to move point to the left margin of the current "
"line."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:13306 emacs-lisp-intro.texi:13654
#, no-wrap
msgid "looking-at"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13310
msgid ""
"The @code{looking-at} function is also self-explanatory; it returns true if "
"the text after point matches the regular expression given as its argument."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13313
msgid ""
"The rest of the body of the loop looks difficult at first, but makes sense "
"as you come to understand it."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13316
msgid "First consider what happens if there is a fill prefix:"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13333
msgid ""
"This expression moves point forward line by line so long as four conditions "
"are true:"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:13337
msgid "Point is not at the end of the buffer."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:13341
msgid ""
"We can move to the left margin of the text and are not at the end of the "
"buffer."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:13344
msgid "The text following point does not separate paragraphs."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:13347
msgid "The pattern following point is the fill prefix regular expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13353
msgid ""
"The last condition may be puzzling, until you remember that point was moved "
"to the beginning of the line early in the @code{forward-paragraph} "
"function.  This means that if the text has a fill prefix, the "
"@code{looking-at} function will see it."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13356
msgid "Consider what happens when there is no fill prefix."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:13369
#, no-wrap
msgid ""
"    (while (and (re-search-forward sp-parstart nil 1)\n"
"                (progn (setq start (match-beginning 0))\n"
"                       (goto-char start)\n"
"                       (not (eobp)))\n"
"                (progn (move-to-left-margin)\n"
"                       (not (looking-at parsep)))\n"
"                (or (not (looking-at parstart))\n"
"                    (and use-hard-newlines\n"
"                         (not (get-text-property (1- start) 'hard)))))\n"
"      (forward-char 1))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13379
msgid ""
"This @code{while} loop has us searching forward for @code{sp-parstart}, "
"which is the combination of possible whitespace with a the local value of "
"the start of a paragraph or of a paragraph separator.  (The latter two are "
"within an expression starting @code{\\(?:} so that they are not referenced "
"by the @code{match-beginning} function.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13382
msgid "The two expressions,"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:13387
#, no-wrap
msgid ""
"(setq start (match-beginning 0))\n"
"(goto-char start)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13393
msgid "mean go to the start of the text matched by the regular expression search."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13397
msgid ""
"The @code{(match-beginning 0)} expression is new.  It returns a number "
"specifying the location of the start of the text that was matched by the "
"last search."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13404
msgid ""
"The @code{match-beginning} function is used here because of a characteristic "
"of a forward search: a successful forward search, regardless of whether it "
"is a plain search or a regular expression search, moves point to the end of "
"the text that is found.  In this case, a successful search moves point to "
"the end of the pattern for @code{sp-parstart}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13409
msgid ""
"However, we want to put point at the end of the current paragraph, not "
"somewhere else.  Indeed, since the search possibly includes the paragraph "
"separator, point may end up at the beginning of the next one unless we use "
"an expression that includes @code{match-beginning}."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:13410 emacs-lisp-intro.texi:13650
#, no-wrap
msgid "match-beginning"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13417
msgid ""
"When given an argument of 0, @code{match-beginning} returns the position "
"that is the start of the text matched by the most recent search.  In this "
"case, the most recent search looks for @code{sp-parstart}.  The "
"@code{(match-beginning 0)} expression returns the beginning position of that "
"pattern, rather than the end position of that pattern."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13423
msgid ""
"(Incidentally, when passed a positive number as an argument, the "
"@code{match-beginning} function returns the location of point at that "
"parenthesized expression in the last search unless that parenthesized "
"expression begins with @code{\\(?:}.  I don't know why @code{\\(?:} appears "
"here since the argument is 0.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13426
msgid "The last expression when there is no fill prefix is"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:13431
#, no-wrap
msgid ""
"(if (< (point) (point-max))\n"
"    (goto-char start))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13438
msgid ""
"This says that if there is no fill prefix and if we are not at the end, "
"point should move to the beginning of whatever was found by the regular "
"expression search for @code{sp-parstart}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13441
msgid ""
"The full definition for the @code{forward-paragraph} function not only "
"includes code for going forwards, but also code for going backwards."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13450
msgid ""
"If you are reading this inside of GNU Emacs and you want to see the whole "
"function, you can type @kbd{C-h f} (@code{describe-function})  and the name "
"of the function.  This gives you the function documentation and the name of "
"the library containing the function's source.  Place point over the name of "
"the library and press the RET key; you will be taken directly to the "
"source.  (Be sure to install your sources! Without them, you are like a "
"person who tries to drive a car with his eyes shut!)"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:13452
#, no-wrap
msgid "Create Your Own @file{TAGS} File"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:13454
#, no-wrap
msgid "@file{TAGS} file, create own"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13462
msgid ""
"Besides @kbd{C-h f} (@code{describe-function}), another way to see the "
"source of a function is to type @kbd{M-.} (@code{find-tag}) and the name of "
"the function when prompted for it.  This is a good habit to get into.  The "
"@kbd{M-.} (@code{find-tag}) command takes you directly to the source for a "
"function, variable, or node.  The function depends on tags tables to tell it "
"where to go."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13469
msgid ""
"If the @code{find-tag} function first asks you for the name of a @file{TAGS} "
"table, give it the name of a @file{TAGS} file such as "
"@file{/usr/local/src/emacs/src/TAGS}.  (The exact path to your @file{TAGS} "
"file depends on how your copy of Emacs was installed.  I just told you the "
"location that provides both my C and my Emacs Lisp sources.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13472
msgid "You can also create your own @file{TAGS} file for directories that lack one."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13476
msgid ""
"You often need to build and install tags tables yourself.  They are not "
"built automatically.  A tags table is called a @file{TAGS} file; the name is "
"in upper case letters."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13481
msgid ""
"You can create a @file{TAGS} file by calling the @code{etags} program that "
"comes as a part of the Emacs distribution.  Usually, @code{etags} is "
"compiled and installed when Emacs is built.  (@code{etags} is not an Emacs "
"Lisp function or a part of Emacs; it is a C program.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13488
msgid ""
"To create a @file{TAGS} file, first switch to the directory in which you "
"want to create the file.  In Emacs you can do this with the @kbd{M-x cd} "
"command, or by visiting a file in the directory, or by listing the directory "
"with @kbd{C-x d} (@code{dired}).  Then run the compile command, with "
"@w{@code{etags *.el}} as the command to execute"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13495
msgid "to create a @file{TAGS} file for Emacs Lisp."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13500
msgid ""
"For example, if you have a large number of files in your @file{~/emacs} "
"directory, as I do---I have 137 @file{.el} files in it, of which I load "
"12---you can create a @file{TAGS} file for the Emacs Lisp files in that "
"directory."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13506
msgid ""
"The @code{etags} program takes all the usual shell `wildcards'.  For "
"example, if you have two directories for which you want a single @file{TAGS} "
"file, type @w{@code{etags *.el ../elisp/*.el}}, where @file{../elisp/} is "
"the second directory:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:13509
#, no-wrap
msgid "M-x compile RET etags *.el ../elisp/*.el RET\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13513
msgid "Type"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:13516
#, no-wrap
msgid "M-x compile RET etags --help RET\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13521
msgid ""
"to see a list of the options accepted by @code{etags} as well as a list of "
"supported languages."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13528
msgid ""
"The @code{etags} program handles more than 20 languages, including Emacs "
"Lisp, Common Lisp, Scheme, C, C++, Ada, Fortran, HTML, Java, LaTeX, Pascal, "
"Perl, PostScript, Python, TeX, Texinfo, makefiles, and most assemblers.  The "
"program has no switches for specifying the language; it recognizes the "
"language in an input file according to its file name and contents."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13533
msgid ""
"@file{etags} is very helpful when you are writing code yourself and want to "
"refer back to functions you have already written.  Just run @code{etags} "
"again at intervals as you write new functions, so they become part of the "
"@file{TAGS} file."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13537
msgid ""
"If you think an appropriate @file{TAGS} file already exists for what you "
"want, but do not know where it is, you can use the @code{locate} program to "
"attempt to find it."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13543
msgid ""
"Type @w{@kbd{M-x locate @key{RET} TAGS @key{RET}}} and Emacs will list for "
"you the full path names of all your @file{TAGS} files.  On my system, this "
"command lists 34 @file{TAGS} files.  On the other hand, a `plain vanilla' "
"system I recently installed did not contain any @file{TAGS} files."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13548
msgid ""
"If the tags table you want has been created, you can use the @code{M-x "
"visit-tags-table} command to specify it.  Otherwise, you will need to create "
"the tag table yourself and then use @code{M-x visit-tags-table}."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:13549 emacs-lisp-intro.texi:13550
#, no-wrap
msgid "Building Tags in the Emacs sources"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:13551
#, no-wrap
msgid "Tags in the Emacs sources"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:13552
#, no-wrap
msgid "make tags"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13559
msgid ""
"The GNU Emacs sources come with a @file{Makefile} that contains a "
"sophisticated @code{etags} command that creates, collects, and merges tags "
"tables from all over the Emacs sources and puts the information into one "
"@file{TAGS} file in the @file{src/} directory. (The @file{src/} directory is "
"below the top level of your Emacs directory.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13563
msgid ""
"To build this @file{TAGS} file, go to the top level of your Emacs source "
"directory and run the compile command @code{make tags}:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:13566
#, no-wrap
msgid "M-x compile RET make tags RET\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13571
msgid ""
"(The @code{make tags} command works well with the GNU Emacs sources, as well "
"as with some other source packages.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13574
msgid ""
"For more information, see @ref{Tags, , Tag Tables, emacs, The GNU Emacs "
"Manual}."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:13575
#, no-wrap
msgid "Regexp Review"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:13585
msgid ""
"Repeatedly evaluate the body of the expression so long as the first element "
"of the body tests true.  Then return @code{nil}.  (The expression is "
"evaluated only for its side effects.)"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:13595
#, no-wrap
msgid ""
"(let ((foo 2))\n"
"  (while (> foo 0)\n"
"    (insert (format \"foo is %d.\\n\" foo))\n"
"    (setq foo (1- foo))))\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:13599
#, no-wrap
msgid ""
"     @result{}      foo is 2.\n"
"             foo is 1.\n"
"             nil\n"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:13607
msgid ""
"(The @code{insert} function inserts its arguments at point; the "
"@code{format} function returns a string formatted from its arguments the way "
"@code{message} formats its arguments; @code{\\n} produces a new line.)"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:13611
msgid ""
"Search for a pattern, and if the pattern is found, move point to rest just "
"after it."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:13614
msgid "Takes four arguments, like @code{search-forward}:"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:13619
msgid ""
"A regular expression that specifies the pattern to search for.  (Remember to "
"put quotation marks around this argument!)"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:13632
#, no-wrap
msgid "let*"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:13637
msgid ""
"Bind some variables locally to particular values, and then evaluate the "
"remaining arguments, returning the value of the last one.  While binding the "
"local variables, use the local values of variables bound earlier, if any."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:13647
#, no-wrap
msgid ""
"(let* ((foo 7)\n"
"      (bar (* 3 foo)))\n"
"  (message \"`bar' is %d.\" bar))\n"
"     @result{} `bar' is 21.\n"
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:13653
msgid ""
"Return the position of the start of the text found by the last regular "
"expression search."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:13657
msgid ""
"Return @code{t} for true if the text after point matches the argument, which "
"should be a regular expression."
msgstr ""

#. type: table
#: emacs-lisp-intro.texi:13663
msgid ""
"Return @code{t} for true if point is at the end of the accessible part of a "
"buffer.  The end of the accessible part is the end of the buffer if the "
"buffer is not narrowed; it is the end of the narrowed part if the buffer is "
"narrowed."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:13667
#, no-wrap
msgid "Exercises with @code{re-search-forward}"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:13673
msgid ""
"Write a function to search for a regular expression that matches two or more "
"blank lines in sequence."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:13682
msgid ""
"Write a function to search for duplicated words, such as `the the'.  "
"@xref{Regexps, , Syntax of Regular Expressions, emacs, The GNU Emacs "
"Manual}, for information on how to write a regexp (a regular expression) to "
"match a string that is composed of two identical halves.  You can devise "
"several regexps; some are better than others.  The function I use is "
"described in an appendix, along with several regexps.  @xref{the-the, , "
"@code{the-the} Duplicated Words Function}."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:13686
#, no-wrap
msgid "Repetition for word counting"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:13687
#, no-wrap
msgid "Regular expressions for word counting"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13693
msgid ""
"Repetition and regular expression searches are powerful tools that you often "
"use when you write code in Emacs Lisp.  This chapter illustrates the use of "
"regular expression searches through the construction of word count commands "
"using @code{while} loops and recursion."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:13702
#, no-wrap
msgid "Why Count Words"
msgstr ""

#. type: unnumberedsec
#: emacs-lisp-intro.texi:13703
#, no-wrap
msgid "Counting words"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13708
msgid ""
"The standard Emacs distribution contains functions for counting the number "
"of lines and words within a region."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13718
msgid ""
"Certain types of writing ask you to count words.  Thus, if you write an "
"essay, you may be limited to 800 words; if you write a novel, you may "
"discipline yourself to write 1000 words a day.  It seems odd, but for a long "
"time, Emacs lacked a word count command.  Perhaps people used Emacs mostly "
"for code or types of documentation that did not require word counts; or "
"perhaps they restricted themselves to the operating system word count "
"command, @code{wc}.  Alternatively, people may have followed the publishers' "
"convention and computed a word count by dividing the number of characters in "
"a document by five."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13722
msgid ""
"There are many ways to implement a command to count words.  Here are some "
"examples, which you may wish to compare with the standard Emacs command, "
"@code{count-words-region}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13736
msgid ""
"A word count command could count words in a line, paragraph, region, or "
"buffer.  What should the command cover? You could design the command to "
"count the number of words in a complete buffer.  However, the Emacs "
"tradition encourages flexibility---you may want to count words in just a "
"section, rather than all of a buffer.  So it makes more sense to design the "
"command to count the number of words in a region.  Once you have a command "
"to count words in a region, you can, if you wish, count words in a whole "
"buffer by marking it with @w{@kbd{C-x h}} (@code{mark-whole-buffer})."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13742
msgid ""
"Clearly, counting words is a repetitive act: starting from the beginning of "
"the region, you count the first word, then the second word, then the third "
"word, and so on, until you reach the end of the region.  This means that "
"word counting is ideally suited to recursion or to a @code{while} loop."
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:13750
#, no-wrap
msgid "Designing @code{@value{COUNT-WORDS}}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13756
msgid ""
"First, we will implement the word count command with a @code{while} loop, "
"then with recursion.  The command will, of course, be interactive."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13759
msgid "The template for an interactive function definition is, as always:"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13770
msgid "What we need to do is fill in the slots."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13776
msgid ""
"The name of the function should be self-explanatory and similar to the "
"existing @code{count-lines-region} name.  This makes the name easier to "
"remember.  @code{count-words-region} is the obvious choice.  Since that name "
"is now used for the standard Emacs command to count words, we will name our "
"implementation @code{@value{COUNT-WORDS}}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13787
msgid ""
"The function counts words within a region.  This means that the argument "
"list must contain symbols that are bound to the two positions, the beginning "
"and end of the region.  These two positions can be called @samp{beginning} "
"and @samp{end} respectively.  The first line of the documentation should be "
"a single sentence, since that is all that is printed as documentation by a "
"command such as @code{apropos}.  The interactive expression will be of the "
"form @samp{(interactive \"r\")}, since that will cause Emacs to pass the "
"beginning and end of the region to the function's argument list.  All this "
"is routine."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13792
msgid ""
"The body of the function needs to be written to do three tasks: first, to "
"set up conditions under which the @code{while} loop can count words, second, "
"to run the @code{while} loop, and third, to send a message to the user."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13801
msgid ""
"When a user calls @code{@value{COUNT-WORDS}}, point may be at the beginning "
"or the end of the region.  However, the counting process must start at the "
"beginning of the region.  This means we will want to put point there if it "
"is not already there.  Executing @code{(goto-char beginning)} ensures this.  "
"Of course, we will want to return point to its expected position when the "
"function finishes its work.  For this reason, the body must be enclosed in a "
"@code{save-excursion} expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13807
msgid ""
"The central part of the body of the function consists of a @code{while} loop "
"in which one expression jumps point forward word by word, and another "
"expression counts those jumps.  The true-or-false-test of the @code{while} "
"loop should test true so long as point should jump forward, and false when "
"point is at the end of the region."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13811
msgid ""
"We could use @code{(forward-word 1)} as the expression for moving point "
"forward word by word, but it is easier to see what Emacs identifies as a "
"`word' if we use a regular expression search."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13816
msgid ""
"A regular expression search that finds the pattern for which it is searching "
"leaves point after the last character matched.  This means that a succession "
"of successful word searches will move point forward word by word."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13825
msgid ""
"As a practical matter, we want the regular expression search to jump over "
"whitespace and punctuation between words as well as over the words "
"themselves.  A regexp that refuses to jump over interword whitespace would "
"never jump more than one word! This means that the regexp should include the "
"whitespace and punctuation that follows a word, if any, as well as the word "
"itself.  (A word may end a buffer and not have any following whitespace or "
"punctuation, so that part of the regexp must be optional.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13830
msgid ""
"Thus, what we want for the regexp is a pattern defining one or more word "
"constituent characters followed, optionally, by one or more characters that "
"are not word constituents.  The regular expression for this is:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:13833
#, no-wrap
msgid "\\w+\\W*\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13840
msgid ""
"The buffer's syntax table determines which characters are and are not word "
"constituents.  For more information about syntax, @pxref{Syntax Tables, , "
"Syntax Tables, elisp, The GNU Emacs Lisp Reference Manual}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13843
msgid "The search expression looks like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:13846
#, no-wrap
msgid "(re-search-forward \"\\\\w+\\\\W*\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13857
msgid ""
"(Note that paired backslashes precede the @samp{w} and @samp{W}.  A single "
"backslash has special meaning to the Emacs Lisp interpreter.  It indicates "
"that the following character is interpreted differently than usual.  For "
"example, the two characters, @samp{\\n}, stand for @samp{newline}, rather "
"than for a backslash followed by @samp{n}.  Two backslashes in a row stand "
"for an ordinary, `unspecial' backslash, so Emacs Lisp interpreter ends of "
"seeing a single backslash followed by a letter.  So it discovers the letter "
"is special.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13861
msgid ""
"We need a counter to count how many words there are; this variable must "
"first be set to 0 and then incremented each time Emacs goes around the "
"@code{while} loop.  The incrementing expression is simply:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:13864
#, no-wrap
msgid "(setq count (1+ count))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13877
msgid ""
"Finally, we want to tell the user how many words there are in the region.  "
"The @code{message} function is intended for presenting this kind of "
"information to the user.  The message has to be phrased so that it reads "
"properly regardless of how many words there are in the region: we don't want "
"to say that ``there are 1 words in the region''.  The conflict between "
"singular and plural is ungrammatical.  We can solve this problem by using a "
"conditional expression that evaluates different messages depending on the "
"number of words in the region.  There are three possibilities: no words in "
"the region, one word in the region, and more than one word.  This means that "
"the @code{cond} special form is appropriate."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13880
msgid "All this leads to the following function definition:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:13892
#, no-wrap
msgid ""
";;; @r{First version; has bugs!}\n"
"(defun @value{COUNT-WORDS} (beginning end)\n"
"  \"Print number of words in the region.\n"
"Words are defined as at least one word-constituent\n"
"character followed by at least one character that\n"
"is not a word-constituent.  The buffer's syntax\n"
"table determines which characters these are.\"\n"
"  (interactive \"r\")\n"
"  (message \"Counting words in region ... \")\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:13899 emacs-lisp-intro.texi:13968
#, no-wrap
msgid ""
";;; @r{1. Set up appropriate conditions.}\n"
"  (save-excursion\n"
"    (goto-char beginning)\n"
"    (let ((count 0))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:13906 emacs-lisp-intro.texi:13975
#, no-wrap
msgid ""
";;; @r{2. Run the} while @r{loop.}\n"
"      (while (< (point) end)\n"
"        (re-search-forward \"\\\\w+\\\\W*\")\n"
"        (setq count (1+ count)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:13919 emacs-lisp-intro.texi:14174 emacs-lisp-intro.texi:14283
#, no-wrap
msgid ""
";;; @r{3. Send a message to the user.}\n"
"      (cond ((zerop count)\n"
"             (message\n"
"              \"The region does NOT have any words.\"))\n"
"            ((= 1 count)\n"
"             (message\n"
"              \"The region has 1 word.\"))\n"
"            (t\n"
"             (message\n"
"              \"The region has %d words.\" count))))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13924
msgid "As written, the function works, but not in all circumstances."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:13926
#, no-wrap
msgid "The Whitespace Bug in @code{@value{COUNT-WORDS}}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13936
msgid ""
"The @code{@value{COUNT-WORDS}} command described in the preceding section "
"has two bugs, or rather, one bug with two manifestations.  First, if you "
"mark a region containing only whitespace in the middle of some text, the "
"@code{@value{COUNT-WORDS}} command tells you that the region contains one "
"word! Second, if you mark a region containing only whitespace at the end of "
"the buffer or the accessible portion of a narrowed buffer, the command "
"displays an error message that looks like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:13939
#, no-wrap
msgid "Search failed: \"\\\\w+\\\\W*\"\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13943
msgid ""
"If you are reading this in Info in GNU Emacs, you can test for these bugs "
"yourself."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13945
msgid "First, evaluate the function in the usual manner to install it."
msgstr ""

#. type: ifinfo
#: emacs-lisp-intro.texi:13948
msgid ""
"Here is a copy of the definition.  Place your cursor after the closing "
"parenthesis and type @kbd{C-x C-e} to install it."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:13957
#, no-wrap
msgid ""
";; @r{First version; has bugs!}\n"
"(defun @value{COUNT-WORDS} (beginning end)\n"
"  \"Print number of words in the region.\n"
"Words are defined as at least one word-constituent character followed\n"
"by at least one character that is not a word-constituent.  The buffer's\n"
"syntax table determines which characters these are.\"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:13961
#, no-wrap
msgid ""
"  (interactive \"r\")\n"
"  (message \"Counting words in region ... \")\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:13983
#, no-wrap
msgid ""
";;; @r{3. Send a message to the user.}\n"
"      (cond ((zerop count)\n"
"             (message \"The region does NOT have any words.\"))\n"
"            ((= 1 count) (message \"The region has 1 word.\"))\n"
"            (t (message \"The region has %d words.\" count))))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13989
msgid "If you wish, you can also install this keybinding by evaluating it:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:13992
#, no-wrap
msgid "(global-set-key \"\\C-c=\" '@value{COUNT-WORDS})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:13997
msgid ""
"To conduct the first test, set mark and point to the beginning and end of "
"the following line and then type @kbd{C-c =} (or @kbd{M-x "
"@value{COUNT-WORDS}} if you have not bound @kbd{C-c =}):"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:14000
#, no-wrap
msgid "    one   two  three\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14004
msgid "Emacs will tell you, correctly, that the region has three words."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14011
msgid ""
"Repeat the test, but place mark at the beginning of the line and place point "
"just @emph{before} the word @samp{one}.  Again type the command @kbd{C-c =} "
"(or @kbd{M-x @value{COUNT-WORDS}}).  Emacs should tell you that the region "
"has no words, since it is composed only of the whitespace at the beginning "
"of the line.  But instead Emacs tells you that the region has one word!"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14020
msgid ""
"For the third test, copy the sample line to the end of the @file{*scratch*} "
"buffer and then type several spaces at the end of the line.  Place mark "
"right after the word @samp{three} and point at the end of line.  (The end of "
"the line will be the end of the buffer.)  Type @kbd{C-c =} (or @kbd{M-x "
"@value{COUNT-WORDS}}) as you did before.  Again, Emacs should tell you that "
"the region has no words, since it is composed only of the whitespace at the "
"end of the line.  Instead, Emacs displays an error message saying "
"@samp{Search failed}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14022
msgid "The two bugs stem from the same problem."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14036
msgid ""
"Consider the first manifestation of the bug, in which the command tells you "
"that the whitespace at the beginning of the line contains one word.  What "
"happens is this: The @code{M-x @value{COUNT-WORDS}} command moves point to "
"the beginning of the region.  The @code{while} tests whether the value of "
"point is smaller than the value of @code{end}, which it is.  Consequently, "
"the regular expression search looks for and finds the first word.  It leaves "
"point after the word.  @code{count} is set to one.  The @code{while} loop "
"repeats; but this time the value of point is larger than the value of "
"@code{end}, the loop is exited; and the function displays a message saying "
"the number of words in the region is one.  In brief, the regular expression "
"search looks for and finds the word even though it is outside the marked "
"region."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14042
msgid ""
"In the second manifestation of the bug, the region is whitespace at the end "
"of the buffer.  Emacs says @samp{Search failed}.  What happens is that the "
"true-or-false-test in the @code{while} loop tests true, so the search "
"expression is executed.  But since there are no more words in the buffer, "
"the search fails."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14045
msgid ""
"In both manifestations of the bug, the search extends or attempts to extend "
"outside of the region."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14049
msgid ""
"The solution is to limit the search to the region---this is a fairly simple "
"action, but as you may have come to expect, it is not quite as simple as you "
"might think."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14058
msgid ""
"As we have seen, the @code{re-search-forward} function takes a search "
"pattern as its first argument.  But in addition to this first, mandatory "
"argument, it accepts three optional arguments.  The optional second argument "
"bounds the search.  The optional third argument, if @code{t}, causes the "
"function to return @code{nil} rather than signal an error if the search "
"fails.  The optional fourth argument is a repeat count.  (In Emacs, you can "
"see a function's documentation by typing @kbd{C-h f}, the name of the "
"function, and then @key{RET}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14063
msgid ""
"In the @code{@value{COUNT-WORDS}} definition, the value of the end of the "
"region is held by the variable @code{end} which is passed as an argument to "
"the function.  Thus, we can add @code{end} as an argument to the regular "
"expression search expression:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:14066
#, no-wrap
msgid "(re-search-forward \"\\\\w+\\\\W*\" end)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14072
msgid ""
"However, if you make only this change to the @code{@value{COUNT-WORDS}} "
"definition and then test the new version of the definition on a stretch of "
"whitespace, you will receive an error message saying @samp{Search failed}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14078
msgid ""
"What happens is this: the search is limited to the region, and fails as you "
"expect because there are no word-constituent characters in the region.  "
"Since it fails, we receive an error message.  But we do not want to receive "
"an error message in this case; we want to receive the message that \"The "
"region does NOT have any words.\""
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14082
msgid ""
"The solution to this problem is to provide @code{re-search-forward} with a "
"third argument of @code{t}, which causes the function to return @code{nil} "
"rather than signal an error if the search fails."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14086
msgid ""
"However, if you make this change and try it, you will see the message "
"``Counting words in region ... '' and @dots{} you will keep on seeing that "
"message @dots{}, until you type @kbd{C-g} (@code{keyboard-quit})."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14098
msgid ""
"Here is what happens: the search is limited to the region, as before, and it "
"fails because there are no word-constituent characters in the region, as "
"expected.  Consequently, the @code{re-search-forward} expression returns "
"@code{nil}.  It does nothing else.  In particular, it does not move point, "
"which it does as a side effect if it finds the search target.  After the "
"@code{re-search-forward} expression returns @code{nil}, the next expression "
"in the @code{while} loop is evaluated.  This expression increments the "
"count.  Then the loop repeats.  The true-or-false-test tests true because "
"the value of point is still less than the value of end, since the "
"@code{re-search-forward} expression did not move point. @dots{} and the "
"cycle repeats @dots{}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14105
msgid ""
"The @code{@value{COUNT-WORDS}} definition requires yet another modification, "
"to cause the true-or-false-test of the @code{while} loop to test false if "
"the search fails.  Put another way, there are two conditions that must be "
"satisfied in the true-or-false-test before the word count variable is "
"incremented: point must still be within the region and the search expression "
"must have found a word to count."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14110
msgid ""
"Since both the first condition and the second condition must be true "
"together, the two expressions, the region test and the search expression, "
"can be joined with an @code{and} special form and embedded in the "
"@code{while} loop as the true-or-false-test, like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:14113
#, no-wrap
msgid "(and (< (point) end) (re-search-forward \"\\\\w+\\\\W*\" end t))\n"
msgstr ""

#. type: iftex
#: emacs-lisp-intro.texi:14121 emacs-lisp-intro.texi:16119
msgid ""
"(For information about @code{and}, see @ref{kill-new function, , The "
"@code{kill-new} function}.)"
msgstr ""

#. type: ifinfo
#: emacs-lisp-intro.texi:14126 emacs-lisp-intro.texi:16124
msgid ""
"(@xref{kill-new function, , The @code{kill-new} function}, for information "
"about @code{and}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14135
msgid ""
"The @code{re-search-forward} expression returns @code{t} if the search "
"succeeds and as a side effect moves point.  Consequently, as words are "
"found, point is moved through the region.  When the search expression fails "
"to find another word, or when point reaches the end of the region, the "
"true-or-false-test tests false, the @code{while} loop exits, and the "
"@code{@value{COUNT-WORDS}} function displays one or other of its messages."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14139
msgid ""
"After incorporating these final changes, the @code{@value{COUNT-WORDS}} "
"works without bugs (or at least, without bugs that I have found!).  Here is "
"what it looks like:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14147
#, no-wrap
msgid ""
";;; @r{Final version:} @code{while}\n"
"(defun @value{COUNT-WORDS} (beginning end)\n"
"  \"Print number of words in the region.\"\n"
"  (interactive \"r\")\n"
"  (message \"Counting words in region ... \")\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14154
#, no-wrap
msgid ""
";;; @r{1. Set up appropriate conditions.}\n"
"  (save-excursion\n"
"    (let ((count 0))\n"
"      (goto-char beginning)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14161
#, no-wrap
msgid ""
";;; @r{2. Run the} while @r{loop.}\n"
"      (while (and (< (point) end)\n"
"                  (re-search-forward \"\\\\w+\\\\W*\" end t))\n"
"        (setq count (1+ count)))\n"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:14178
#, no-wrap
msgid "Count Words Recursively"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:14179
#, no-wrap
msgid "Count words recursively"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:14180
#, no-wrap
msgid "Recursively counting words"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:14181
#, no-wrap
msgid "Words, counted recursively"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14185
msgid ""
"You can write the function for counting words recursively as well as with a "
"@code{while} loop.  Let's see how this is done."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14190
msgid ""
"First, we need to recognize that the @code{@value{COUNT-WORDS}} function has "
"three jobs: it sets up the appropriate conditions for counting to occur; it "
"counts the words in the region; and it sends a message to the user telling "
"how many words there are."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14198
msgid ""
"If we write a single recursive function to do everything, we will receive a "
"message for every recursive call.  If the region contains 13 words, we will "
"receive thirteen messages, one right after the other.  We don't want this! "
"Instead, we must write two functions to do the job, one of which (the "
"recursive function) will be used inside of the other.  One function will set "
"up the conditions and display the message; the other will return the word "
"count."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14201
msgid ""
"Let us start with the function that causes the message to be displayed.  We "
"can continue to call this @code{@value{COUNT-WORDS}}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14206
msgid ""
"This is the function that the user will call.  It will be interactive.  "
"Indeed, it will be similar to our previous versions of this function, except "
"that it will call @code{recursive-count-words} to determine how many words "
"are in the region."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14210
msgid ""
"We can readily construct a template for this function, based on our previous "
"versions:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14217
#, no-wrap
msgid ""
";; @r{Recursive version; uses regular expression search}\n"
"(defun @value{COUNT-WORDS} (beginning end)\n"
"  \"@var{documentation}@dots{}\"\n"
"  (@var{interactive-expression}@dots{})\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14223
#, no-wrap
msgid ""
";;; @r{1. Set up appropriate conditions.}\n"
"  (@var{explanatory message})\n"
"  (@var{set-up functions}@dots{}\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14228
#, no-wrap
msgid ""
";;; @r{2. Count the words.}\n"
"    @var{recursive call}\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14233
#, no-wrap
msgid ""
";;; @r{3. Send a message to the user.}\n"
"    @var{message providing word count}))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14244
msgid ""
"The definition looks straightforward, except that somehow the count returned "
"by the recursive call must be passed to the message displaying the word "
"count.  A little thought suggests that this can be done by making use of a "
"@code{let} expression: we can bind a variable in the varlist of a @code{let} "
"expression to the number of words in the region, as returned by the "
"recursive call; and then the @code{cond} expression, using binding, can "
"display the value to the user."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14249
msgid ""
"Often, one thinks of the binding within a @code{let} expression as somehow "
"secondary to the `primary' work of a function.  But in this case, what you "
"might consider the `primary' job of the function, counting words, is done "
"within the @code{let} expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14252
msgid "Using @code{let}, the function definition looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14258
#, no-wrap
msgid ""
"(defun @value{COUNT-WORDS} (beginning end)\n"
"  \"Print number of words in the region.\"\n"
"  (interactive \"r\")\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14265
#, no-wrap
msgid ""
";;; @r{1. Set up appropriate conditions.}\n"
"  (message \"Counting words in region ... \")\n"
"  (save-excursion\n"
"    (goto-char beginning)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14270
#, no-wrap
msgid ""
";;; @r{2. Count the words.}\n"
"    (let ((count (recursive-count-words end)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14287
msgid "Next, we need to write the recursive counting function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14290
msgid ""
"A recursive function has at least three parts: the `do-again-test', the "
"`next-step-expression', and the recursive call."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14300
msgid ""
"The do-again-test determines whether the function will or will not be called "
"again.  Since we are counting words in a region and can use a function that "
"moves point forward for every word, the do-again-test can check whether "
"point is still within the region.  The do-again-test should find the value "
"of point and determine whether point is before, at, or after the value of "
"the end of the region.  We can use the @code{point} function to locate "
"point.  Clearly, we must pass the value of the end of the region to the "
"recursive counting function as an argument."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14303
msgid ""
"In addition, the do-again-test should also test whether the search finds a "
"word.  If it does not, the function should not call itself again."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14310
msgid ""
"The next-step-expression changes a value so that when the recursive function "
"is supposed to stop calling itself, it stops.  More precisely, the "
"next-step-expression changes a value so that at the right time, the "
"do-again-test stops the recursive function from calling itself again.  In "
"this case, the next-step-expression can be the expression that moves point "
"forward, word by word."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14312
msgid "The third part of a recursive function is the recursive call."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14315
msgid ""
"Somewhere, also, we also need a part that does the `work' of the function, a "
"part that does the counting.  A vital part!"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14318
msgid "But already, we have an outline of the recursive counting function:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14326
#, no-wrap
msgid ""
"(defun recursive-count-words (region-end)\n"
"  \"@var{documentation}@dots{}\"\n"
"   @var{do-again-test}\n"
"   @var{next-step-expression}\n"
"   @var{recursive call})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14334
msgid ""
"Now we need to fill in the slots.  Let's start with the simplest cases "
"first: if point is at or beyond the end of the region, there cannot be any "
"words in the region, so the function should return zero.  Likewise, if the "
"search fails, there are no words to count, so the function should return "
"zero."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14337
msgid ""
"On the other hand, if point is within the region and the search succeeds, "
"the function should call itself again."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14340
msgid "Thus, the do-again-test should look like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14345
#, no-wrap
msgid ""
"(and (< (point) region-end)\n"
"     (re-search-forward \"\\\\w+\\\\W*\" region-end t))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14353
msgid ""
"Note that the search expression is part of the do-again-test---the function "
"returns @code{t} if its search succeeds and @code{nil} if it fails.  "
"(@xref{Whitespace Bug, , The Whitespace Bug in @code{@value{COUNT-WORDS}}}, "
"for an explanation of how @code{re-search-forward} works.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14359
msgid ""
"The do-again-test is the true-or-false test of an @code{if} clause.  "
"Clearly, if the do-again-test succeeds, the then-part of the @code{if} "
"clause should call the function again; but if it fails, the else-part should "
"return zero since either point is outside the region or the search failed "
"because there were no words to find."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14363
msgid ""
"But before considering the recursive call, we need to consider the "
"next-step-expression.  What is it? Interestingly, it is the search part of "
"the do-again-test."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14370
msgid ""
"In addition to returning @code{t} or @code{nil} for the do-again-test, "
"@code{re-search-forward} moves point forward as a side effect of a "
"successful search.  This is the action that changes the value of point so "
"that the recursive function stops calling itself when point completes its "
"movement through the region.  Consequently, the @code{re-search-forward} "
"expression is the next-step-expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14374
msgid ""
"In outline, then, the body of the @code{recursive-count-words} function "
"looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14382
#, no-wrap
msgid ""
"(if @var{do-again-test-and-next-step-combined}\n"
"    ;; @r{then}\n"
"    @var{recursive-call-returning-count}\n"
"  ;; @r{else}\n"
"  @var{return-zero})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14386
msgid "How to incorporate the mechanism that counts?"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14390
msgid ""
"If you are not used to writing recursive functions, a question like this can "
"be troublesome.  But it can and should be approached systematically."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14396
msgid ""
"We know that the counting mechanism should be associated in some way with "
"the recursive call.  Indeed, since the next-step-expression moves point "
"forward by one word, and since a recursive call is made for each word, the "
"counting mechanism must be an expression that adds one to the value returned "
"by a call to @code{recursive-count-words}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14399
msgid "Consider several cases:"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:14406
msgid ""
"If there are two words in the region, the function should return a value "
"resulting from adding one to the value returned when it counts the first "
"word, plus the number returned when it counts the remaining words in the "
"region, which in this case is one."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:14412
msgid ""
"If there is one word in the region, the function should return a value "
"resulting from adding one to the value returned when it counts that word, "
"plus the number returned when it counts the remaining words in the region, "
"which in this case is zero."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:14415
msgid "If there are no words in the region, the function should return zero."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14421
msgid ""
"From the sketch we can see that the else-part of the @code{if} returns zero "
"for the case of no words.  This means that the then-part of the @code{if} "
"must return a value resulting from adding one to the value returned from a "
"count of the remaining words."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14425
msgid ""
"The expression will look like this, where @code{1+} is a function that adds "
"one to its argument."
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:14428
#, no-wrap
msgid "(1+ (recursive-count-words region-end))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14433
msgid "The whole @code{recursive-count-words} function will then look like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14438
#, no-wrap
msgid ""
"(defun recursive-count-words (region-end)\n"
"  \"@var{documentation}@dots{}\"\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14442 emacs-lisp-intro.texi:14506
#, no-wrap
msgid ""
";;; @r{1. do-again-test}\n"
"  (if (and (< (point) region-end)\n"
"           (re-search-forward \"\\\\w+\\\\W*\" region-end t))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14447 emacs-lisp-intro.texi:14511
#, no-wrap
msgid ""
";;; @r{2. then-part: the recursive call}\n"
"      (1+ (recursive-count-words region-end))\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14450 emacs-lisp-intro.texi:14514
#, no-wrap
msgid ""
";;; @r{3. else-part}\n"
"    0))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14455
msgid "Let's examine how this works:"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14458
msgid ""
"If there are no words in the region, the else part of the @code{if} "
"expression is evaluated and consequently the function returns zero."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14466
msgid ""
"If there is one word in the region, the value of point is less than the "
"value of @code{region-end} and the search succeeds.  In this case, the "
"true-or-false-test of the @code{if} expression tests true, and the then-part "
"of the @code{if} expression is evaluated.  The counting expression is "
"evaluated.  This expression returns a value (which will be the value "
"returned by the whole function) that is the sum of one added to the value "
"returned by a recursive call."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14475
msgid ""
"Meanwhile, the next-step-expression has caused point to jump over the first "
"(and in this case only) word in the region.  This means that when "
"@code{(recursive-count-words region-end)} is evaluated a second time, as a "
"result of the recursive call, the value of point will be equal to or greater "
"than the value of region end.  So this time, @code{recursive-count-words} "
"will return zero.  The zero will be added to one, and the original "
"evaluation of @code{recursive-count-words} will return one plus zero, which "
"is one, which is the correct amount."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14481
msgid ""
"Clearly, if there are two words in the region, the first call to "
"@code{recursive-count-words} returns one added to the value returned by "
"calling @code{recursive-count-words} on a region containing the remaining "
"word---that is, it adds one to one, producing two, which is the correct "
"amount."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14486
msgid ""
"Similarly, if there are three words in the region, the first call to "
"@code{recursive-count-words} returns one added to the value returned by "
"calling @code{recursive-count-words} on a region containing the remaining "
"two words---and so on and so on."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14490
msgid "With full documentation the two functions look like this:"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14494
msgid "The recursive function:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14500
#, no-wrap
msgid ""
"(defun recursive-count-words (region-end)\n"
"  \"Number of words between point and REGION-END.\"\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14520
msgid "The wrapper:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14526
#, no-wrap
msgid ""
";;; @r{Recursive version}\n"
"(defun @value{COUNT-WORDS} (beginning end)\n"
"  \"Print number of words in the region.\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14533
#, no-wrap
msgid ""
"Words are defined as at least one word-constituent\n"
"character followed by at least one character that is\n"
"not a word-constituent.  The buffer's syntax table\n"
"determines which characters these are.\"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14540
#, no-wrap
msgid ""
"  (interactive \"r\")\n"
"  (message \"Counting words in region ... \")\n"
"  (save-excursion\n"
"    (goto-char beginning)\n"
"    (let ((count (recursive-count-words end)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14545
#, no-wrap
msgid ""
"      (cond ((zerop count)\n"
"             (message\n"
"              \"The region does NOT have any words.\"))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14552
#, no-wrap
msgid ""
"            ((= 1 count)\n"
"             (message \"The region has 1 word.\"))\n"
"            (t\n"
"             (message\n"
"              \"The region has %d words.\" count))))))\n"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:14556
#, no-wrap
msgid "Exercise: Counting Punctuation"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14561
msgid ""
"Using a @code{while} loop, write a function to count the number of "
"punctuation marks in a region---period, comma, semicolon, colon, exclamation "
"mark, and question mark.  Do the same using recursion."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:14564 emacs-lisp-intro.texi:14773
#, no-wrap
msgid "Counting words in a @code{defun}"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:14565
#, no-wrap
msgid "Word counting in a @code{defun}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14574
msgid ""
"Our next project is to count the number of words in a function definition.  "
"Clearly, this can be done using some variant of @code{@value{COUNT-WORDS}}.  "
"@xref{Counting Words, , Counting Words: Repetition and Regexps}.  If we are "
"just going to count the words in one definition, it is easy enough to mark "
"the definition with the @kbd{C-M-h} (@code{mark-defun}) command, and then "
"call @code{@value{COUNT-WORDS}}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14581
msgid ""
"However, I am more ambitious: I want to count the words and symbols in every "
"definition in the Emacs sources and then print a graph that shows how many "
"functions there are of each length: how many contain 40 to 49 words or "
"symbols, how many contain 50 to 59 words or symbols, and so on.  I have "
"often been curious how long a typical function is, and this will tell."
msgstr ""

#. type: unnumberedsec
#: emacs-lisp-intro.texi:14596 emacs-lisp-intro.texi:14597
#, no-wrap
msgid "Divide and Conquer"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14604
msgid ""
"Described in one phrase, the histogram project is daunting; but divided into "
"numerous small steps, each of which we can take one at a time, the project "
"becomes less fearsome.  Let us consider what the steps must be:"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:14609
msgid ""
"First, write a function to count the words in one definition.  This includes "
"the problem of handling symbols as well as words."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:14614
msgid ""
"Second, write a function to list the numbers of words in each function in a "
"file.  This function can use the @code{count-words-in-defun} function."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:14620
msgid ""
"Third, write a function to list the numbers of words in each function in "
"each of several files.  This entails automatically finding the various "
"files, switching to them, and counting the words in the definitions within "
"them."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:14625
msgid ""
"Fourth, write a function to convert the list of numbers that we created in "
"step three to a form that will be suitable for printing as a graph."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:14628
msgid "Fifth, write a function to print the results as a graph."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14632
msgid ""
"This is quite a project! But if we take each step slowly, it will not be "
"difficult."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:14634
#, no-wrap
msgid "What to Count?"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:14635
#, no-wrap
msgid "Words and symbols in defun"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14648
msgid ""
"When we first start thinking about how to count the words in a function "
"definition, the first question is (or ought to be) what are we going to "
"count? When we speak of `words' with respect to a Lisp function definition, "
"we are actually speaking, in large part, of `symbols'.  For example, the "
"following @code{multiply-by-seven} function contains the five symbols "
"@code{defun}, @code{multiply-by-seven}, @code{number}, @code{*}, and "
"@code{7}.  In addition, in the documentation string, it contains the four "
"words @samp{Multiply}, @samp{NUMBER}, @samp{by}, and @samp{seven}.  The "
"symbol @samp{number} is repeated, so the definition contains a total of ten "
"words and symbols."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14663
msgid ""
"However, if we mark the @code{multiply-by-seven} definition with @kbd{C-M-h} "
"(@code{mark-defun}), and then call @code{@value{COUNT-WORDS}} on it, we will "
"find that @code{@value{COUNT-WORDS}} claims the definition has eleven words, "
"not ten! Something is wrong!"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14670
msgid ""
"The problem is twofold: @code{@value{COUNT-WORDS}} does not count the "
"@samp{*} as a word, and it counts the single symbol, "
"@code{multiply-by-seven}, as containing three words.  The hyphens are "
"treated as if they were interword spaces rather than intraword connectors: "
"@samp{multiply-by-seven} is counted as if it were written @samp{multiply by "
"seven}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14675
msgid ""
"The cause of this confusion is the regular expression search within the "
"@code{@value{COUNT-WORDS}} definition that moves point forward word by "
"word.  In the canonical version of @code{@value{COUNT-WORDS}}, the regexp "
"is:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:14678
#, no-wrap
msgid "\"\\\\w+\\\\W*\"\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14686
msgid ""
"This regular expression is a pattern defining one or more word constituent "
"characters possibly followed by one or more characters that are not word "
"constituents.  What is meant by `word constituent characters' brings us to "
"the issue of syntax, which is worth a section of its own."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:14688
#, no-wrap
msgid "What Constitutes a Word or Symbol?"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:14689
#, no-wrap
msgid "Syntax categories and tables"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14700
msgid ""
"Emacs treats different characters as belonging to different @dfn{syntax "
"categories}.  For example, the regular expression, @samp{\\\\w+}, is a "
"pattern specifying one or more @emph{word constituent} characters.  Word "
"constituent characters are members of one syntax category.  Other syntax "
"categories include the class of punctuation characters, such as the period "
"and the comma, and the class of whitespace characters, such as the blank "
"space and the tab character.  (For more information, @pxref{Syntax Tables, , "
"Syntax Tables, elisp, The GNU Emacs Lisp Reference Manual}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14708
msgid ""
"Syntax tables specify which characters belong to which categories.  Usually, "
"a hyphen is not specified as a `word constituent character'.  Instead, it is "
"specified as being in the `class of characters that are part of symbol names "
"but not words.' This means that the @code{@value{COUNT-WORDS}} function "
"treats it in the same way it treats an interword white space, which is why "
"@code{@value{COUNT-WORDS}} counts @samp{multiply-by-seven} as three words."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14711
msgid ""
"There are two ways to cause Emacs to count @samp{multiply-by-seven} as one "
"symbol: modify the syntax table or modify the regular expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14717
msgid ""
"We could redefine a hyphen as a word constituent character by modifying the "
"syntax table that Emacs keeps for each mode.  This action would serve our "
"purpose, except that a hyphen is merely the most common character within "
"symbols that is not typically a word constituent character; there are "
"others, too."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14721
msgid ""
"Alternatively, we can redefine the regexp used in the "
"@code{@value{COUNT-WORDS}} definition so as to include symbols.  This "
"procedure has the merit of clarity, but the task is a little tricky."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14725
msgid ""
"The first part is simple enough: the pattern must match ``at least one "
"character that is a word or symbol constituent''.  Thus:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:14728
#, no-wrap
msgid "\"\\\\(\\\\w\\\\|\\\\s_\\\\)+\"\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14738
msgid ""
"The @samp{\\\\(} is the first part of the grouping construct that includes "
"the @samp{\\\\w} and the @samp{\\\\s_} as alternatives, separated by the "
"@samp{\\\\|}.  The @samp{\\\\w} matches any word-constituent character and "
"the @samp{\\\\s_} matches any character that is part of a symbol name but "
"not a word-constituent character.  The @samp{+} following the group "
"indicates that the word or symbol constituent characters must be matched at "
"least once."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14743
msgid ""
"However, the second part of the regexp is more difficult to design.  What we "
"want is to follow the first part with ``optionally one or more characters "
"that are not constituents of a word or symbol''.  At first, I thought I "
"could define this with the following:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:14746
#, no-wrap
msgid "\"\\\\(\\\\W\\\\|\\\\S_\\\\)*\"\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14753
msgid ""
"The upper case @samp{W} and @samp{S} match characters that are @emph{not} "
"word or symbol constituents.  Unfortunately, this expression matches any "
"character that is either not a word constituent or not a symbol "
"constituent.  This matches any character!"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14763
msgid ""
"I then noticed that every word or symbol in my test region was followed by "
"white space (blank space, tab, or newline).  So I tried placing a pattern to "
"match one or more blank spaces after the pattern for one or more word or "
"symbol constituents.  This failed, too.  Words and symbols are often "
"separated by whitespace, but in actual code parentheses may follow symbols "
"and punctuation may follow words.  So finally, I designed a pattern in which "
"the word or symbol constituents are followed optionally by characters that "
"are not white space and then followed optionally by white space."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14766
msgid "Here is the full regular expression:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:14769
#, no-wrap
msgid "\"\\\\(\\\\w\\\\|\\\\s_\\\\)+[^ \\t\\n]*[ \\t\\n]*\"\n"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:14772
#, no-wrap
msgid "The @code{count-words-in-defun} Function"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14779
msgid ""
"We have seen that there are several ways to write a "
"@code{count-words-region} function.  To write a @code{count-words-in-defun}, "
"we need merely adapt one of these versions."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14785
msgid ""
"The version that uses a @code{while} loop is easy to understand, so I am "
"going to adapt that.  Because @code{count-words-in-defun} will be part of a "
"more complex program, it need not be interactive and it need not display a "
"message but just return the count.  These considerations simplify the "
"definition a little."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14793
msgid ""
"On the other hand, @code{count-words-in-defun} will be used within a buffer "
"that contains function definitions.  Consequently, it is reasonable to ask "
"that the function determine whether it is called when point is within a "
"function definition, and if it is, to return the count for that definition.  "
"This adds complexity to the definition, but saves us from needing to pass "
"arguments to the function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14796
msgid "These considerations lead us to prepare the following template:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14804
#, no-wrap
msgid ""
"(defun count-words-in-defun ()\n"
"  \"@var{documentation}@dots{}\"\n"
"  (@var{set up}@dots{}\n"
"     (@var{while loop}@dots{})\n"
"   @var{return count})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14809
msgid "As usual, our job is to fill in the slots."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14811
msgid "First, the set up."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14818
msgid ""
"We are presuming that this function will be called within a buffer "
"containing function definitions.  Point will either be within a function "
"definition or not.  For @code{count-words-in-defun} to work, point must move "
"to the beginning of the definition, a counter must start at zero, and the "
"counting loop must stop when point reaches the end of the definition."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14826
msgid ""
"The @code{beginning-of-defun} function searches backwards for an opening "
"delimiter such as a @samp{(} at the beginning of a line, and moves point to "
"that position, or else to the limit of the search.  In practice, this means "
"that @code{beginning-of-defun} moves point to the beginning of an enclosing "
"or preceding function definition, or else to the beginning of the buffer.  "
"We can use @code{beginning-of-defun} to place point where we wish to start."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14830
msgid ""
"The @code{while} loop requires a counter to keep track of the words or "
"symbols being counted.  A @code{let} expression can be used to create a "
"local variable for this purpose, and bind it to an initial value of zero."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14835
msgid ""
"The @code{end-of-defun} function works like @code{beginning-of-defun} except "
"that it moves point to the end of the definition.  @code{end-of-defun} can "
"be used as part of an expression that determines the position of the end of "
"the definition."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14841
msgid ""
"The set up for @code{count-words-in-defun} takes shape rapidly: first we "
"move point to the beginning of the definition, then we create a local "
"variable to hold the count, and finally, we record the position of the end "
"of the definition so the @code{while} loop will know when to stop looping."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14850
#, no-wrap
msgid ""
"(beginning-of-defun)\n"
"(let ((count 0)\n"
"      (end (save-excursion (end-of-defun) (point))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14859
msgid ""
"The code is simple.  The only slight complication is likely to concern "
"@code{end}: it is bound to the position of the end of the definition by a "
"@code{save-excursion} expression that returns the value of point after "
"@code{end-of-defun} temporarily moves it to the end of the definition."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14862
msgid ""
"The second part of the @code{count-words-in-defun}, after the set up, is the "
"@code{while} loop."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14869
msgid ""
"The loop must contain an expression that jumps point forward word by word "
"and symbol by symbol, and another expression that counts the jumps.  The "
"true-or-false-test for the @code{while} loop should test true so long as "
"point should jump forward, and false when point is at the end of the "
"definition.  We have already redefined the regular expression for this, so "
"the loop is straightforward:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14876
#, no-wrap
msgid ""
"(while (and (< (point) end)\n"
"            (re-search-forward\n"
"             \"\\\\(\\\\w\\\\|\\\\s_\\\\)+[^ \\t\\n]*[ \\t\\n]*\" end t))\n"
"  (setq count (1+ count)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14883
msgid ""
"The third part of the function definition returns the count of words and "
"symbols.  This part is the last expression within the body of the @code{let} "
"expression, and can be, very simply, the local variable @code{count}, which "
"when evaluated returns the count."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14886
msgid "Put together, the @code{count-words-in-defun} definition looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14895 emacs-lisp-intro.texi:21440
#, no-wrap
msgid ""
"(defun count-words-in-defun ()\n"
"  \"Return the number of words and symbols in a defun.\"\n"
"  (beginning-of-defun)\n"
"  (let ((count 0)\n"
"        (end (save-excursion (end-of-defun) (point))))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14904 emacs-lisp-intro.texi:21450
#, no-wrap
msgid ""
"    (while\n"
"        (and (< (point) end)\n"
"             (re-search-forward\n"
"              \"\\\\(\\\\w\\\\|\\\\s_\\\\)+[^ \\t\\n]*[ \\t\\n]*\"\n"
"              end t))\n"
"      (setq count (1+ count)))\n"
"    count))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14911
msgid ""
"How to test this? The function is not interactive, but it is easy to put a "
"wrapper around the function to make it interactive; we can use almost the "
"same code as for the recursive version of @code{@value{COUNT-WORDS}}:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14920
#, no-wrap
msgid ""
";;; @r{Interactive version.}\n"
"(defun count-words-defun ()\n"
"  \"Number of words and symbols in a function definition.\"\n"
"  (interactive)\n"
"  (message\n"
"   \"Counting words and symbols in function definition ... \")\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14927
#, no-wrap
msgid ""
"  (let ((count (count-words-in-defun)))\n"
"    (cond\n"
"     ((zerop count)\n"
"      (message\n"
"       \"The definition does NOT have any words or symbols.\"))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14935
#, no-wrap
msgid ""
"     ((= 1 count)\n"
"      (message\n"
"       \"The definition has 1 word or symbol.\"))\n"
"     (t\n"
"      (message\n"
"       \"The definition has %d words or symbols.\" count)))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14941
msgid "Let's re-use @kbd{C-c =} as a convenient keybinding:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:14944
#, no-wrap
msgid "(global-set-key \"\\C-c=\" 'count-words-defun)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14949
msgid ""
"Now we can try out @code{count-words-defun}: install both "
"@code{count-words-in-defun} and @code{count-words-defun}, and set the "
"keybinding, and then place the cursor within the following definition:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:14956
#, no-wrap
msgid ""
"(defun multiply-by-seven (number)\n"
"  \"Multiply NUMBER by seven.\"\n"
"  (* 7 number))\n"
"     @result{} 10\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14961
msgid "Success! The definition has 10 words and symbols."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14964
msgid ""
"The next problem is to count the numbers of words and symbols in several "
"definitions within a single file."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:14966
#, no-wrap
msgid "Count Several @code{defuns} Within a File"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14972
msgid ""
"A file such as @file{simple.el} may have a hundred or more function "
"definitions within it.  Our long term goal is to collect statistics on many "
"files, but as a first step, our immediate goal is to collect statistics on "
"one file."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14975
msgid ""
"The information will be a series of numbers, each number being the length of "
"a function definition.  We can store the numbers in a list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14981
msgid ""
"We know that we will want to incorporate the information regarding one file "
"with information about many other files; this means that the function for "
"counting definition lengths within one file need only return the list of "
"lengths.  It need not and should not display any messages."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14987
msgid ""
"The word count commands contain one expression to jump point forward word by "
"word and another expression to count the jumps.  The function to return the "
"lengths of definitions can be designed to work the same way, with one "
"expression to jump point forward definition by definition and another "
"expression to construct the lengths' list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:14998
msgid ""
"This statement of the problem makes it elementary to write the function "
"definition.  Clearly, we will start the count at the beginning of the file, "
"so the first command will be @code{(goto-char (point-min))}.  Next, we start "
"the @code{while} loop; and the true-or-false test of the loop can be a "
"regular expression search for the next function definition---so long as the "
"search succeeds, point is moved forward and then the body of the loop is "
"evaluated.  The body needs an expression that constructs the lengths' list.  "
"@code{cons}, the list construction command, can be used to create the list.  "
"That is almost all there is to it."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15001
msgid "Here is what this fragment of code looks like:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15008
#, no-wrap
msgid ""
"(goto-char (point-min))\n"
"(while (re-search-forward \"^(defun\" nil t)\n"
"  (setq lengths-list\n"
"        (cons (count-words-in-defun) lengths-list)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15013
msgid ""
"What we have left out is the mechanism for finding the file that contains "
"the function definitions."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15017
msgid ""
"In previous examples, we either used this, the Info file, or we switched "
"back and forth to some other buffer, such as the @file{*scratch*} buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15019
msgid "Finding a file is a new process that we have not yet discussed."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15027
msgid ""
"To find a file in Emacs, you use the @kbd{C-x C-f} (@code{find-file})  "
"command.  This command is almost, but not quite right for the lengths "
"problem."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15030
msgid "Let's look at the source for @code{find-file}:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15039
#, no-wrap
msgid ""
"(defun find-file (filename)\n"
"  \"Edit file FILENAME.\n"
"Switch to a buffer visiting file FILENAME,\n"
"creating one if none already exists.\"\n"
"  (interactive \"FFind file: \")\n"
"  (switch-to-buffer (find-file-noselect filename)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15048
msgid ""
"(The most recent version of the @code{find-file} function definition permits "
"you to specify optional wildcards to visit multiple files; that makes the "
"definition more complex and we will not discuss it here, since it is not "
"relevant.  You can see its source using either @kbd{M-.} (@code{find-tag}) "
"or @kbd{C-h f} (@code{describe-function}).)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15077
msgid ""
"The definition I am showing possesses short but complete documentation and "
"an interactive specification that prompts you for a file name when you use "
"the command interactively.  The body of the definition contains two "
"functions, @code{find-file-noselect} and @code{switch-to-buffer}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15084
msgid ""
"According to its documentation as shown by @kbd{C-h f} (the "
"@code{describe-function} command), the @code{find-file-noselect} function "
"reads the named file into a buffer and returns the buffer.  (Its most recent "
"version includes an optional wildcards argument, too, as well as another to "
"read a file literally and an other you suppress warning messages.  These "
"optional arguments are irrelevant.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15092
msgid ""
"However, the @code{find-file-noselect} function does not select the buffer "
"in which it puts the file.  Emacs does not switch its attention (or yours if "
"you are using @code{find-file-noselect}) to the selected buffer.  That is "
"what @code{switch-to-buffer} does: it switches the buffer to which Emacs "
"attention is directed; and it switches the buffer displayed in the window to "
"the new buffer.  We have discussed buffer switching elsewhere.  "
"(@xref{Switching Buffers}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15100
msgid ""
"In this histogram project, we do not need to display each file on the screen "
"as the program determines the length of each definition within it.  Instead "
"of employing @code{switch-to-buffer}, we can work with @code{set-buffer}, "
"which redirects the attention of the computer program to a different buffer "
"but does not redisplay it on the screen.  So instead of calling on "
"@code{find-file} to do the job, we must write our own expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15102
msgid "The task is easy: use @code{find-file-noselect} and @code{set-buffer}."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:15104
#, no-wrap
msgid "@code{lengths-list-file} in Detail"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15112
msgid ""
"The core of the @code{lengths-list-file} function is a @code{while} loop "
"containing a function to move point forward `defun by defun' and a function "
"to count the number of words and symbols in each defun.  This core must be "
"surrounded by functions that do various other tasks, including finding the "
"file, and ensuring that point starts out at the beginning of the file.  The "
"function definition looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15121 emacs-lisp-intro.texi:21460
#, no-wrap
msgid ""
"(defun lengths-list-file (filename)\n"
"  \"Return list of definitions' lengths within FILE.\n"
"The returned list is a list of numbers.\n"
"Each number is the number of words or\n"
"symbols in one function definition.\"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15136
#, no-wrap
msgid ""
"  (message \"Working on `%s' ... \" filename)\n"
"  (save-excursion\n"
"    (let ((buffer (find-file-noselect filename))\n"
"          (lengths-list))\n"
"      (set-buffer buffer)\n"
"      (setq buffer-read-only t)\n"
"      (widen)\n"
"      (goto-char (point-min))\n"
"      (while (re-search-forward \"^(defun\" nil t)\n"
"        (setq lengths-list\n"
"              (cons (count-words-in-defun) lengths-list)))\n"
"      (kill-buffer buffer)\n"
"      lengths-list)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15145
msgid ""
"The function is passed one argument, the name of the file on which it will "
"work.  It has four lines of documentation, but no interactive "
"specification.  Since people worry that a computer is broken if they don't "
"see anything going on, the first line of the body is a message."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15150
msgid ""
"The next line contains a @code{save-excursion} that returns Emacs's "
"attention to the current buffer when the function completes.  This is useful "
"in case you embed this function in another function that presumes point is "
"restored to the original buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15155
msgid ""
"In the varlist of the @code{let} expression, Emacs finds the file and binds "
"the local variable @code{buffer} to the buffer containing the file.  At the "
"same time, Emacs creates @code{lengths-list} as a local variable."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15157
msgid "Next, Emacs switches its attention to the buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15168
msgid ""
"In the following line, Emacs makes the buffer read-only.  Ideally, this line "
"is not necessary.  None of the functions for counting words and symbols in a "
"function definition should change the buffer.  Besides, the buffer is not "
"going to be saved, even if it were changed.  This line is entirely the "
"consequence of great, perhaps excessive, caution.  The reason for the "
"caution is that this function and those it calls work on the sources for "
"Emacs and it is inconvenient if they are inadvertently modified.  It goes "
"without saying that I did not realize a need for this line until an "
"experiment went awry and started to modify my Emacs source files @dots{}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15176
msgid ""
"Next comes a call to widen the buffer if it is narrowed.  This function is "
"usually not needed---Emacs creates a fresh buffer if none already exists; "
"but if a buffer visiting the file already exists Emacs returns that one.  In "
"this case, the buffer may be narrowed and must be widened.  If we wanted to "
"be fully `user-friendly', we would arrange to save the restriction and the "
"location of point, but we won't."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15179
msgid ""
"The @code{(goto-char (point-min))} expression moves point to the beginning "
"of the buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15183
msgid ""
"Then comes a @code{while} loop in which the `work' of the function is "
"carried out.  In the loop, Emacs determines the length of each definition "
"and constructs a lengths' list containing the information."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15189
msgid ""
"Emacs kills the buffer after working through it.  This is to save space "
"inside of Emacs.  My version of GNU Emacs 19 contained over 300 source files "
"of interest; GNU Emacs 22 contains over a thousand source files.  Another "
"function will apply @code{lengths-list-file} to each of the files."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15193
msgid ""
"Finally, the last expression within the @code{let} expression is the "
"@code{lengths-list} variable; its value is returned as the value of the "
"whole function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15197
msgid ""
"You can try this function by installing it in the usual fashion.  Then place "
"your cursor after the following expression and type @kbd{C-x C-e} "
"(@code{eval-last-sexp})."
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:15202
#, no-wrap
msgid ""
"(lengths-list-file\n"
" \"/usr/local/share/emacs/22.1.1/lisp/emacs-lisp/debug.el\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15208
msgid ""
"(You may need to change the pathname of the file; the one here is for GNU "
"Emacs version 22.1.1.  To change the expression, copy it to the "
"@file{*scratch*} buffer and edit it."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15213
msgid ""
"(Also, to see the full length of the list, rather than a truncated version, "
"you may have to evaluate the following:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:15216
#, no-wrap
msgid "(custom-set-variables '(eval-expression-print-length nil))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15221
msgid ""
"(@xref{defcustom, , Specifying Variables using @code{defcustom}}.  Then "
"evaluate the @code{lengths-list-file} expression.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15225
msgid ""
"The lengths' list for @file{debug.el} takes less than a second to produce "
"and looks like this in GNU Emacs 22:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:15228
#, no-wrap
msgid "(83 113 105 144 289 22 30 97 48 89 25 52 52 88 28 29 77 49 43 290 232 587)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15233
msgid ""
"(Using my old machine, the version 19 lengths' list for @file{debug.el} took "
"seven seconds to produce and looked like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:15236
#, no-wrap
msgid "(75 41 80 62 20 45 44 68 45 12 34 235)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15240
msgid ""
"(The newer version of @file{debug.el} contains more defuns than the earlier "
"one; and my new machine is much faster than the old one.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15243
msgid ""
"Note that the length of the last definition in the file is first in the "
"list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15251
msgid ""
"In the previous section, we created a function that returns a list of the "
"lengths of each definition in a file.  Now, we want to define a function to "
"return a master list of the lengths of the definitions in a list of files."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15254
msgid ""
"Working on each of a list of files is a repetitious act, so we can use "
"either a @code{while} loop or recursion."
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:15262
#, no-wrap
msgid "Determine the lengths of @code{defuns}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15274
msgid ""
"The design using a @code{while} loop is routine.  The argument passed the "
"function is a list of files.  As we saw earlier (@pxref{Loop Example}), you "
"can write a @code{while} loop so that the body of the loop is evaluated if "
"such a list contains elements, but to exit the loop if the list is empty.  "
"For this design to work, the body of the loop must contain an expression "
"that shortens the list each time the body is evaluated, so that eventually "
"the list is empty.  The usual technique is to set the value of the list to "
"the value of the @sc{cdr} of the list each time the body is evaluated."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15277
msgid "The template looks like this:"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15296
msgid ""
"Also, we remember that a @code{while} loop returns @code{nil} (the result of "
"evaluating the true-or-false-test), not the result of any evaluation within "
"its body.  (The evaluations within the body of the loop are done for their "
"side effects.)  However, the expression that sets the lengths' list is part "
"of the body---and that is the value that we want returned by the function as "
"a whole.  To do this, we enclose the @code{while} loop within a @code{let} "
"expression, and arrange that the last element of the @code{let} expression "
"contains the value of the lengths' list.  (@xref{Incrementing Example, , "
"Loop Example with an Incrementing Counter}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15300
msgid "These considerations lead us directly to the function itself:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15306
#, no-wrap
msgid ""
";;; @r{Use @code{while} loop.}\n"
"(defun lengths-list-many-files (list-of-files)\n"
"  \"Return list of lengths of defuns in LIST-OF-FILES.\"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15309
#, no-wrap
msgid ""
"  (let (lengths-list)\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15315
#, no-wrap
msgid ""
";;; @r{true-or-false-test}\n"
"    (while list-of-files\n"
"      (setq lengths-list\n"
"            (append\n"
"             lengths-list\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15319
#, no-wrap
msgid ""
";;; @r{Generate a lengths' list.}\n"
"             (lengths-list-file\n"
"              (expand-file-name (car list-of-files)))))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15324
#, no-wrap
msgid ""
";;; @r{Make files' list shorter.}\n"
"      (setq list-of-files (cdr list-of-files)))\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15327
#, no-wrap
msgid ""
";;; @r{Return final value of lengths' list.}\n"
"    lengths-list))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15333
msgid ""
"@code{expand-file-name} is a built-in function that converts a file name to "
"the absolute, long, path name form.  The function employs the name of the "
"directory in which the function is called."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15339
msgid ""
"Thus, if @code{expand-file-name} is called on @code{debug.el} when Emacs is "
"visiting the @file{/usr/local/share/emacs/22.1.1/lisp/emacs-lisp/} "
"directory,"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:15342
#, no-wrap
msgid "debug.el\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15347
msgid "becomes"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:15351
#, no-wrap
msgid "/usr/local/share/emacs/22.1.1/lisp/emacs-lisp/debug.el\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15356
msgid ""
"The only other new element of this function definition is the as yet "
"unstudied function @code{append}, which merits a short section for itself."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:15358
#, no-wrap
msgid "The @code{append} Function"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15362
msgid "The @code{append} function attaches one list to another.  Thus,"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:15365
#, no-wrap
msgid "(append '(1 2 3 4) '(5 6 7 8))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15370
msgid "produces the list"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:15373
#, no-wrap
msgid "(1 2 3 4 5 6 7 8)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15378
msgid ""
"This is exactly how we want to attach two lengths' lists produced by "
"@code{lengths-list-file} to each other.  The results contrast with "
"@code{cons},"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:15381
#, no-wrap
msgid "(cons '(1 2 3 4) '(5 6 7 8))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15387
msgid ""
"which constructs a new list in which the first argument to @code{cons} "
"becomes the first element of the new list:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:15390
#, no-wrap
msgid "((1 2 3 4) 5 6 7 8)\n"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:15393
#, no-wrap
msgid "Recursively Count Words in Different Files"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15398
msgid ""
"Besides a @code{while} loop, you can work on each of a list of files with "
"recursion.  A recursive version of @code{lengths-list-many-files} is short "
"and simple."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15407
msgid ""
"The recursive function has the usual parts: the `do-again-test', the "
"`next-step-expression', and the recursive call.  The `do-again-test' "
"determines whether the function should call itself again, which it will do "
"if the @code{list-of-files} contains any remaining elements; the "
"`next-step-expression' resets the @code{list-of-files} to the @sc{cdr} of "
"itself, so eventually the list will be empty; and the recursive call calls "
"itself on the shorter list.  The complete function is shorter than this "
"description!"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:15407
#, no-wrap
msgid "recursive-lengths-list-many-files"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15419
#, no-wrap
msgid ""
"(defun recursive-lengths-list-many-files (list-of-files)\n"
"  \"Return list of lengths of each defun in LIST-OF-FILES.\"\n"
"  (if list-of-files                     ; @r{do-again-test}\n"
"      (append\n"
"       (lengths-list-file\n"
"        (expand-file-name (car list-of-files)))\n"
"       (recursive-lengths-list-many-files\n"
"        (cdr list-of-files)))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15426
msgid ""
"In a sentence, the function returns the lengths' list for the first of the "
"@code{list-of-files} appended to the result of calling itself on the rest of "
"the @code{list-of-files}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15430
msgid ""
"Here is a test of @code{recursive-lengths-list-many-files}, along with the "
"results of running @code{lengths-list-file} on each of the files "
"individually."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15437
msgid ""
"Install @code{recursive-lengths-list-many-files} and "
"@code{lengths-list-file}, if necessary, and then evaluate the following "
"expressions.  You may need to change the files' pathnames; those here work "
"when this Info file and the Emacs sources are located in their customary "
"places.  To change the expressions, copy them to the @file{*scratch*} "
"buffer, edit them, and then evaluate them."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15441
msgid ""
"The results are shown after the @samp{@result{}}.  (These results are for "
"files from Emacs version 22.1.1; files from other versions of Emacs may "
"produce different results.)"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15446
#, no-wrap
msgid ""
"(cd \"/usr/local/share/emacs/22.1.1/\")\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15449
#, no-wrap
msgid ""
"(lengths-list-file \"./lisp/macros.el\")\n"
"     @result{} (283 263 480 90)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15454
#, no-wrap
msgid ""
"(lengths-list-file \"./lisp/mail/mailalias.el\")\n"
"     @result{} (38 32 29 95 178 180 321 218 324)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15459
#, no-wrap
msgid ""
"(lengths-list-file \"./lisp/makesum.el\")\n"
"     @result{} (85 181)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15467
#, no-wrap
msgid ""
"  (recursive-lengths-list-many-files\n"
"   '(\"./lisp/macros.el\"\n"
"     \"./lisp/mail/mailalias.el\"\n"
"     \"./lisp/makesum.el\"))\n"
"       @result{} (283 263 480 90 38 32 29 95 178 180 321 218 324 85 181)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15472
msgid ""
"The @code{recursive-lengths-list-many-files} function produces the output we "
"want."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15474
msgid "The next step is to prepare the data in the list for display in a graph."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15485
msgid ""
"The @code{recursive-lengths-list-many-files} function returns a list of "
"numbers.  Each number records the length of a function definition.  What we "
"need to do now is transform this data into a list of numbers suitable for "
"generating a graph.  The new list will tell how many functions definitions "
"contain less than 10 words and symbols, how many contain between 10 and 19 "
"words and symbols, how many contain between 20 and 29 words and symbols, and "
"so on."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15490
msgid ""
"In brief, we need to go through the lengths' list produced by the "
"@code{recursive-lengths-list-many-files} function and count the number of "
"defuns within each range of lengths, and produce a list of those numbers."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:15499
#, no-wrap
msgid "Data for Display in Detail"
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:15500
#, no-wrap
msgid "The Data for Display in Detail"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15507
msgid ""
"Based on what we have done before, we can readily foresee that it should not "
"be too hard to write a function that `@sc{cdr}s' down the lengths' list, "
"looks at each element, determines which length range it is in, and "
"increments a counter for that range."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15516
msgid ""
"However, before beginning to write such a function, we should consider the "
"advantages of sorting the lengths' list first, so the numbers are ordered "
"from smallest to largest.  First, sorting will make it easier to count the "
"numbers in each range, since two adjacent numbers will either be in the same "
"length range or in adjacent ranges.  Second, by inspecting a sorted list, we "
"can discover the highest and lowest number, and thereby determine the "
"largest and smallest length range that we will need."
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:15518
#, no-wrap
msgid "Sorting Lists"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:15519
#, no-wrap
msgid "sort"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15525
msgid ""
"Emacs contains a function to sort lists, called (as you might guess)  "
"@code{sort}.  The @code{sort} function takes two arguments, the list to be "
"sorted, and a predicate that determines whether the first of two list "
"elements is ``less'' than the second."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15533
msgid ""
"As we saw earlier (@pxref{Wrong Type of Argument, , Using the Wrong Type "
"Object as an Argument}), a predicate is a function that determines whether "
"some property is true or false.  The @code{sort} function will reorder a "
"list according to whatever property the predicate uses; this means that "
"@code{sort} can be used to sort non-numeric lists by non-numeric "
"criteria---it can, for example, alphabetize a list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15536
msgid "The @code{<} function is used when sorting a numeric list.  For example,"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:15539
#, no-wrap
msgid "(sort '(4 8 21 17 33 7 21 7) '<)\n"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:15547
#, no-wrap
msgid "(4 7 7 8 17 21 21 33)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15553
msgid ""
"(Note that in this example, both the arguments are quoted so that the "
"symbols are not evaluated before being passed to @code{sort} as arguments.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15557
msgid ""
"Sorting the list returned by the @code{recursive-lengths-list-many-files} "
"function is straightforward; it uses the @code{<} function:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15580
#, no-wrap
msgid ""
"(sort\n"
" (recursive-lengths-list-many-files\n"
"  '(\"./lisp/macros.el\"\n"
"    \"./lisp/mailalias.el\"\n"
"    \"./lisp/makesum.el\"))\n"
" '<)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15586
msgid "which produces:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:15589
#, no-wrap
msgid "(29 32 38 85 90 95 178 180 181 218 263 283 321 324 480)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15595
msgid ""
"(Note that in this example, the first argument to @code{sort} is not quoted, "
"since the expression must be evaluated so as to produce the list that is "
"passed to @code{sort}.)"
msgstr ""

#. type: subsection
#: emacs-lisp-intro.texi:15597
#, no-wrap
msgid "Making a List of Files"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15605
msgid ""
"The @code{recursive-lengths-list-many-files} function requires a list of "
"files as its argument.  For our test examples, we constructed such a list by "
"hand; but the Emacs Lisp source directory is too large for us to do for "
"that.  Instead, we will write a function to do the job for us.  In this "
"function, we will use both a @code{while} loop and a recursive call."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:15606
#, no-wrap
msgid "directory-files"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15612
msgid ""
"We did not have to write a function like this for older versions of GNU "
"Emacs, since they placed all the @samp{.el} files in one directory.  "
"Instead, we were able to use the @code{directory-files} function, which "
"lists the names of files that match a specified pattern within a single "
"directory."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15619
msgid ""
"However, recent versions of Emacs place Emacs Lisp files in sub-directories "
"of the top level @file{lisp} directory.  This re-arrangement eases "
"navigation.  For example, all the mail related files are in a @file{lisp} "
"sub-directory called @file{mail}.  But at the same time, this arrangement "
"forces us to create a file listing function that descends into the "
"sub-directories."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:15620
#, no-wrap
msgid "files-in-below-directory"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15627
msgid ""
"We can create this function, called @code{files-in-below-directory}, using "
"familiar functions such as @code{car}, @code{nthcdr}, and @code{substring} "
"in conjunction with an existing function called "
"@code{directory-files-and-attributes}.  This latter function not only lists "
"all the filenames in a directory, including the names of sub-directories, "
"but also their attributes."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15631
msgid ""
"To restate our goal: to create a function that will enable us to feed "
"filenames to @code{recursive-lengths-list-many-files} as a list that looks "
"like this (but with more elements):"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15637
#, no-wrap
msgid ""
"(\"./lisp/macros.el\"\n"
" \"./lisp/mail/rmail.el\"\n"
" \"./lisp/makesum.el\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15647
msgid ""
"The @code{directory-files-and-attributes} function returns a list of lists.  "
"Each of the lists within the main list consists of 13 elements.  The first "
"element is a string that contains the name of the file---which, in "
"GNU/Linux, may be a `directory file', that is to say, a file with the "
"special attributes of a directory.  The second element of the list is "
"@code{t} for a directory, a string for symbolic link (the string is the name "
"linked to), or @code{nil}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15652
msgid ""
"For example, the first @samp{.el} file in the @file{lisp/} directory is "
"@file{abbrev.el}.  Its name is "
"@file{/usr/local/share/emacs/22.1.1/lisp/abbrev.el} and it is not a "
"directory or a symbolic link."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15656
msgid ""
"This is how @code{directory-files-and-attributes} lists that file and its "
"attributes:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15664
#, no-wrap
msgid ""
"(\"abbrev.el\"\n"
"nil\n"
"1\n"
"1000\n"
"100\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15671
#, no-wrap
msgid ""
"(20615 27034 579989 697000)\n"
"(17905 55681 0 0)\n"
"(20615 26327 734791 805000)\n"
"13188\n"
"\"-rw-r--r--\"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15676
#, no-wrap
msgid ""
"nil\n"
"2971624\n"
"773)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15682
msgid ""
"On the other hand, @file{mail/} is a directory within the @file{lisp/} "
"directory.  The beginning of its listing looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15689
#, no-wrap
msgid ""
"(\"mail\"\n"
"t\n"
"@dots{}\n"
")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15696
msgid ""
"(To learn about the different attributes, look at the documentation of "
"@code{file-attributes}.  Bear in mind that the @code{file-attributes} "
"function does not list the filename, so its first element is "
"@code{directory-files-and-attributes}'s second element.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15700
msgid ""
"We will want our new function, @code{files-in-below-directory}, to list the "
"@samp{.el} files in the directory it is told to check, and in any "
"directories below that directory."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15706
msgid ""
"This gives us a hint on how to construct @code{files-in-below-directory}: "
"within a directory, the function should add @samp{.el} filenames to a list; "
"and if, within a directory, the function comes upon a sub-directory, it "
"should go into that sub-directory and repeat its actions."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15715
msgid ""
"However, we should note that every directory contains a name that refers to "
"itself, called @file{.}, (``dot'') and a name that refers to its parent "
"directory, called @file{..} (``double dot'').  (In @file{/}, the root "
"directory, @file{..} refers to itself, since @file{/} has no parent.)  "
"Clearly, we do not want our @code{files-in-below-directory} function to "
"enter those directories, since they always lead us, directly or indirectly, "
"to the current directory."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15718
msgid ""
"Consequently, our @code{files-in-below-directory} function must do several "
"tasks:"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:15723
msgid ""
"Check to see whether it is looking at a filename that ends in @samp{.el}; "
"and if so, add its name to a list."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:15727
msgid ""
"Check to see whether it is looking at a filename that is the name of a "
"directory; and if so,"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:15732
msgid ""
"Check to see whether it is looking at @file{.} or @file{..}; and if so skip "
"it."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:15735
msgid "Or else, go into that directory and repeat the process."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15745
msgid ""
"Let's write a function definition to do these tasks.  We will use a "
"@code{while} loop to move from one filename to another within a directory, "
"checking what needs to be done; and we will use a recursive call to repeat "
"the actions on each sub-directory.  The recursive pattern is `accumulate' "
"(@pxref{Accumulate, , Recursive Pattern: @emph{accumulate}}), using "
"@code{append} as the combiner."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15758
msgid "Here is the function:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15768
#, no-wrap
msgid ""
"(defun files-in-below-directory (directory)\n"
"  \"List the .el files in DIRECTORY and in its sub-directories.\"\n"
"  ;; Although the function will be used non-interactively,\n"
"  ;; it will be easier to test if we make it interactive.\n"
"  ;; The directory will have a name such as\n"
"  ;;  \"/usr/local/share/emacs/22.1.1/lisp/\"\n"
"  (interactive \"DDirectory name: \")\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15775
#, no-wrap
msgid ""
"  (let (el-files-list\n"
"        (current-directory-list\n"
"         (directory-files-and-attributes directory t)))\n"
"    ;; while we are in the current directory\n"
"    (while current-directory-list\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15783
#, no-wrap
msgid ""
"      (cond\n"
"       ;; check to see whether filename ends in `.el'\n"
"       ;; and if so, append its name to a list.\n"
"       ((equal \".el\" (substring (car (car current-directory-list)) -3))\n"
"        (setq el-files-list\n"
"              (cons (car (car current-directory-list)) el-files-list)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15794
#, no-wrap
msgid ""
"       ;; check whether filename is that of a directory\n"
"       ((eq t (car (cdr (car current-directory-list))))\n"
"        ;; decide whether to skip or recurse\n"
"        (if\n"
"            (equal \".\"\n"
"                   (substring (car (car current-directory-list)) -1))\n"
"            ;; then do nothing since filename is that of\n"
"            ;;   current directory or parent, \".\" or \"..\"\n"
"            ()\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15807
#, no-wrap
msgid ""
"          ;; else descend into the directory and repeat the process\n"
"          (setq el-files-list\n"
"                (append\n"
"                 (files-in-below-directory\n"
"                  (car (car current-directory-list)))\n"
"                 el-files-list)))))\n"
"      ;; move to the next filename in the list; this also\n"
"      ;; shortens the list so the while loop eventually comes to an end\n"
"      (setq current-directory-list (cdr current-directory-list)))\n"
"    ;; return the filenames\n"
"    el-files-list))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15815
msgid ""
"The @code{files-in-below-directory} @code{directory-files} function takes "
"one argument, the name of a directory."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15818
msgid "Thus, on my system,"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15826
#, no-wrap
msgid ""
"(length\n"
" (files-in-below-directory \"/usr/local/share/emacs/22.1.1/lisp/\"))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15832
msgid ""
"tells me that in and below my Lisp sources directory are 1031 @samp{.el} "
"files."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15836
msgid ""
"@code{files-in-below-directory} returns a list in reverse alphabetical "
"order.  An expression to sort the list in alphabetical order looks like "
"this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15842
#, no-wrap
msgid ""
"(sort\n"
" (files-in-below-directory \"/usr/local/share/emacs/22.1.1/lisp/\")\n"
" 'string-lessp)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15864
msgid ""
"Our immediate goal is to generate a list that tells us how many function "
"definitions contain fewer than 10 words and symbols, how many contain "
"between 10 and 19 words and symbols, how many contain between 20 and 29 "
"words and symbols, and so on."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15872
msgid ""
"With a sorted list of numbers, this is easy: count how many elements of the "
"list are smaller than 10, then, after moving past the numbers just counted, "
"count how many are smaller than 20, then, after moving past the numbers just "
"counted, count how many are smaller than 30, and so on.  Each of the "
"numbers, 10, 20, 30, 40, and the like, is one larger than the top of that "
"range.  We can call the list of such numbers the @code{top-of-ranges} list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15876
msgid ""
"If we wished, we could generate this list automatically, but it is simpler "
"to write a list manually.  Here it is:"
msgstr ""

#. type: vindex
#: emacs-lisp-intro.texi:15876
#, no-wrap
msgid "top-of-ranges"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15888
#, no-wrap
msgid ""
"(defvar top-of-ranges\n"
" '(10  20  30  40  50\n"
"   60  70  80  90 100\n"
"  110 120 130 140 150\n"
"  160 170 180 190 200\n"
"  210 220 230 240 250\n"
"  260 270 280 290 300)\n"
" \"List specifying ranges for `defuns-per-range'.\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15892
msgid "To change the ranges, we edit this list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15897
msgid ""
"Next, we need to write the function that creates the list of the number of "
"definitions within each range.  Clearly, this function must take the "
"@code{sorted-lengths} and the @code{top-of-ranges} lists as arguments."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15907
msgid ""
"The @code{defuns-per-range} function must do two things again and again: it "
"must count the number of definitions within a range specified by the current "
"top-of-range value; and it must shift to the next higher value in the "
"@code{top-of-ranges} list after counting the number of definitions in the "
"current range.  Since each of these actions is repetitive, we can use "
"@code{while} loops for the job.  One loop counts the number of definitions "
"in the range defined by the current top-of-range value, and the other loop "
"selects each of the top-of-range values in turn."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15912
msgid ""
"Several entries of the @code{sorted-lengths} list are counted for each "
"range; this means that the loop for the @code{sorted-lengths} list will be "
"inside the loop for the @code{top-of-ranges} list, like a small gear inside "
"a big gear."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15920
msgid ""
"The inner loop counts the number of definitions within the range.  It is a "
"simple counting loop of the type we have seen before.  (@xref{Incrementing "
"Loop, , A loop with an incrementing counter}.)  The true-or-false test of "
"the loop tests whether the value from the @code{sorted-lengths} list is "
"smaller than the current value of the top of the range.  If it is, the "
"function increments the counter and tests the next value from the "
"@code{sorted-lengths} list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15923
msgid "The inner loop looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15929
#, no-wrap
msgid ""
"(while @var{length-element-smaller-than-top-of-range}\n"
"  (setq number-within-range (1+ number-within-range))\n"
"  (setq sorted-lengths (cdr sorted-lengths)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15935
msgid ""
"The outer loop must start with the lowest value of the @code{top-of-ranges} "
"list, and then be set to each of the succeeding higher values in turn.  This "
"can be done with a loop like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15941
#, no-wrap
msgid ""
"(while top-of-ranges\n"
"  @var{body-of-loop}@dots{}\n"
"  (setq top-of-ranges (cdr top-of-ranges)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15946
msgid "Put together, the two loops look like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15950
#, no-wrap
msgid ""
"(while top-of-ranges\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15955
#, no-wrap
msgid ""
"  ;; @r{Count the number of elements within the current range.}\n"
"  (while @var{length-element-smaller-than-top-of-range}\n"
"    (setq number-within-range (1+ number-within-range))\n"
"    (setq sorted-lengths (cdr sorted-lengths)))\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:15958
#, no-wrap
msgid ""
"  ;; @r{Move to next range.}\n"
"  (setq top-of-ranges (cdr top-of-ranges)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15965
msgid ""
"In addition, in each circuit of the outer loop, Emacs should record the "
"number of definitions within that range (the value of "
"@code{number-within-range}) in a list.  We can use @code{cons} for this "
"purpose.  (@xref{cons, , @code{cons}}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:15977
msgid ""
"The @code{cons} function works fine, except that the list it constructs will "
"contain the number of definitions for the highest range at its beginning and "
"the number of definitions for the lowest range at its end.  This is because "
"@code{cons} attaches new elements of the list to the beginning of the list, "
"and since the two loops are working their way through the lengths' list from "
"the lower end first, the @code{defuns-per-range-list} will end up largest "
"number first.  But we will want to print our graph with smallest values "
"first and the larger later.  The solution is to reverse the order of the "
"@code{defuns-per-range-list}.  We can do this using the @code{nreverse} "
"function, which reverses the order of a list."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:15977
#, no-wrap
msgid "nreverse"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:15984
#, no-wrap
msgid "(nreverse '(1 2 3 4))\n"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:15992
#, no-wrap
msgid "(4 3 2 1)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16001
msgid ""
"Note that the @code{nreverse} function is ``destructive''---that is, it "
"changes the list to which it is applied; this contrasts with the @code{car} "
"and @code{cdr} functions, which are non-destructive.  In this case, we do "
"not want the original @code{defuns-per-range-list}, so it does not matter "
"that it is destroyed.  (The @code{reverse} function provides a reversed copy "
"of a list, leaving the original list as is.)"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:16001
#, no-wrap
msgid "reverse"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16005
msgid "Put all together, the @code{defuns-per-range} looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16013 emacs-lisp-intro.texi:21511
#, no-wrap
msgid ""
"(defun defuns-per-range (sorted-lengths top-of-ranges)\n"
"  \"SORTED-LENGTHS defuns in each TOP-OF-RANGES range.\"\n"
"  (let ((top-of-range (car top-of-ranges))\n"
"        (number-within-range 0)\n"
"        defuns-per-range-list)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16018
#, no-wrap
msgid ""
"    ;; @r{Outer loop.}\n"
"    (while top-of-ranges\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16026
#, no-wrap
msgid ""
"      ;; @r{Inner loop.}\n"
"      (while (and\n"
"              ;; @r{Need number for numeric test.}\n"
"              (car sorted-lengths)\n"
"              (< (car sorted-lengths) top-of-range))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16032
#, no-wrap
msgid ""
"        ;; @r{Count number of definitions within current range.}\n"
"        (setq number-within-range (1+ number-within-range))\n"
"        (setq sorted-lengths (cdr sorted-lengths)))\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16034
#, no-wrap
msgid "      ;; @r{Exit inner loop but remain within outer loop.}\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16040
#, no-wrap
msgid ""
"      (setq defuns-per-range-list\n"
"            (cons number-within-range defuns-per-range-list))\n"
"      (setq number-within-range 0)      ; @r{Reset count to zero.}\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16047 emacs-lisp-intro.texi:21539
#, no-wrap
msgid ""
"      ;; @r{Move to next range.}\n"
"      (setq top-of-ranges (cdr top-of-ranges))\n"
"      ;; @r{Specify next top of range value.}\n"
"      (setq top-of-range (car top-of-ranges)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16056
#, no-wrap
msgid ""
"    ;; @r{Exit outer loop and count the number of defuns larger than}\n"
"    ;; @r{  the largest top-of-range value.}\n"
"    (setq defuns-per-range-list\n"
"          (cons\n"
"           (length sorted-lengths)\n"
"           defuns-per-range-list))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16062 emacs-lisp-intro.texi:21552
#, no-wrap
msgid ""
"    ;; @r{Return a list of the number of definitions within each range,}\n"
"    ;; @r{  smallest to largest.}\n"
"    (nreverse defuns-per-range-list)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16069
msgid ""
"The function is straightforward except for one subtle feature.  The "
"true-or-false test of the inner loop looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16074
#, no-wrap
msgid ""
"(and (car sorted-lengths)\n"
"     (< (car sorted-lengths) top-of-range))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16080
msgid "instead of like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:16083
#, no-wrap
msgid "(< (car sorted-lengths) top-of-range)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16088
msgid ""
"The purpose of the test is to determine whether the first item in the "
"@code{sorted-lengths} list is less than the value of the top of the range."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16095
msgid ""
"The simple version of the test works fine unless the @code{sorted-lengths} "
"list has a @code{nil} value.  In that case, the @code{(car sorted-lengths)} "
"expression function returns @code{nil}.  The @code{<} function cannot "
"compare a number to @code{nil}, which is an empty list, so Emacs signals an "
"error and stops the function from attempting to continue to execute."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16100
msgid ""
"The @code{sorted-lengths} list always becomes @code{nil} when the counter "
"reaches the end of the list.  This means that any attempt to use the "
"@code{defuns-per-range} function with the simple version of the test will "
"fail."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16112
msgid ""
"We solve the problem by using the @code{(car sorted-lengths)} expression in "
"conjunction with the @code{and} expression.  The @code{(car sorted-lengths)} "
"expression returns a non-@code{nil} value so long as the list has at least "
"one number within it, but returns @code{nil} if the list is empty.  The "
"@code{and} expression first evaluates the @code{(car sorted-lengths)} "
"expression, and if it is @code{nil}, returns false @emph{without} evaluating "
"the @code{<} expression.  But if the @code{(car sorted-lengths)} expression "
"returns a non-@code{nil} value, the @code{and} expression evaluates the "
"@code{<} expression, and returns that value as the value of the @code{and} "
"expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16115
msgid "This way, we avoid an error."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16131
msgid ""
"Here is a short test of the @code{defuns-per-range} function.  First, "
"evaluate the expression that binds (a shortened)  @code{top-of-ranges} list "
"to the list of values, then evaluate the expression for binding the "
"@code{sorted-lengths} list, and then evaluate the @code{defuns-per-range} "
"function."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16138
#, no-wrap
msgid ""
";; @r{(Shorter list than we will use later.)}\n"
"(setq top-of-ranges\n"
" '(110 120 130 140 150\n"
"   160 170 180 190 200))\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16141
#, no-wrap
msgid ""
"(setq sorted-lengths\n"
"      '(85 86 110 116 122 129 154 176 179 200 265 300 300))\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16143
#, no-wrap
msgid "(defuns-per-range sorted-lengths top-of-ranges)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16149
msgid "The list returned looks like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:16152
#, no-wrap
msgid "(2 2 2 0 0 1 0 2 0 0 4)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16159
msgid ""
"Indeed, there are two elements of the @code{sorted-lengths} list smaller "
"than 110, two elements between 110 and 119, two elements between 120 and "
"129, and so on.  There are four elements with a value of 200 or larger."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:16163
#, no-wrap
msgid "Readying a graph"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:16164
#, no-wrap
msgid "Graph prototype"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:16165
#, no-wrap
msgid "Prototype graph"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:16166
#, no-wrap
msgid "Body of graph"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16170
msgid ""
"Our goal is to construct a graph showing the numbers of function definitions "
"of various lengths in the Emacs lisp sources."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16177
msgid ""
"As a practical matter, if you were creating a graph, you would probably use "
"a program such as @code{gnuplot} to do the job.  (@code{gnuplot} is nicely "
"integrated into GNU Emacs.)  In this case, however, we create one from "
"scratch, and in the process we will re-acquaint ourselves with some of what "
"we learned before and learn more."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16184
msgid ""
"In this chapter, we will first write a simple graph printing function.  This "
"first definition will be a @dfn{prototype}, a rapidly written function that "
"enables us to reconnoiter this unknown graph-making territory.  We will "
"discover dragons, or find that they are myth.  After scouting the terrain, "
"we will feel more confident and enhance the function to label the axes "
"automatically."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:16194
#, no-wrap
msgid "Columns of a graph"
msgstr ""

#. type: unnumberedsec
#: emacs-lisp-intro.texi:16195
#, no-wrap
msgid "Printing the Columns of a Graph"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16203
msgid ""
"Since Emacs is designed to be flexible and work with all kinds of terminals, "
"including character-only terminals, the graph will need to be made from one "
"of the `typewriter' symbols.  An asterisk will do; as we enhance the "
"graph-printing function, we can make the choice of symbol a user option."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16207
msgid ""
"We can call this function @code{graph-body-print}; it will take a "
"@code{numbers-list} as its only argument.  At this stage, we will not label "
"the graph, but only print its body."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16212
msgid ""
"The @code{graph-body-print} function inserts a vertical column of asterisks "
"for each element in the @code{numbers-list}.  The height of each line is "
"determined by the value of that element of the @code{numbers-list}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16215
msgid ""
"Inserting columns is a repetitive act; that means that this function can be "
"written either with a @code{while} loop or recursively."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16220
msgid ""
"Our first challenge is to discover how to print a column of asterisks.  "
"Usually, in Emacs, we print characters onto a screen horizontally, line by "
"line, by typing.  We have two routes we can follow: write our own "
"column-insertion function or discover whether one exists in Emacs."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16226
msgid ""
"To see whether there is one in Emacs, we can use the @kbd{M-x apropos} "
"command.  This command is like the @kbd{C-h a} (@code{command-apropos})  "
"command, except that the latter finds only those functions that are "
"commands.  The @kbd{M-x apropos} command lists all symbols that match a "
"regular expression, including functions that are not interactive."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:16226
#, no-wrap
msgid "apropos"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16238
msgid ""
"What we want to look for is some command that prints or inserts columns.  "
"Very likely, the name of the function will contain either the word `print' "
"or the word `insert' or the word `column'.  Therefore, we can simply type "
"@kbd{M-x apropos RET print\\|insert\\|column RET} and look at the result.  "
"On my system, this command once too takes quite some time, and then produced "
"a list of 79 functions and variables.  Now it does not take much time at all "
"and produces a list of 211 functions and variables.  Scanning down the list, "
"the only function that looks as if it might do the job is "
"@code{insert-rectangle}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16241
msgid "Indeed, this is the function we want; its documentation says:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16251
#, no-wrap
msgid ""
"insert-rectangle:\n"
"Insert text of RECTANGLE with upper left corner at point.\n"
"RECTANGLE's first line is inserted at point,\n"
"its second line is inserted at a point vertically under point, etc.\n"
"RECTANGLE should be a list of strings.\n"
"After this command, the mark is at the upper left corner\n"
"and point is at the lower right corner.\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16255
msgid "We can run a quick test, to make sure it does what we expect of it."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16261
msgid ""
"Here is the result of placing the cursor after the @code{insert-rectangle} "
"expression and typing @kbd{C-u C-x C-e} (@code{eval-last-sexp}).  The "
"function inserts the strings @samp{\"first\"}, @samp{\"second\"}, and "
"@samp{\"third\"} at and below point.  Also the function returns @code{nil}."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16267
#, no-wrap
msgid ""
"(insert-rectangle '(\"first\" \"second\" \"third\"))first\n"
"                                              second\n"
"                                              thirdnil\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16277
msgid ""
"Of course, we won't be inserting the text of the @code{insert-rectangle} "
"expression itself into the buffer in which we are making the graph, but will "
"call the function from our program.  We shall, however, have to make sure "
"that point is in the buffer at the place where the @code{insert-rectangle} "
"function will insert its column of strings."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16288
msgid ""
"If you are reading this in Info, you can see how this works by switching to "
"another buffer, such as the @file{*scratch*} buffer, placing point somewhere "
"in the buffer, typing @kbd{M-:}, typing the @code{insert-rectangle} "
"expression into the minibuffer at the prompt, and then typing @key{RET}.  "
"This causes Emacs to evaluate the expression in the minibuffer, but to use "
"as the value of point the position of point in the @file{*scratch*} buffer.  "
"(@kbd{M-:} is the keybinding for @code{eval-expression}. Also, @code{nil} "
"does not appear in the @file{*scratch*} buffer since the expression is "
"evaluated in the minibuffer.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16295
msgid ""
"We find when we do this that point ends up at the end of the last inserted "
"line---that is to say, this function moves point as a side-effect.  If we "
"were to repeat the command, with point at this position, the next insertion "
"would be below and to the right of the previous insertion.  We don't want "
"this! If we are going to make a bar graph, the columns need to be beside "
"each other."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16304
msgid ""
"So we discover that each cycle of the column-inserting @code{while} loop "
"must reposition point to the place we want it, and that place will be at the "
"top, not the bottom, of the column.  Moreover, we remember that when we "
"print a graph, we do not expect all the columns to be the same height.  This "
"means that the top of each column may be at a different height from the "
"previous one.  We cannot simply reposition point to the same line each time, "
"but moved over to the right---or perhaps we can@dots{}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16313
msgid ""
"We are planning to make the columns of the bar graph out of asterisks.  The "
"number of asterisks in the column is the number specified by the current "
"element of the @code{numbers-list}.  We need to construct a list of "
"asterisks of the right length for each call to @code{insert-rectangle}.  If "
"this list consists solely of the requisite number of asterisks, then we will "
"have position point the right number of lines above the base for the graph "
"to print correctly.  This could be difficult."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16322
msgid ""
"Alternatively, if we can figure out some way to pass @code{insert-rectangle} "
"a list of the same length each time, then we can place point on the same "
"line each time, but move it over one column to the right for each new "
"column.  If we do this, however, some of the entries in the list passed to "
"@code{insert-rectangle} must be blanks rather than asterisks.  For example, "
"if the maximum height of the graph is 5, but the height of the column is 3, "
"then @code{insert-rectangle} requires an argument that looks like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:16325 emacs-lisp-intro.texi:16469
#, no-wrap
msgid "(\" \" \" \" \"*\" \"*\" \"*\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16338
msgid ""
"This last proposal is not so difficult, so long as we can determine the "
"column height.  There are two ways for us to specify the column height: we "
"can arbitrarily state what it will be, which would work fine for graphs of "
"that height; or we can search through the list of numbers and use the "
"maximum height of the list as the maximum height of the graph.  If the "
"latter operation were difficult, then the former procedure would be easiest, "
"but there is a function built into Emacs that determines the maximum of its "
"arguments.  We can use that function.  The function is called @code{max} and "
"it returns the largest of all its arguments, which must be numbers.  Thus, "
"for example,"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:16341
#, no-wrap
msgid "(max  3 4 6 5 7 3)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16346
msgid ""
"returns 7.  (A corresponding function called @code{min} returns the smallest "
"of all its arguments.)"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:16346
#, no-wrap
msgid "max"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:16347
#, no-wrap
msgid "min"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16352
msgid ""
"However, we cannot simply call @code{max} on the @code{numbers-list}; the "
"@code{max} function expects numbers as its argument, not a list of numbers.  "
"Thus, the following expression,"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:16355
#, no-wrap
msgid "(max  '(3 4 6 5 7 3))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16360
msgid "produces the following error message;"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:16363
#, no-wrap
msgid "Wrong type of argument:  number-or-marker-p, (3 4 6 5 7 3)\n"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:16365
#, no-wrap
msgid "apply"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16370
msgid ""
"We need a function that passes a list of arguments to a function.  This "
"function is @code{apply}.  This function `applies' its first argument (a "
"function) to its remaining arguments, the last of which may be a list."
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:16376
#, no-wrap
msgid "(apply 'max 3 4 7 3 '(4 8 5))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16380
msgid "returns 8."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16390
msgid ""
"(Incidentally, I don't know how you would learn of this function without a "
"book such as this.  It is possible to discover other functions, like "
"@code{search-forward} or @code{insert-rectangle}, by guessing at a part of "
"their names and then using @code{apropos}.  Even though its base in metaphor "
"is clear---`apply' its first argument to the rest---I doubt a novice would "
"come up with that particular word when using @code{apropos} or other aid.  "
"Of course, I could be wrong; after all, the function was first named by "
"someone who had to invent it.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16394
msgid ""
"The second and subsequent arguments to @code{apply} are optional, so we can "
"use @code{apply} to call a function and pass the elements of a list to it, "
"like this, which also returns 8:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:16397
#, no-wrap
msgid "(apply 'max '(4 8 5))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16404
msgid ""
"This latter way is how we will use @code{apply}.  The "
"@code{recursive-lengths-list-many-files} function returns a numbers' list to "
"which we can apply @code{max} (we could also apply @code{max} to the sorted "
"numbers' list; it does not matter whether the list is sorted or not.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16407
msgid "Hence, the operation for finding the maximum height of the graph is this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:16410
#, no-wrap
msgid "(setq max-graph-height (apply 'max numbers-list))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16417
msgid ""
"Now we can return to the question of how to create a list of strings for a "
"column of the graph.  Told the maximum height of the graph and the number of "
"asterisks that should appear in the column, the function should return a "
"list of strings for the @code{insert-rectangle} command to insert."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16424
msgid ""
"Each column is made up of asterisks or blanks.  Since the function is passed "
"the value of the height of the column and the number of asterisks in the "
"column, the number of blanks can be found by subtracting the number of "
"asterisks from the height of the column.  Given the number of blanks and the "
"number of asterisks, two @code{while} loops can be used to construct the "
"list:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16433
#, no-wrap
msgid ""
";;; @r{First version.}\n"
"(defun column-of-graph (max-graph-height actual-height)\n"
"  \"Return list of strings that is one column of a graph.\"\n"
"  (let ((insert-list nil)\n"
"        (number-of-top-blanks\n"
"         (- max-graph-height actual-height)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16440
#, no-wrap
msgid ""
"    ;; @r{Fill in asterisks.}\n"
"    (while (> actual-height 0)\n"
"      (setq insert-list (cons \"*\" insert-list))\n"
"      (setq actual-height (1- actual-height)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16448
#, no-wrap
msgid ""
"    ;; @r{Fill in blanks.}\n"
"    (while (> number-of-top-blanks 0)\n"
"      (setq insert-list (cons \" \" insert-list))\n"
"      (setq number-of-top-blanks\n"
"            (1- number-of-top-blanks)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16453 emacs-lisp-intro.texi:16542 emacs-lisp-intro.texi:21586
#, no-wrap
msgid ""
"    ;; @r{Return whole list.}\n"
"    insert-list))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16458
msgid ""
"If you install this function and then evaluate the following expression you "
"will see that it returns the list as desired:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:16461
#, no-wrap
msgid "(column-of-graph 5 3)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16466
msgid "returns"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16484
msgid ""
"As written, @code{column-of-graph} contains a major flaw: the symbols used "
"for the blank and for the marked entries in the column are `hard-coded' as a "
"space and asterisk.  This is fine for a prototype, but you, or another user, "
"may wish to use other symbols.  For example, in testing the graph function, "
"you many want to use a period in place of the space, to make sure the point "
"is being repositioned properly each time the @code{insert-rectangle} "
"function is called; or you might want to substitute a @samp{+} sign or other "
"symbol for the asterisk.  You might even want to make a graph-column that is "
"more than one display column wide.  The program should be more flexible.  "
"The way to do that is to replace the blank and the asterisk with two "
"variables that we can call @code{graph-blank} and @code{graph-symbol} and "
"define those variables separately."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16487
msgid ""
"Also, the documentation is not well written.  These considerations lead us "
"to the second version of the function:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16492 emacs-lisp-intro.texi:21401
#, no-wrap
msgid ""
"(defvar graph-symbol \"*\"\n"
"  \"String used as symbol in graph, usually an asterisk.\")\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16499 emacs-lisp-intro.texi:21408
#, no-wrap
msgid ""
"(defvar graph-blank \" \"\n"
"  \"String used as blank in graph, usually a blank space.\n"
"graph-blank must be the same number of columns wide\n"
"as graph-symbol.\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16505
msgid ""
"(For an explanation of @code{defvar}, see @ref{defvar, , Initializing a "
"Variable with @code{defvar}}.)"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16511
#, no-wrap
msgid ""
";;; @r{Second version.}\n"
"(defun column-of-graph (max-graph-height actual-height)\n"
"  \"Return MAX-GRAPH-HEIGHT strings; ACTUAL-HEIGHT are graph-symbols.\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16518
#, no-wrap
msgid ""
"The graph-symbols are contiguous entries at the end\n"
"of the list.\n"
"The list will be inserted as one column of a graph.\n"
"The strings are either graph-blank or graph-symbol.\"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16524
#, no-wrap
msgid ""
"  (let ((insert-list nil)\n"
"        (number-of-top-blanks\n"
"         (- max-graph-height actual-height)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16531 emacs-lisp-intro.texi:21575
#, no-wrap
msgid ""
"    ;; @r{Fill in @code{graph-symbols}.}\n"
"    (while (> actual-height 0)\n"
"      (setq insert-list (cons graph-symbol insert-list))\n"
"      (setq actual-height (1- actual-height)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16539 emacs-lisp-intro.texi:21583
#, no-wrap
msgid ""
"    ;; @r{Fill in @code{graph-blanks}.}\n"
"    (while (> number-of-top-blanks 0)\n"
"      (setq insert-list (cons graph-blank insert-list))\n"
"      (setq number-of-top-blanks\n"
"            (1- number-of-top-blanks)))\n"
"\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16554
msgid ""
"If we wished, we could rewrite @code{column-of-graph} a third time to "
"provide optionally for a line graph as well as for a bar graph.  This would "
"not be hard to do.  One way to think of a line graph is that it is no more "
"than a bar graph in which the part of each bar that is below the top is "
"blank.  To construct a column for a line graph, the function first "
"constructs a list of blanks that is one shorter than the value, then it uses "
"@code{cons} to attach a graph symbol to the list; then it uses @code{cons} "
"again to attach the `top blanks' to the list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16561
msgid ""
"It is easy to see how to write such a function, but since we don't need it, "
"we will not do it.  But the job could be done, and if it were done, it would "
"be done with @code{column-of-graph}.  Even more important, it is worth "
"noting that few changes would have to be made anywhere else.  The "
"enhancement, if we ever wish to make it, is simple."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16565
msgid ""
"Now, finally, we come to our first actual graph printing function.  This "
"prints the body of a graph, not the labels for the vertical and horizontal "
"axes, so we can call this @code{graph-body-print}."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:16567
#, no-wrap
msgid "The @code{graph-body-print} Function"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16577
msgid ""
"After our preparation in the preceding section, the @code{graph-body-print} "
"function is straightforward.  The function will print column after column of "
"asterisks and blanks, using the elements of a numbers' list to specify the "
"number of asterisks in each column.  This is a repetitive act, which means "
"we can use a decrementing @code{while} loop or recursive function for the "
"job.  In this section, we will write the definition using a @code{while} "
"loop."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16580
msgid ""
"The @code{column-of-graph} function requires the height of the graph as an "
"argument, so we should determine and record that as a local variable."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16583
msgid ""
"This leads us to the following template for the @code{while} loop version of "
"this function:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16590
#, no-wrap
msgid ""
"(defun graph-body-print (numbers-list)\n"
"  \"@var{documentation}@dots{}\"\n"
"  (let ((height  @dots{}\n"
"         @dots{}))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16596
#, no-wrap
msgid ""
"    (while numbers-list\n"
"      @var{insert-columns-and-reposition-point}\n"
"      (setq numbers-list (cdr numbers-list)))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16601
msgid "We need to fill in the slots of the template."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16604
msgid ""
"Clearly, we can use the @code{(apply 'max numbers-list)} expression to "
"determine the height of the graph."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16609
msgid ""
"The @code{while} loop will cycle through the @code{numbers-list} one element "
"at a time.  As it is shortened by the @code{(setq numbers-list (cdr "
"numbers-list))} expression, the @sc{car} of each instance of the list is the "
"value of the argument for @code{column-of-graph}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16617
msgid ""
"At each cycle of the @code{while} loop, the @code{insert-rectangle} function "
"inserts the list returned by @code{column-of-graph}.  Since the "
"@code{insert-rectangle} function moves point to the lower right of the "
"inserted rectangle, we need to save the location of point at the time the "
"rectangle is inserted, move back to that position after the rectangle is "
"inserted, and then move horizontally to the next place from which "
"@code{insert-rectangle} is called."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16627
msgid ""
"If the inserted columns are one character wide, as they will be if single "
"blanks and asterisks are used, the repositioning command is simply "
"@code{(forward-char 1)}; however, the width of a column may be greater than "
"one.  This means that the repositioning command should be written "
"@code{(forward-char symbol-width)}.  The @code{symbol-width} itself is the "
"length of a @code{graph-blank} and can be found using the expression "
"@code{(length graph-blank)}.  The best place to bind the @code{symbol-width} "
"variable to the value of the width of graph column is in the varlist of the "
"@code{let} expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16630
msgid "These considerations lead to the following function definition:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16636
#, no-wrap
msgid ""
"(defun graph-body-print (numbers-list)\n"
"  \"Print a bar graph of the NUMBERS-LIST.\n"
"The numbers-list consists of the Y-axis values.\"\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16640
#, no-wrap
msgid ""
"  (let ((height (apply 'max numbers-list))\n"
"        (symbol-width (length graph-blank))\n"
"        from-position)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16649
#, no-wrap
msgid ""
"    (while numbers-list\n"
"      (setq from-position (point))\n"
"      (insert-rectangle\n"
"       (column-of-graph height (car numbers-list)))\n"
"      (goto-char from-position)\n"
"      (forward-char symbol-width)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16654
#, no-wrap
msgid ""
"      ;; @r{Draw graph column by column.}\n"
"      (sit-for 0)\n"
"      (setq numbers-list (cdr numbers-list)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16660
#, no-wrap
msgid ""
"    ;; @r{Place point for X axis labels.}\n"
"    (forward-line height)\n"
"    (insert \"\\n\")\n"
"))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16672
msgid ""
"The one unexpected expression in this function is the @w{@code{(sit-for 0)}} "
"expression in the @code{while} loop.  This expression makes the graph "
"printing operation more interesting to watch than it would be otherwise.  "
"The expression causes Emacs to `sit' or do nothing for a zero length of time "
"and then redraw the screen.  Placed here, it causes Emacs to redraw the "
"screen column by column.  Without it, Emacs would not redraw the screen "
"until the function exits."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16674
msgid "We can test @code{graph-body-print} with a short list of numbers."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:16679
msgid ""
"Install @code{graph-symbol}, @code{graph-blank}, @code{column-of-graph}, "
"which are in"
msgstr ""

#. type: iftex
#: emacs-lisp-intro.texi:16681
msgid "@ref{Readying a Graph, , Readying a Graph},"
msgstr ""

#. type: ifinfo
#: emacs-lisp-intro.texi:16684
msgid "@ref{Columns of a graph},"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:16686
msgid "and @code{graph-body-print}."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:16690 emacs-lisp-intro.texi:20191 emacs-lisp-intro.texi:20531 emacs-lisp-intro.texi:20773
msgid "Copy the following expression:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:16693
#, no-wrap
msgid "(graph-body-print '(1 2 3 4 6 4 3 5 7 6 5 2 3))\n"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:16698
msgid ""
"Switch to the @file{*scratch*} buffer and place the cursor where you want "
"the graph to start."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:16701 emacs-lisp-intro.texi:20202 emacs-lisp-intro.texi:20548 emacs-lisp-intro.texi:20784
msgid "Type @kbd{M-:} (@code{eval-expression})."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:16705 emacs-lisp-intro.texi:20206
msgid ""
"Yank the @code{graph-body-print} expression into the minibuffer with "
"@kbd{C-y} (@code{yank)}."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:16708
msgid "Press @key{RET} to evaluate the @code{graph-body-print} expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16712
msgid "Emacs will print a graph like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16722
#, no-wrap
msgid ""
"                    *\n"
"                *   **\n"
"                *  ****\n"
"               *** ****\n"
"              ********* *\n"
"             ************\n"
"            *************\n"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:16725 emacs-lisp-intro.texi:16727
#, no-wrap
msgid "recursive-graph-body-print"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:16726
#, no-wrap
msgid "The @code{recursive-graph-body-print} Function"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16735
msgid ""
"The @code{graph-body-print} function may also be written recursively.  The "
"recursive solution is divided into two parts: an outside `wrapper' that uses "
"a @code{let} expression to determine the values of several variables that "
"need only be found once, such as the maximum height of the graph, and an "
"inside function that is called recursively to print the graph."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16738
msgid "The `wrapper' is uncomplicated:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16751
#, no-wrap
msgid ""
"(defun recursive-graph-body-print (numbers-list)\n"
"  \"Print a bar graph of the NUMBERS-LIST.\n"
"The numbers-list consists of the Y-axis values.\"\n"
"  (let ((height (apply 'max numbers-list))\n"
"        (symbol-width (length graph-blank))\n"
"        from-position)\n"
"    (recursive-graph-body-print-internal\n"
"     numbers-list\n"
"     height\n"
"     symbol-width)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16763
msgid ""
"The recursive function is a little more difficult.  It has four parts: the "
"`do-again-test', the printing code, the recursive call, and the "
"`next-step-expression'.  The `do-again-test' is a @code{when} expression "
"that determines whether the @code{numbers-list} contains any remaining "
"elements; if it does, the function prints one column of the graph using the "
"printing code and calls itself again.  The function calls itself again "
"according to the value produced by the `next-step-expression' which causes "
"the call to act on a shorter version of the @code{numbers-list}."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16770
#, no-wrap
msgid ""
"(defun recursive-graph-body-print-internal\n"
"  (numbers-list height symbol-width)\n"
"  \"Print a bar graph.\n"
"Used within recursive-graph-body-print function.\"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16777
#, no-wrap
msgid ""
"  (when numbers-list\n"
"        (setq from-position (point))\n"
"        (insert-rectangle\n"
"         (column-of-graph height (car numbers-list)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16784
#, no-wrap
msgid ""
"        (goto-char from-position)\n"
"        (forward-char symbol-width)\n"
"        (sit-for 0)     ; @r{Draw graph column by column.}\n"
"        (recursive-graph-body-print-internal\n"
"         (cdr numbers-list) height symbol-width)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16789
msgid "After installation, this expression can be tested; here is a sample:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:16792
#, no-wrap
msgid "(recursive-graph-body-print '(3 2 5 6 7 5 3 4 6 4 3 2 1))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16796
msgid "Here is what @code{recursive-graph-body-print} produces:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16806
#, no-wrap
msgid ""
"                *\n"
"               **   *\n"
"              ****  *\n"
"              **** ***\n"
"            * *********\n"
"            ************\n"
"            *************\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16811
msgid ""
"Either of these two functions, @code{graph-body-print} or "
"@code{recursive-graph-body-print}, create the body of a graph."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:16812
#, no-wrap
msgid "Printed Axes"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:16813
#, no-wrap
msgid "Need for Printed Axes"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16818
msgid ""
"A graph needs printed axes, so you can orient yourself.  For a do-once "
"project, it may be reasonable to draw the axes by hand using Emacs's Picture "
"mode; but a graph drawing function may be used more than once."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16824
msgid ""
"For this reason, I have written enhancements to the basic "
"@code{print-graph-body} function that automatically print labels for the "
"horizontal and vertical axes.  Since the label printing functions do not "
"contain much new material, I have placed their description in an appendix.  "
"@xref{Full Graph, , A Graph with Labeled Axes}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16829
msgid "Write a line graph version of the graph printing functions."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:16832
#, no-wrap
msgid "@file{.emacs} file"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:16833
#, no-wrap
msgid "Customizing your @file{.emacs} file"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:16834
#, no-wrap
msgid "Initialization file"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16840
msgid ""
"``You don't have to like Emacs to like it''---this seemingly paradoxical "
"statement is the secret of GNU Emacs.  The plain, `out of the box' Emacs is "
"a generic tool.  Most people who use it, customize it to suit themselves."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16843
msgid ""
"GNU Emacs is mostly written in Emacs Lisp; this means that by writing "
"expressions in Emacs Lisp you can change or extend Emacs."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:16863
#, no-wrap
msgid "Default Configuration"
msgstr ""

#. type: unnumberedsec
#: emacs-lisp-intro.texi:16864
#, no-wrap
msgid "Emacs's Default Configuration"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16877
msgid ""
"There are those who appreciate Emacs's default configuration.  After all, "
"Emacs starts you in C mode when you edit a C file, starts you in Fortran "
"mode when you edit a Fortran file, and starts you in Fundamental mode when "
"you edit an unadorned file.  This all makes sense, if you do not know who is "
"going to use Emacs.  Who knows what a person hopes to do with an unadorned "
"file? Fundamental mode is the right default for such a file, just as C mode "
"is the right default for editing C code.  (Enough programming languages have "
"syntaxes that enable them to share or nearly share features, so C mode is "
"now provided by CC mode, the `C Collection'.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16880
msgid ""
"But when you do know who is going to use Emacs---you, yourself---then it "
"makes sense to customize Emacs."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16884
msgid ""
"For example, I seldom want Fundamental mode when I edit an otherwise "
"undistinguished file; I want Text mode.  This is why I customize Emacs: so "
"it suits me."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16893
msgid ""
"You can customize and extend Emacs by writing or adapting a @file{~/.emacs} "
"file.  This is your personal initialization file; its contents, written in "
"Emacs Lisp, tell Emacs what to do.@footnote{You may also add @file{.el} to "
"@file{~/.emacs} and call it a @file{~/.emacs.el} file.  In the past, you "
"were forbidden to type the extra keystrokes that the name @file{~/.emacs.el} "
"requires, but now you may.  The new format is consistent with the Emacs Lisp "
"file naming conventions; the old format saves typing.}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16898
msgid ""
"A @file{~/.emacs} file contains Emacs Lisp code.  You can write this code "
"yourself; or you can use Emacs's @code{customize} feature to write the code "
"for you.  You can combine your own expressions and auto-written Customize "
"expressions in your @file{.emacs} file."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16902
msgid ""
"(I myself prefer to write my own expressions, except for those, particularly "
"fonts, that I find easier to manipulate using the @code{customize} command.  "
"I combine the two methods.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16908
msgid ""
"Most of this chapter is about writing expressions yourself.  It describes a "
"simple @file{.emacs} file; for more information, see @ref{Init File, , The "
"Init File, emacs, The GNU Emacs Manual}, and @ref{Init File, , The Init "
"File, elisp, The GNU Emacs Lisp Reference Manual}."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:16910
#, no-wrap
msgid "Site-wide Initialization Files"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:16912
#, no-wrap
msgid "@file{default.el} init file"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:16913
#, no-wrap
msgid "@file{site-init.el} init file"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:16914
#, no-wrap
msgid "@file{site-load.el} init file"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16919
msgid ""
"In addition to your personal initialization file, Emacs automatically loads "
"various site-wide initialization files, if they exist.  These have the same "
"form as your @file{.emacs} file, but are loaded by everyone."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16928
msgid ""
"Two site-wide initialization files, @file{site-load.el} and "
"@file{site-init.el}, are loaded into Emacs and then `dumped' if a `dumped' "
"version of Emacs is created, as is most common.  (Dumped copies of Emacs "
"load more quickly.  However, once a file is loaded and dumped, a change to "
"it does not lead to a change in Emacs unless you load it yourself or re-dump "
"Emacs.  @xref{Building Emacs, , Building Emacs, elisp, The GNU Emacs Lisp "
"Reference Manual}, and the @file{INSTALL} file.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16934
msgid ""
"Three other site-wide initialization files are loaded automatically each "
"time you start Emacs, if they exist.  These are @file{site-start.el}, which "
"is loaded @emph{before} your @file{.emacs} file, and @file{default.el}, and "
"the terminal type file, which are both loaded @emph{after} your "
"@file{.emacs} file."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16942
msgid ""
"Settings and definitions in your @file{.emacs} file will overwrite "
"conflicting settings and definitions in a @file{site-start.el} file, if it "
"exists; but the settings and definitions in a @file{default.el} or terminal "
"type file will overwrite those in your @file{.emacs} file.  (You can prevent "
"interference from a terminal type file by setting @code{term-file-prefix} to "
"@code{nil}.  @xref{Simple Extension, , A Simple Extension}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16946
msgid ""
"The @file{INSTALL} file that comes in the distribution contains descriptions "
"of the @file{site-init.el} and @file{site-load.el} files."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16950
msgid ""
"The @file{loadup.el}, @file{startup.el}, and @file{loaddefs.el} files "
"control loading.  These files are in the @file{lisp} directory of the Emacs "
"distribution and are worth perusing."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16954
msgid ""
"The @file{loaddefs.el} file contains a good many suggestions as to what to "
"put into your own @file{.emacs} file, or into a site-wide initialization "
"file."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:16956
#, no-wrap
msgid "Specifying Variables using @code{defcustom}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16965
msgid ""
"You can specify variables using @code{defcustom} so that you and others can "
"then use Emacs's @code{customize} feature to set their values.  (You cannot "
"use @code{customize} to write function definitions; but you can write "
"@code{defuns} in your @file{.emacs} file.  Indeed, you can write any Lisp "
"expression in your @file{.emacs} file.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16970
msgid ""
"The @code{customize} feature depends on the @code{defcustom} special form.  "
"Although you can use @code{defvar} or @code{setq} for variables that users "
"set, the @code{defcustom} special form is designed for the job."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16977
msgid ""
"You can use your knowledge of @code{defvar} for writing the first three "
"arguments for @code{defcustom}.  The first argument to @code{defcustom} is "
"the name of the variable.  The second argument is the variable's initial "
"value, if any; and this value is set only if the value has not already been "
"set.  The third argument is the documentation."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16981
msgid ""
"The fourth and subsequent arguments to @code{defcustom} specify types and "
"options; these are not featured in @code{defvar}.  (These arguments are "
"optional.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16984
msgid ""
"Each of these arguments consists of a keyword followed by a value.  Each "
"keyword starts with the colon character @samp{:}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:16988
msgid ""
"For example, the customizable user option variable @code{text-mode-hook} "
"looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:16996
#, no-wrap
msgid ""
"(defcustom text-mode-hook nil\n"
"  \"Normal hook run when entering Text mode and many related modes.\"\n"
"  :type 'hook\n"
"  :options '(turn-on-auto-fill flyspell-mode)\n"
"  :group 'wp)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17002
msgid ""
"The name of the variable is @code{text-mode-hook}; it has no default value; "
"and its documentation string tells you what it does."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17006
msgid ""
"The @code{:type} keyword tells Emacs the kind of data to which "
"@code{text-mode-hook} should be set and how to display the value in a "
"Customization buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17013
msgid ""
"The @code{:options} keyword specifies a suggested list of values for the "
"variable.  Usually, @code{:options} applies to a hook.  The list is only a "
"suggestion; it is not exclusive; a person who sets the variable may set it "
"to other values; the list shown following the @code{:options} keyword is "
"intended to offer convenient choices to a user."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17017
msgid ""
"Finally, the @code{:group} keyword tells the Emacs Customization command in "
"which group the variable is located.  This tells where to find it."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17021
msgid ""
"The @code{defcustom} function recognizes more than a dozen keywords.  For "
"more information, see @ref{Customization, , Writing Customization "
"Definitions, elisp, The GNU Emacs Lisp Reference Manual}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17023
msgid "Consider @code{text-mode-hook} as an example."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17026
msgid ""
"There are two ways to customize this variable.  You can use the "
"customization command or write the appropriate expressions yourself."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17029
msgid "Using the customization command, you can type:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:17032
#, no-wrap
msgid "M-x customize\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17039
msgid ""
"and find that the group for editing files of data is called `data'.  Enter "
"that group.  Text Mode Hook is the first member.  You can click on its "
"various options, such as @code{turn-on-auto-fill}, to set the values.  After "
"you click on the button to"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:17042 emacs-lisp-intro.texi:17094
#, no-wrap
msgid "Save for Future Sessions\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17047
msgid ""
"Emacs will write an expression into your @file{.emacs} file.  It will look "
"like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17056
#, no-wrap
msgid ""
"(custom-set-variables\n"
"  ;; custom-set-variables was added by Custom.\n"
"  ;; If you edit it by hand, you could mess it up, so be careful.\n"
"  ;; Your init file should contain only one such instance.\n"
"  ;; If there is more than one, they won't work right.\n"
" '(text-mode-hook (quote (turn-on-auto-fill text-mode-hook-identify))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17063
msgid ""
"(The @code{text-mode-hook-identify} function tells "
"@code{toggle-text-mode-auto-fill} which buffers are in Text mode.  It comes "
"on automatically.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17070
msgid ""
"The @code{custom-set-variables} function works somewhat differently than a "
"@code{setq}.  While I have never learned the differences, I modify the "
"@code{custom-set-variables} expressions in my @file{.emacs} file by hand: I "
"make the changes in what appears to me to be a reasonable manner and have "
"not had any problems.  Others prefer to use the Customization command and "
"let Emacs do the work for them."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17076
msgid ""
"Another @code{custom-set-@dots{}} function is @code{custom-set-faces}.  This "
"function sets the various font faces.  Over time, I have set a considerable "
"number of faces.  Some of the time, I re-set them using @code{customize}; "
"other times, I simply edit the @code{custom-set-faces} expression in my "
"@file{.emacs} file itself."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17080
msgid ""
"The second way to customize your @code{text-mode-hook} is to set it yourself "
"in your @file{.emacs} file using code that has nothing to do with the "
"@code{custom-set-@dots{}} functions."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17084
msgid ""
"When you do this, and later use @code{customize}, you will see a message "
"that says"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:17087
#, no-wrap
msgid "CHANGED outside Customize; operating on it here may be unreliable.\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17091
msgid "This message is only a warning.  If you click on the button to"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17103
msgid ""
"Emacs will write a @code{custom-set-@dots{}} expression near the end of your "
"@file{.emacs} file that will be evaluated after your hand-written "
"expression.  It will, therefore, overrule your hand-written expression.  No "
"harm will be done.  When you do this, however, be careful to remember which "
"expression is active; if you forget, you may confuse yourself."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17107
msgid ""
"So long as you remember where the values are set, you will have no trouble.  "
"In any event, the values are always set in your initialization file, which "
"is usually called @file{.emacs}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17110
msgid ""
"I myself use @code{customize} for hardly anything.  Mostly, I write "
"expressions myself."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:17111
#, no-wrap
msgid "defsubst"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:17112
#, no-wrap
msgid "defconst"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17119
msgid ""
"Incidentally, to be more complete concerning defines: @code{defsubst} "
"defines an inline function.  The syntax is just like that of @code{defun}.  "
"@code{defconst} defines a symbol as a constant.  The intent is that neither "
"programs nor users should ever change a value set by @code{defconst}.  (You "
"can change it; the value set is a variable; but please do not.)"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:17121
#, no-wrap
msgid "Beginning a @file{.emacs} File"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:17122
#, no-wrap
msgid "@file{.emacs} file, beginning of"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17127
msgid ""
"When you start Emacs, it loads your @file{.emacs} file unless you tell it "
"not to by specifying @samp{-q} on the command line.  (The @code{emacs -q} "
"command gives you a plain, out-of-the-box Emacs.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17131
msgid ""
"A @file{.emacs} file contains Lisp expressions.  Often, these are no more "
"than expressions to set values; sometimes they are function definitions."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17134
msgid ""
"@xref{Init File, , The Init File @file{~/.emacs}, emacs, The GNU Emacs "
"Manual}, for a short description of initialization files."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17137
msgid ""
"This chapter goes over some of the same ground, but is a walk among extracts "
"from a complete, long-used @file{.emacs} file---my own."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17141
msgid ""
"The first part of the file consists of comments: reminders to myself.  By "
"now, of course, I remember these things, but when I started, I did not."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17148
#, no-wrap
msgid ""
";;;; Bob's .emacs file\n"
"; Robert J. Chassell\n"
"; 26 September 1985\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17154
msgid ""
"Look at that date! I started this file a long time ago.  I have been adding "
"to it ever since."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17161
#, no-wrap
msgid ""
"; Each section in this file is introduced by a\n"
"; line beginning with four semicolons; and each\n"
"; entry is introduced by a line beginning with\n"
"; three semicolons.\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17170
msgid ""
"This describes the usual conventions for comments in Emacs Lisp.  Everything "
"on a line that follows a semicolon is a comment.  Two, three, and four "
"semicolons are used as subsection and section markers.  (@xref{Comments, ,, "
"elisp, The GNU Emacs Lisp Reference Manual}, for more about comments.)"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17179
#, no-wrap
msgid ""
";;;; The Help Key\n"
"; Control-h is the help key;\n"
"; after typing control-h, type a letter to\n"
"; indicate the subject about which you want help.\n"
"; For an explanation of the help facility,\n"
"; type control-h two times in a row.\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17184
msgid "Just remember: type @kbd{C-h} two times for help."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17191
#, no-wrap
msgid ""
"; To find out about any mode, type control-h m\n"
"; while in that mode.  For example, to find out\n"
"; about mail mode, enter mail mode and then type\n"
"; control-h m.\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17197
msgid ""
"`Mode help', as I call this, is very helpful.  Usually, it tells you all you "
"need to know."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17202
msgid ""
"Of course, you don't need to include comments like these in your "
"@file{.emacs} file.  I included them in mine because I kept forgetting about "
"Mode help or the conventions for comments---but I was able to remember to "
"look here to remind myself."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:17204
#, no-wrap
msgid "Text and Auto Fill Mode"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17208
msgid "Now we come to the part that `turns on' Text mode and Auto Fill mode."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17217
#, no-wrap
msgid ""
";;; Text mode and Auto Fill mode\n"
";; The next two lines put Emacs into Text mode\n"
";; and Auto Fill mode, and are for writers who\n"
";; want to start writing prose rather than code.\n"
"(setq-default major-mode 'text-mode)\n"
"(add-hook 'text-mode-hook 'turn-on-auto-fill)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17222
msgid ""
"Here is the first part of this @file{.emacs} file that does something "
"besides remind a forgetful human!"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17226
msgid ""
"The first of the two lines in parentheses tells Emacs to turn on Text mode "
"when you find a file, @emph{unless} that file should go into some other "
"mode, such as C mode."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:17227
#, no-wrap
msgid "Per-buffer, local variables list"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:17228
#, no-wrap
msgid "Local variables list, per-buffer,"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:17229
#, no-wrap
msgid "Automatic mode selection"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:17230
#, no-wrap
msgid "Mode selection, automatic"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17239
msgid ""
"When Emacs reads a file, it looks at the extension to the file name, if "
"any.  (The extension is the part that comes after a @samp{.}.)  If the file "
"ends with a @samp{.c} or @samp{.h} extension then Emacs turns on C mode.  "
"Also, Emacs looks at first nonblank line of the file; if the line says "
"@w{@samp{-*- C -*-}}, Emacs turns on C mode.  Emacs possesses a list of "
"extensions and specifications that it uses automatically.  In addition, "
"Emacs looks near the last page for a per-buffer, ``local variables list'', "
"if any."
msgstr ""

#. type: ifinfo
#: emacs-lisp-intro.texi:17243
msgid ""
"@xref{Choosing Modes, , How Major Modes are Chosen, emacs, The GNU Emacs "
"Manual}."
msgstr ""

#. type: ifinfo
#: emacs-lisp-intro.texi:17246 emacs-lisp-intro.texi:17390
msgid ""
"@xref{File Variables, , Local Variables in Files, emacs, The GNU Emacs "
"Manual}."
msgstr ""

#. type: iftex
#: emacs-lisp-intro.texi:17250
msgid ""
"See sections ``How Major Modes are Chosen'' and ``Local Variables in Files'' "
"in @cite{The GNU Emacs Manual}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17253
msgid "Now, back to the @file{.emacs} file."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17256
msgid "Here is the line again; how does it work?"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:17257
#, no-wrap
msgid "Text Mode turned on"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:17260
#, no-wrap
msgid "(setq major-mode 'text-mode)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17264
msgid "This line is a short, but complete Emacs Lisp expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17274
msgid ""
"We are already familiar with @code{setq}.  It sets the following variable, "
"@code{major-mode}, to the subsequent value, which is @code{text-mode}.  The "
"single quote mark before @code{text-mode} tells Emacs to deal directly with "
"the @code{text-mode} symbol, not with whatever it might stand for.  "
"@xref{set & setq, , Setting the Value of a Variable}, for a reminder of how "
"@code{setq} works.  The main point is that there is no difference between "
"the procedure you use to set a value in your @file{.emacs} file and the "
"procedure you use anywhere else in Emacs."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17277
msgid "Here is the next line:"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:17278
#, no-wrap
msgid "Auto Fill mode turned on"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:17279
#, no-wrap
msgid "add-hook"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:17282
#, no-wrap
msgid "(add-hook 'text-mode-hook 'turn-on-auto-fill)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17287
msgid ""
"In this line, the @code{add-hook} command adds @code{turn-on-auto-fill} to "
"the variable."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17290
msgid ""
"@code{turn-on-auto-fill} is the name of a program, that, you guessed it!, "
"turns on Auto Fill mode."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17294
msgid ""
"Every time Emacs turns on Text mode, Emacs runs the commands `hooked' onto "
"Text mode.  So every time Emacs turns on Text mode, Emacs also turns on Auto "
"Fill mode."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17298
msgid ""
"In brief, the first line causes Emacs to enter Text mode when you edit a "
"file, unless the file name extension, a first non-blank line, or local "
"variables to tell Emacs otherwise."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17305
msgid ""
"Text mode among other actions, sets the syntax table to work conveniently "
"for writers.  In Text mode, Emacs considers an apostrophe as part of a word "
"like a letter; but Emacs does not consider a period or a space as part of a "
"word.  Thus, @kbd{M-f} moves you over @samp{it's}.  On the other hand, in C "
"mode, @kbd{M-f} stops just after the @samp{t} of @samp{it's}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17310
msgid ""
"The second line causes Emacs to turn on Auto Fill mode when it turns on Text "
"mode.  In Auto Fill mode, Emacs automatically breaks a line that is too wide "
"and brings the excessively wide part of the line down to the next line.  "
"Emacs breaks lines between words, not within them."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17316
msgid ""
"When Auto Fill mode is turned off, lines continue to the right as you type "
"them.  Depending on how you set the value of @code{truncate-lines}, the "
"words you type either disappear off the right side of the screen, or else "
"are shown, in a rather ugly and unreadable manner, as a continuation line on "
"the screen."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17320
msgid ""
"In addition, in this part of my @file{.emacs} file, I tell the Emacs fill "
"commands to insert two spaces after a colon:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:17323
#, no-wrap
msgid "(setq colon-double-space t)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17330
msgid ""
"Here is a @code{setq} that `turns on' mail aliases, along with more "
"reminders."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17338
#, no-wrap
msgid ""
";;; Mail mode\n"
"; To enter mail mode, type `C-x m'\n"
"; To enter RMAIL (for reading mail),\n"
"; type `M-x rmail'\n"
"(setq mail-aliases t)\n"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:17341
#, no-wrap
msgid "Mail aliases"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17346
msgid ""
"This @code{setq} command sets the value of the variable @code{mail-aliases} "
"to @code{t}.  Since @code{t} means true, the line says, in effect, ``Yes, "
"use mail aliases.''"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17350
msgid ""
"Mail aliases are convenient short names for long email addresses or for "
"lists of email addresses.  The file where you keep your `aliases' is "
"@file{~/.mailrc}.  You write an alias like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:17353
#, no-wrap
msgid "alias geo george@@foobar.wiz.edu\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17358
msgid ""
"When you write a message to George, address it to @samp{geo}; the mailer "
"will automatically expand @samp{geo} to the full address."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:17361
#, no-wrap
msgid "Tabs, preventing"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:17362
#, no-wrap
msgid "indent-tabs-mode"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17369
msgid ""
"By default, Emacs inserts tabs in place of multiple spaces when it formats a "
"region.  (For example, you might indent many lines of text all at once with "
"the @code{indent-region} command.)  Tabs look fine on a terminal or with "
"ordinary printing, but they produce badly indented output when you use "
"@TeX{} or Texinfo since @TeX{} ignores tabs."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17372
msgid "The following turns off Indent Tabs mode:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17377
#, no-wrap
msgid ""
";;; Prevent Extraneous Tabs\n"
"(setq-default indent-tabs-mode nil)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17384
msgid ""
"Note that this line uses @code{setq-default} rather than the @code{setq} "
"command that we have seen before.  The @code{setq-default} command sets "
"values only in buffers that do not have their own local values for the "
"variable."
msgstr ""

#. type: ifinfo
#: emacs-lisp-intro.texi:17387
msgid "@xref{Just Spaces, , Tabs vs. Spaces, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: iftex
#: emacs-lisp-intro.texi:17394
msgid ""
"See sections ``Tabs vs.@: Spaces'' and ``Local Variables in Files'' in "
"@cite{The GNU Emacs Manual}."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:17398
#, no-wrap
msgid "Some Keybindings"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17401
msgid "Now for some personal keybindings:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17406
#, no-wrap
msgid ""
";;; Compare windows\n"
"(global-set-key \"\\C-cw\" 'compare-windows)\n"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:17409
#, no-wrap
msgid "compare-windows"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17414
msgid ""
"@code{compare-windows} is a nifty command that compares the text in your "
"current window with text in the next window.  It makes the comparison by "
"starting at point in each window, moving over text in each window as far as "
"they match.  I use this command all the time."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17416
msgid "This also shows how to set a key globally, for all modes."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:17417
#, no-wrap
msgid "Setting a key globally"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:17418
#, no-wrap
msgid "Global set key"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:17419
#, no-wrap
msgid "Key setting globally"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:17420
#, no-wrap
msgid "global-set-key"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17432
msgid ""
"The command is @code{global-set-key}.  It is followed by the keybinding.  In "
"a @file{.emacs} file, the keybinding is written as shown: @code{\\C-c} "
"stands for `control-c', which means `press the control key and the @key{c} "
"key at the same time'.  The @code{w} means `press the @key{w} key'.  The "
"keybinding is surrounded by double quotation marks.  In documentation, you "
"would write this as @w{@kbd{C-c w}}.  (If you were binding a @key{META} key, "
"such as @kbd{M-c}, rather than a @key{CTRL} key, you would write "
"@w{@code{\\M-c}} in your @file{.emacs} file.  @xref{Init Rebinding, , "
"Rebinding Keys in Your Init File, emacs, The GNU Emacs Manual}, for "
"details.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17436
msgid ""
"The command invoked by the keys is @code{compare-windows}.  Note that "
"@code{compare-windows} is preceded by a single quote; otherwise, Emacs would "
"first try to evaluate the symbol to determine its value."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17442
msgid ""
"These three things, the double quotation marks, the backslash before the "
"@samp{C}, and the single quote mark are necessary parts of keybinding that I "
"tend to forget.  Fortunately, I have come to remember that I should look at "
"my existing @file{.emacs} file, and adapt what is there."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17452
msgid ""
"As for the keybinding itself: @kbd{C-c w}.  This combines the prefix key, "
"@kbd{C-c}, with a single character, in this case, @kbd{w}.  This set of "
"keys, @kbd{C-c} followed by a single character, is strictly reserved for "
"individuals' own use.  (I call these `own' keys, since these are for my own "
"use.)  You should always be able to create such a keybinding for your own "
"use without stomping on someone else's keybinding.  If you ever write an "
"extension to Emacs, please avoid taking any of these keys for public use.  "
"Create a key like @kbd{C-c C-w} instead.  Otherwise, we will run out of "
"`own' keys."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17455
msgid "Here is another keybinding, with a comment:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17461
#, no-wrap
msgid ""
";;; Keybinding for `occur'\n"
"; I use occur a lot, so let's bind it to a key:\n"
"(global-set-key \"\\C-co\" 'occur)\n"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:17464
#, no-wrap
msgid "occur"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17469
msgid ""
"The @code{occur} command shows all the lines in the current buffer that "
"contain a match for a regular expression.  Matching lines are shown in a "
"buffer called @file{*Occur*}.  That buffer serves as a menu to jump to "
"occurrences."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:17470
#, no-wrap
msgid "global-unset-key"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:17471
#, no-wrap
msgid "Unbinding key"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:17472
#, no-wrap
msgid "Key unbinding"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17476
msgid "Here is how to unbind a key, so it does not work:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17481
#, no-wrap
msgid ""
";;; Unbind `C-x f'\n"
"(global-unset-key \"\\C-xf\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17489
msgid ""
"There is a reason for this unbinding: I found I inadvertently typed "
"@w{@kbd{C-x f}} when I meant to type @kbd{C-x C-f}.  Rather than find a "
"file, as I intended, I accidentally set the width for filled text, almost "
"always to a width I did not want.  Since I hardly ever reset my default "
"width, I simply unbound the key."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:17490
#, no-wrap
msgid "list-buffers, @r{rebound}"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:17491
#, no-wrap
msgid "buffer-menu, @r{bound to key}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17494
msgid "The following rebinds an existing key:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17499
#, no-wrap
msgid ""
";;; Rebind `C-x C-b' for `buffer-menu'\n"
"(global-set-key \"\\C-x\\C-b\" 'buffer-menu)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17509
msgid ""
"By default, @kbd{C-x C-b} runs the @code{list-buffers} command.  This "
"command lists your buffers in @emph{another} window.  Since I almost always "
"want to do something in that window, I prefer the @code{buffer-menu} "
"command, which not only lists the buffers, but moves point into that window."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:17513
#, no-wrap
msgid "Rebinding keys"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17519
msgid ""
"Emacs uses @dfn{keymaps} to record which keys call which commands.  When you "
"use @code{global-set-key} to set the keybinding for a single command in all "
"parts of Emacs, you are specifying the keybinding in "
"@code{current-global-map}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17523
msgid ""
"Specific modes, such as C mode or Text mode, have their own keymaps; the "
"mode-specific keymaps override the global map that is shared by all buffers."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17527
msgid ""
"The @code{global-set-key} function binds, or rebinds, the global keymap.  "
"For example, the following binds the key @kbd{C-x C-b} to the function "
"@code{buffer-menu}:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:17530
#, no-wrap
msgid "(global-set-key \"\\C-x\\C-b\" 'buffer-menu)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17537
msgid ""
"Mode-specific keymaps are bound using the @code{define-key} function, which "
"takes a specific keymap as an argument, as well as the key and the command.  "
"For example, my @file{.emacs} file contains the following expression to bind "
"the @code{texinfo-insert-@@group} command to @kbd{C-c C-c g}:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17541
#, no-wrap
msgid "(define-key texinfo-mode-map \"\\C-c\\C-cg\" 'texinfo-insert-@@group)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17552
msgid ""
"The @code{texinfo-insert-@@group} function itself is a little extension to "
"Texinfo mode that inserts @samp{@@group} into a Texinfo file.  I use this "
"command all the time and prefer to type the three strokes @kbd{C-c C-c g} "
"rather than the six strokes @kbd{@@ g r o u p}.  (@samp{@@group} and its "
"matching @samp{@@end group} are commands that keep all enclosed text "
"together on one page; many multi-line examples in this book are surrounded "
"by @samp{@@group @dots{} @@end group}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17555
msgid "Here is the @code{texinfo-insert-@@group} function definition:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17563
#, no-wrap
msgid ""
"(defun texinfo-insert-@@group ()\n"
"  \"Insert the string @@group in a Texinfo buffer.\"\n"
"  (interactive)\n"
"  (beginning-of-line)\n"
"  (insert \"@@group\\n\"))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17569
msgid ""
"(Of course, I could have used Abbrev mode to save typing, rather than write "
"a function to insert a word; but I prefer key strokes consistent with other "
"Texinfo mode key bindings.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17573
msgid ""
"You will see numerous @code{define-key} expressions in @file{loaddefs.el} as "
"well as in the various mode libraries, such as @file{cc-mode.el} and "
"@file{lisp-mode.el}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17577
msgid ""
"@xref{Key Bindings, , Customizing Key Bindings, emacs, The GNU Emacs "
"Manual}, and @ref{Keymaps, , Keymaps, elisp, The GNU Emacs Lisp Reference "
"Manual}, for more information about keymaps."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:17580
#, no-wrap
msgid "Loading files"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17587
msgid ""
"Many people in the GNU Emacs community have written extensions to Emacs.  As "
"time goes by, these extensions are often included in new releases.  For "
"example, the Calendar and Diary packages are now part of the standard GNU "
"Emacs, as is Calc."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17591
msgid ""
"You can use a @code{load} command to evaluate a complete file and thereby "
"install all the functions and variables in the file into Emacs.  For "
"example:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:17596
#, no-wrap
msgid "(load \"~/emacs/slowsplit\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17603
msgid ""
"This evaluates, i.e., loads, the @file{slowsplit.el} file or if it exists, "
"the faster, byte compiled @file{slowsplit.elc} file from the @file{emacs} "
"sub-directory of your home directory.  The file contains the function "
"@code{split-window-quietly}, which John Robinson wrote in 1989."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17611
msgid ""
"The @code{split-window-quietly} function splits a window with the minimum of "
"redisplay.  I installed it in 1989 because it worked well with the slow 1200 "
"baud terminals I was then using.  Nowadays, I only occasionally come across "
"such a slow connection, but I continue to use the function because I like "
"the way it leaves the bottom half of a buffer in the lower of the new "
"windows and the top half in the upper window."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17616
msgid ""
"To replace the key binding for the default @code{split-window-vertically}, "
"you must also unset that key and bind the keys to "
"@code{split-window-quietly}, like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17621
#, no-wrap
msgid ""
"(global-unset-key \"\\C-x2\")\n"
"(global-set-key \"\\C-x2\" 'split-window-quietly)\n"
msgstr ""

#. type: vindex
#: emacs-lisp-intro.texi:17624
#, no-wrap
msgid "load-path"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17631
msgid ""
"If you load many extensions, as I do, then instead of specifying the exact "
"location of the extension file, as shown above, you can specify that "
"directory as part of Emacs's @code{load-path}.  Then, when Emacs loads a "
"file, it will search that directory as well as its default list of "
"directories.  (The default list is specified in @file{paths.h} when Emacs is "
"built.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17635
msgid ""
"The following command adds your @file{~/emacs} directory to the existing "
"load path:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17640
#, no-wrap
msgid ""
";;; Emacs Load Path\n"
"(setq load-path (cons \"~/emacs\" load-path))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17645
msgid ""
"Incidentally, @code{load-library} is an interactive interface to the "
"@code{load} function.  The complete function looks like this:"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:17646
#, no-wrap
msgid "load-library"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17658
#, no-wrap
msgid ""
"(defun load-library (library)\n"
"  \"Load the library named LIBRARY.\n"
"This is an interface to the function `load'.\"\n"
"  (interactive\n"
"   (list (completing-read \"Load library: \"\n"
"                          (apply-partially 'locate-file-completion-table\n"
"                                           load-path\n"
"                                           (get-load-suffixes)))))\n"
"  (load library))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17664
msgid ""
"The name of the function, @code{load-library}, comes from the use of "
"`library' as a conventional synonym for `file'.  The source for the "
"@code{load-library} command is in the @file{files.el} library."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17669
msgid ""
"Another interactive command that does a slightly different job is "
"@code{load-file}.  @xref{Lisp Libraries, , Libraries of Lisp Code for Emacs, "
"emacs, The GNU Emacs Manual}, for information on the distinction between "
"@code{load-library} and this command."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:17671
#, no-wrap
msgid "Autoloading"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:17672
#, no-wrap
msgid "autoload"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17678
msgid ""
"Instead of installing a function by loading the file that contains it, or by "
"evaluating the function definition, you can make the function available but "
"not actually install it until it is first called.  This is called "
"@dfn{autoloading}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17681
msgid ""
"When you execute an autoloaded function, Emacs automatically evaluates the "
"file that contains the definition, and then calls the function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17685
msgid ""
"Emacs starts quicker with autoloaded functions, since their libraries are "
"not loaded right away; but you need to wait a moment when you first use such "
"a function, while its containing file is evaluated."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17692
msgid ""
"Rarely used functions are frequently autoloaded.  The @file{loaddefs.el} "
"library contains hundreds of autoloaded functions, from @code{bookmark-set} "
"to @code{wordstar-mode}.  Of course, you may come to use a `rare' function "
"frequently.  When you do, you should load that function's file with a "
"@code{load} expression in your @file{.emacs} file."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17699
msgid ""
"In my @file{.emacs} file, I load 14 libraries that contain functions that "
"would otherwise be autoloaded.  (Actually, it would have been better to "
"include these files in my `dumped' Emacs, but I forgot.  @xref{Building "
"Emacs, , Building Emacs, elisp, The GNU Emacs Lisp Reference Manual}, and "
"the @file{INSTALL} file for more about dumping.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17709
msgid ""
"You may also want to include autoloaded expressions in your @file{.emacs} "
"file.  @code{autoload} is a built-in function that takes up to five "
"arguments, the final three of which are optional.  The first argument is the "
"name of the function to be autoloaded; the second is the name of the file to "
"be loaded.  The third argument is documentation for the function, and the "
"fourth tells whether the function can be called interactively.  The fifth "
"argument tells what type of object---@code{autoload} can handle a keymap or "
"macro as well as a function (the default is a function)."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17712
msgid "Here is a typical example:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17717
#, no-wrap
msgid ""
"(autoload 'html-helper-mode\n"
"  \"html-helper-mode\" \"Edit HTML documents\" t)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17723
msgid ""
"(@code{html-helper-mode} is an older alternative to @code{html-mode}, which "
"is a standard part of the distribution.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17735
msgid ""
"This expression autoloads the @code{html-helper-mode} function.  It takes it "
"from the @file{html-helper-mode.el} file (or from the byte compiled version "
"@file{html-helper-mode.elc}, if that exists.)  The file must be located in a "
"directory specified by @code{load-path}.  The documentation says that this "
"is a mode to help you edit documents written in the HyperText Markup "
"Language.  You can call this mode interactively by typing @kbd{M-x "
"html-helper-mode}.  (You need to duplicate the function's regular "
"documentation in the autoload expression because the regular function is not "
"yet loaded, so its documentation is not available.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17738
msgid ""
"@xref{Autoload, , Autoload, elisp, The GNU Emacs Lisp Reference Manual}, for "
"more information."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:17740
#, no-wrap
msgid "A Simple Extension: @code{line-to-top-of-window}"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:17741
#, no-wrap
msgid "line-to-top-of-window"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:17742
#, no-wrap
msgid "Simple extension in @file{.emacs} file"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17747
msgid ""
"Here is a simple extension to Emacs that moves the line point is on to the "
"top of the window.  I use this all the time, to make text easier to read."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17751
msgid ""
"You can put the following code into a separate file and then load it from "
"your @file{.emacs} file, or you can include it within your @file{.emacs} "
"file."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17754
msgid "Here is the definition:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17763
#, no-wrap
msgid ""
";;; Line to top of window;\n"
";;; replace three keystroke sequence  C-u 0 C-l\n"
"(defun line-to-top-of-window ()\n"
"  \"Move the line point is on to top of window.\"\n"
"  (interactive)\n"
"  (recenter 0))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17768
msgid "Now for the keybinding."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17773
msgid ""
"Nowadays, function keys as well as mouse button events and non-@sc{ascii} "
"characters are written within square brackets, without quotation marks.  (In "
"Emacs version 18 and before, you had to write different function key "
"bindings for each different make of terminal.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17776
msgid "I bind @code{line-to-top-of-window} to my @key{F6} function key like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:17779
#, no-wrap
msgid "(global-set-key [f6] 'line-to-top-of-window)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17783
msgid ""
"For more information, see @ref{Init Rebinding, , Rebinding Keys in Your Init "
"File, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:17784
#, no-wrap
msgid "Conditional 'twixt two versions of Emacs"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:17785
#, no-wrap
msgid "Version of Emacs, choosing"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:17786
#, no-wrap
msgid "Emacs version, choosing"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17790
msgid ""
"If you run two versions of GNU Emacs, such as versions 22 and 23, and use "
"one @file{.emacs} file, you can select which code to evaluate with the "
"following conditional:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17800
#, no-wrap
msgid ""
"(cond\n"
" ((= 22 emacs-major-version)\n"
"  ;; evaluate version 22 code\n"
"  ( @dots{} ))\n"
" ((= 23 emacs-major-version)\n"
"  ;; evaluate version 23 code\n"
"  ( @dots{} )))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17817
msgid ""
"For example, recent versions blink their cursors by default.  I hate such "
"blinking, as well as other features, so I placed the following in my "
"@file{.emacs} file@footnote{When I start instances of Emacs that do not load "
"my @file{.emacs} file or any site file, I also turn off blinking: "
"@smallexample emacs -q --no-site-file -eval '(blink-cursor-mode nil)' "
"@exdent Or nowadays, using an even more sophisticated set of options, emacs "
"-Q -D @end smallexample }:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17825
#, no-wrap
msgid ""
"(when (>= emacs-major-version 21)\n"
"  (blink-cursor-mode 0)\n"
"  ;; Insert newline when you press `C-n' (next-line)\n"
"  ;; at the end of the buffer\n"
"  (setq next-line-add-newlines t)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17829
#, no-wrap
msgid ""
"  ;; Turn on image viewing\n"
"  (auto-image-file-mode t)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17834
#, no-wrap
msgid ""
"  ;; Turn on menu bar (this bar has text)\n"
"  ;; (Use numeric argument to turn on)\n"
"  (menu-bar-mode 1)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17839
#, no-wrap
msgid ""
"  ;; Turn off tool bar (this bar has icons)\n"
"  ;; (Use numeric argument to turn on)\n"
"  (tool-bar-mode nil)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17848
#, no-wrap
msgid ""
"  ;; Turn off tooltip mode for tool bar\n"
"  ;; (This mode causes icon explanations to pop up)\n"
"  ;; (Use numeric argument to turn on)\n"
"  (tooltip-mode nil)\n"
"  ;; If tooltips turned on, make tips appear promptly\n"
"  (setq tooltip-delay 0.1)  ; default is 0.7 second\n"
"   )\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17856
msgid "You can specify colors when you use Emacs with the MIT X Windowing system."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17858
msgid "I dislike the default colors and specify my own."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17862
msgid "Here are the expressions in my @file{.emacs} file that set values:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17867
#, no-wrap
msgid ""
";; Set cursor color\n"
"(set-cursor-color \"white\")\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17870
#, no-wrap
msgid ""
";; Set mouse color\n"
"(set-mouse-color \"white\")\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17874
#, no-wrap
msgid ""
";; Set foreground and background\n"
"(set-foreground-color \"white\")\n"
"(set-background-color \"darkblue\")\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17880
#, no-wrap
msgid ""
";;; Set highlighting colors for isearch and drag\n"
"(set-face-foreground 'highlight \"white\")\n"
"(set-face-background 'highlight \"blue\")\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17885
#, no-wrap
msgid ""
"(set-face-foreground 'region \"cyan\")\n"
"(set-face-background 'region \"blue\")\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17890
#, no-wrap
msgid ""
"(set-face-foreground 'secondary-selection \"skyblue\")\n"
"(set-face-background 'secondary-selection \"darkblue\")\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17899
#, no-wrap
msgid ""
";; Set calendar highlighting colors\n"
"(setq calendar-load-hook\n"
"      (lambda ()\n"
"        (set-face-foreground 'diary-face   \"skyblue\")\n"
"        (set-face-background 'holiday-face \"slate blue\")\n"
"        (set-face-foreground 'holiday-face \"white\")))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17904
msgid ""
"The various shades of blue soothe my eye and prevent me from seeing the "
"screen flicker."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17909
msgid ""
"Alternatively, I could have set my specifications in various X "
"initialization files.  For example, I could set the foreground, background, "
"cursor, and pointer (i.e., mouse) colors in my @file{~/.Xresources} file "
"like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17916
#, no-wrap
msgid ""
"Emacs*foreground:   white\n"
"Emacs*background:   darkblue\n"
"Emacs*cursorColor:  white\n"
"Emacs*pointerColor: white\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17923
msgid ""
"In any event, since it is not part of Emacs, I set the root color of my X "
"window in my @file{~/.xinitrc} file, like this@footnote{I also run more "
"modern window managers, such as Enlightenment, Gnome, or KDE; in those "
"cases, I often specify an image rather than a plain color.}:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:17926
#, no-wrap
msgid "xsetroot -solid Navy -fg white &\n"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:17929
#, no-wrap
msgid "Miscellaneous"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:17930
#, no-wrap
msgid "Miscellaneous Settings for a @file{.emacs} File"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:17934
msgid "Here are a few miscellaneous settings:"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:17939
msgid "Set the shape and color of the mouse cursor:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17946
#, no-wrap
msgid ""
"; Cursor shapes are defined in\n"
"; `/usr/include/X11/cursorfont.h';\n"
"; for example, the `target' cursor is number 128;\n"
"; the `top_left_arrow' cursor is number 132.\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17955
#, no-wrap
msgid ""
"(let ((mpointer (x-get-resource \"*mpointer\"\n"
"                                \"*emacs*mpointer\")))\n"
"  ;; If you have not set your mouse pointer\n"
"  ;;     then set it, otherwise leave as is:\n"
"  (if (eq mpointer nil)\n"
"      (setq mpointer \"132\")) ; top_left_arrow\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17959
#, no-wrap
msgid ""
"  (setq x-pointer-shape (string-to-int mpointer))\n"
"  (set-mouse-color \"white\"))\n"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:17965
msgid "Or you can set the values of a variety of features in an alist, like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17976
#, no-wrap
msgid ""
"(setq-default\n"
" default-frame-alist\n"
" '((cursor-color . \"white\")\n"
"   (mouse-color . \"white\")\n"
"   (foreground-color . \"white\")\n"
"   (background-color . \"DodgerBlue4\")\n"
"   ;; (cursor-type . bar)\n"
"   (cursor-type . box)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17985
#, no-wrap
msgid ""
"   (tool-bar-lines . 0)\n"
"   (menu-bar-lines . 1)\n"
"   (width . 80)\n"
"   (height . 58)\n"
"   (font .\n"
"         \"-Misc-Fixed-Medium-R-Normal--20-200-75-75-C-100-ISO8859-1\")\n"
"   ))\n"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:17993
msgid ""
"Convert @kbd{@key{CTRL}-h} into @key{DEL} and @key{DEL} into "
"@kbd{@key{CTRL}-h}.@* (Some older keyboards needed this, although I have not "
"seen the problem recently.)"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:17998
#, no-wrap
msgid ""
";; Translate `C-h' to <DEL>.\n"
"; (keyboard-translate ?\\C-h ?\\C-?)\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18001
#, no-wrap
msgid ""
";; Translate <DEL> to `C-h'.\n"
"(keyboard-translate ?\\C-? ?\\C-h)\n"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:18004
#, no-wrap
msgid "Turn off a blinking cursor!"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18010
#, no-wrap
msgid ""
"(if (fboundp 'blink-cursor-mode)\n"
"    (blink-cursor-mode -1))\n"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:18015
msgid "or start GNU Emacs with the command @code{emacs -nbc}."
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:18017
#, no-wrap
msgid "When using `grep'@*"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:18022
msgid ""
"@samp{-i}@w{ } Ignore case distinctions@* @samp{-n}@w{ } Prefix each line of "
"output with line number@* @samp{-H}@w{ } Print the filename for each "
"match.@* @samp{-e}@w{ } Protect patterns beginning with a hyphen character, "
"@samp{-}"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:18025
#, no-wrap
msgid "(setq grep-command \"grep -i -nH -e \")\n"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:18038
#, no-wrap
msgid "Find an existing buffer, even if it has a different name@*"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:18040
msgid "This avoids problems with symbolic links."
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:18043
#, no-wrap
msgid "(setq find-file-existing-other-name t)\n"
msgstr ""

#. type: item
#: emacs-lisp-intro.texi:18045
#, no-wrap
msgid "Set your language environment and default input method"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18053
#, no-wrap
msgid ""
"(set-language-environment \"latin-1\")\n"
";; Remember you can enable or disable multilingual text input\n"
";; with the @code{toggle-input-method'} (@kbd{C-\\}) command\n"
"(setq default-input-method \"latin-1-prefix\")\n"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:18057
msgid "If you want to write with Chinese `GB' characters, set this instead:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18062
#, no-wrap
msgid ""
"(set-language-environment \"Chinese-GB\")\n"
"(setq default-input-method \"chinese-tonepy\")\n"
msgstr ""

#. type: subsubheading
#: emacs-lisp-intro.texi:18066
#, no-wrap
msgid "Fixing Unpleasant Key Bindings"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:18067
#, no-wrap
msgid "Key bindings, fixing"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:18068
#, no-wrap
msgid "Bindings, key, fixing unpleasant"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18073
msgid ""
"Some systems bind keys unpleasantly.  Sometimes, for example, the @key{CTRL} "
"key appears in an awkward spot rather than at the far left of the home row."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18079
msgid ""
"Usually, when people fix these sorts of keybindings, they do not change "
"their @file{~/.emacs} file.  Instead, they bind the proper keys on their "
"consoles with the @code{loadkeys} or @code{install-keymap} commands in their "
"boot script and then include @code{xmodmap} commands in their "
"@file{.xinitrc} or @file{.Xsession} file for X Windows."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18083
msgid "For a boot script:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18087
#, no-wrap
msgid "loadkeys /usr/share/keymaps/i386/qwerty/emacs2.kmap.gz\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18089
#, no-wrap
msgid "install-keymap emacs2\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18096
msgid ""
"For a @file{.xinitrc} or @file{.Xsession} file when the @key{Caps Lock} key "
"is at the far left of the home row:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18102
#, no-wrap
msgid ""
"# Bind the key labeled `Caps Lock' to `Control'\n"
"# (Such a broken user interface suggests that keyboard manufacturers\n"
"# think that computers are typewriters from 1885.)\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18105
#, no-wrap
msgid ""
"xmodmap -e \"clear Lock\"\n"
"xmodmap -e \"add Control = Caps_Lock\"\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18112
msgid ""
"In a @file{.xinitrc} or @file{.Xsession} file, to convert an @key{ALT} key "
"to a @key{META} key:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18117
#, no-wrap
msgid ""
"# Some ill designed keyboards have a key labeled ALT and no Meta\n"
"xmodmap -e \"keysym Alt_L = Meta_L Alt_L\"\n"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:18122
#, no-wrap
msgid "A Modified Mode Line"
msgstr ""

#. type: vindex
#: emacs-lisp-intro.texi:18123
#, no-wrap
msgid "mode-line-format"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:18124
#, no-wrap
msgid "Mode line format"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18127
msgid "Finally, a feature I really like: a modified mode line."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18130
msgid ""
"When I work over a network, I forget which machine I am using.  Also, I tend "
"to I lose track of where I am, and which line point is on."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18132
msgid "So I reset my mode line to look like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:18135
#, no-wrap
msgid "-:-- foo.texi   rattlesnake:/home/bob/  Line 1  (Texinfo Fill) Top\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18140
msgid ""
"I am visiting a file called @file{foo.texi}, on my machine "
"@file{rattlesnake} in my @file{/home/bob} buffer.  I am on line 1, in "
"Texinfo mode, and am at the top of the buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18143
msgid "My @file{.emacs} file has a section that looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18157
#, no-wrap
msgid ""
";; Set a Mode Line that tells me which machine, which directory,\n"
";; and which line I am on, plus the other customary information.\n"
"(setq-default mode-line-format\n"
" (quote\n"
"  (#(\"-\" 0 1\n"
"     (help-echo\n"
"      \"mouse-1: select window, mouse-2: delete others ...\"))\n"
"   mode-line-mule-info\n"
"   mode-line-modified\n"
"   mode-line-frame-identification\n"
"   \"    \"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18170
#, no-wrap
msgid ""
"   mode-line-buffer-identification\n"
"   \"    \"\n"
"   (:eval (substring\n"
"           (system-name) 0 (string-match \"\\\\..+\" (system-name))))\n"
"   \":\"\n"
"   default-directory\n"
"   #(\" \" 0 1\n"
"     (help-echo\n"
"      \"mouse-1: select window, mouse-2: delete others ...\"))\n"
"   (line-number-mode \" Line %l \")\n"
"   global-mode-string\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18183
#, no-wrap
msgid ""
"   #(\"   %[(\" 0 6\n"
"     (help-echo\n"
"      \"mouse-1: select window, mouse-2: delete others ...\"))\n"
"   (:eval (mode-line-mode-name))\n"
"   mode-line-process\n"
"   minor-mode-alist\n"
"   #(\"%n\" 0 2 (help-echo \"mouse-2: widen\" local-map (keymap ...)))\n"
"   \")%] \"\n"
"   (-3 . \"%P\")\n"
"   ;;   \"-%-\"\n"
"   )))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18191
msgid ""
"Here, I redefine the default mode line.  Most of the parts are from the "
"original; but I make a few changes.  I set the @emph{default} mode line "
"format so as to permit various modes, such as Info, to override it."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18197
msgid ""
"Many elements in the list are self-explanatory: @code{mode-line-modified} is "
"a variable that tells whether the buffer has been modified, @code{mode-name} "
"tells the name of the mode, and so on.  However, the format looks "
"complicated because of two features we have not discussed."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:18198
#, no-wrap
msgid "Properties, in mode line example"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18206
msgid ""
"The first string in the mode line is a dash or hyphen, @samp{-}.  In the old "
"days, it would have been specified simply as @code{\"-\"}.  But nowadays, "
"Emacs can add properties to a string, such as highlighting or, as in this "
"case, a help feature.  If you place your mouse cursor over the hyphen, some "
"help information appears (By default, you must wait seven-tenths of a second "
"before the information appears.  You can change that timing by changing the "
"value of @code{tooltip-delay}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18209
msgid "The new string format has a special syntax:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:18212
#, no-wrap
msgid "#(\"-\" 0 1 (help-echo \"mouse-1: select window, ...\"))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18225
msgid ""
"The @code{#(} begins a list.  The first element of the list is the string "
"itself, just one @samp{-}.  The second and third elements specify the range "
"over which the fourth element applies.  A range starts @emph{after} a "
"character, so a zero means the range starts just before the first character; "
"a 1 means that the range ends just after the first character.  The third "
"element is the property for the range.  It consists of a property list, a "
"property name, in this case, @samp{help-echo}, followed by a value, in this "
"case, a string.  The second, third, and fourth elements of this new string "
"format can be repeated."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18229
msgid ""
"@xref{Text Properties, , Text Properties, elisp, The GNU Emacs Lisp "
"Reference Manual}, and see @ref{Mode Line Format, , Mode Line Format, elisp, "
"The GNU Emacs Lisp Reference Manual}, for more information."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18234
msgid ""
"@code{mode-line-buffer-identification} displays the current buffer name.  It "
"is a list beginning @code{(#(\"%12b\" 0 4 @dots{}}.  The @code{#(} begins "
"the list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18242
msgid ""
"The @samp{\"%12b\"} displays the current buffer name, using the "
"@code{buffer-name} function with which we are familiar; the `12' specifies "
"the maximum number of characters that will be displayed.  When a name has "
"fewer characters, whitespace is added to fill out to this number.  (Buffer "
"names can and often should be longer than 12 characters; this length works "
"well in a typical 80 column wide window.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18249
msgid ""
"@code{:eval} says to evaluate the following form and use the result as a "
"string to display.  In this case, the expression displays the first "
"component of the full system name.  The end of the first component is a "
"@samp{.} (`period'), so I use the @code{string-match} function to tell me "
"the length of the first component.  The substring from the zeroth character "
"to that length is the name of the machine."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18252
msgid "This is the expression:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18257
#, no-wrap
msgid ""
"(:eval (substring\n"
"        (system-name) 0 (string-match \"\\\\..+\" (system-name))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18267
msgid ""
"@samp{%[} and @samp{%]} cause a pair of square brackets to appear for each "
"recursive editing level.  @samp{%n} says `Narrow' when narrowing is in "
"effect.  @samp{%P} tells you the percentage of the buffer that is above the "
"bottom of the window, or `Top', `Bottom', or `All'.  (A lower case @samp{p} "
"tell you the percentage above the @emph{top} of the window.)  @samp{%-} "
"inserts enough dashes to fill out the line."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18271
msgid ""
"Remember, ``You don't have to like Emacs to like it''---your own Emacs can "
"have different colors, different commands, and different keys than a default "
"Emacs."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18274
msgid ""
"On the other hand, if you want to bring up a plain `out of the box' Emacs, "
"with no customization, type:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:18277
#, no-wrap
msgid "emacs -q\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18283
msgid ""
"This will start an Emacs that does @emph{not} load your @file{~/.emacs} "
"initialization file.  A plain, default Emacs.  Nothing more."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:18286
#, no-wrap
msgid "debugging"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18291
msgid ""
"GNU Emacs has two debuggers, @code{debug} and @code{edebug}.  The first is "
"built into the internals of Emacs and is always with you; the second "
"requires that you instrument a function before you can use it."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18295
msgid ""
"Both debuggers are described extensively in @ref{Debugging, , Debugging Lisp "
"Programs, elisp, The GNU Emacs Lisp Reference Manual}.  In this chapter, I "
"will walk through a short example of each."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18313
msgid ""
"Suppose you have written a function definition that is intended to return "
"the sum of the numbers 1 through a given number.  (This is the "
"@code{triangle} function discussed earlier.  @xref{Decrementing Example, , "
"Example with Decrementing Counter}, for a discussion.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18316
msgid ""
"However, your function definition has a bug.  You have mistyped @samp{1=} "
"for @samp{1-}.  Here is the broken definition:"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:18317
#, no-wrap
msgid "triangle-bugged"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18327
#, no-wrap
msgid ""
"(defun triangle-bugged (number)\n"
"  \"Return sum of numbers 1 through NUMBER inclusive.\"\n"
"  (let ((total 0))\n"
"    (while (> number 0)\n"
"      (setq total (+ total number))\n"
"      (setq number (1= number)))      ; @r{Error here.}\n"
"    total))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18333
msgid ""
"If you are reading this in Info, you can evaluate this definition in the "
"normal fashion.  You will see @code{triangle-bugged} appear in the echo "
"area."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18337
msgid "Now evaluate the @code{triangle-bugged} function with an argument of 4:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:18340
#, no-wrap
msgid "(triangle-bugged 4)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18345
msgid ""
"In a recent GNU Emacs, you will create and enter a @file{*Backtrace*} buffer "
"that says:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18358
#, no-wrap
msgid ""
"---------- Buffer: *Backtrace* ----------\n"
"Debugger entered--Lisp error: (void-function 1=)\n"
"  (1= number)\n"
"  (setq number (1= number))\n"
"  (while (> number 0) (setq total (+ total number))\n"
"        (setq number (1= number)))\n"
"  (let ((total 0)) (while (> number 0) (setq total ...)\n"
"    (setq number ...)) total)\n"
"  triangle-bugged(4)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18365
#, no-wrap
msgid ""
"  eval((triangle-bugged 4))\n"
"  eval-last-sexp-1(nil)\n"
"  eval-last-sexp(nil)\n"
"  call-interactively(eval-last-sexp)\n"
"---------- Buffer: *Backtrace* ----------\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18372
msgid ""
"(I have reformatted this example slightly; the debugger does not fold long "
"lines.  As usual, you can quit the debugger by typing @kbd{q} in the "
"@file{*Backtrace*} buffer.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18376
msgid ""
"In practice, for a bug as simple as this, the `Lisp error' line will tell "
"you what you need to know to correct the definition.  The function @code{1=} "
"is `void'."
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:18383 emacs-lisp-intro.texi:18723
#, no-wrap
msgid "Symbol's function definition is void:@: 1=\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18392
msgid ""
"However, suppose you are not quite certain what is going on? You can read "
"the complete backtrace."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18396
msgid ""
"In this case, you need to run a recent GNU Emacs, which automatically starts "
"the debugger that puts you in the @file{*Backtrace*} buffer; or else, you "
"need to start the debugger manually as described below."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18402
msgid ""
"Read the @file{*Backtrace*} buffer from the bottom up; it tells you what "
"Emacs did that led to the error.  Emacs made an interactive call to @kbd{C-x "
"C-e} (@code{eval-last-sexp}), which led to the evaluation of the "
"@code{triangle-bugged} expression.  Each line above tells you what the Lisp "
"interpreter evaluated next."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18405
msgid "The third line from the top of the buffer is"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:18408
#, no-wrap
msgid "(setq number (1= number))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18414
msgid ""
"Emacs tried to evaluate this expression; in order to do so, it tried to "
"evaluate the inner expression shown on the second line from the top:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:18417
#, no-wrap
msgid "(1= number)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18422
msgid "This is where the error occurred; as the top line says:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:18425
#, no-wrap
msgid "Debugger entered--Lisp error: (void-function 1=)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18430
msgid ""
"You can correct the mistake, re-evaluate the function definition, and then "
"run your test again."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18437
msgid ""
"A recent GNU Emacs starts the debugger automatically when your function has "
"an error."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18447
msgid ""
"Incidentally, you can start the debugger manually for all versions of Emacs; "
"the advantage is that the debugger runs even if you do not have a bug in "
"your code.  Sometimes your code will be free of bugs!"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18450
msgid ""
"You can enter the debugger when you call the function by calling "
"@code{debug-on-entry}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18454
msgid "Type:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:18457
#, no-wrap
msgid "M-x debug-on-entry RET triangle-bugged RET\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18462
msgid "Now, evaluate the following:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:18465
#, no-wrap
msgid "(triangle-bugged 5)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18471
msgid ""
"All versions of Emacs will create a @file{*Backtrace*} buffer and tell you "
"that it is beginning to evaluate the @code{triangle-bugged} function:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18478
#, no-wrap
msgid ""
"---------- Buffer: *Backtrace* ----------\n"
"Debugger entered--entering a function:\n"
"* triangle-bugged(5)\n"
"  eval((triangle-bugged 5))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18484 emacs-lisp-intro.texi:18505 emacs-lisp-intro.texi:18535
#, no-wrap
msgid ""
"  eval-last-sexp-1(nil)\n"
"  eval-last-sexp(nil)\n"
"  call-interactively(eval-last-sexp)\n"
"---------- Buffer: *Backtrace* ----------\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18490
msgid ""
"In the @file{*Backtrace*} buffer, type @kbd{d}.  Emacs will evaluate the "
"first expression in @code{triangle-bugged}; the buffer will look like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18499
#, no-wrap
msgid ""
"---------- Buffer: *Backtrace* ----------\n"
"Debugger entered--beginning evaluation of function call form:\n"
"* (let ((total 0)) (while (> number 0) (setq total ...)\n"
"        (setq number ...)) total)\n"
"* triangle-bugged(5)\n"
"  eval((triangle-bugged 5))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18512
msgid ""
"Now, type @kbd{d} again, eight times, slowly.  Each time you type @kbd{d}, "
"Emacs will evaluate another expression in the function definition."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18515
msgid "Eventually, the buffer will look like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18523
#, no-wrap
msgid ""
"---------- Buffer: *Backtrace* ----------\n"
"Debugger entered--beginning evaluation of function call form:\n"
"* (setq number (1= number))\n"
"* (while (> number 0) (setq total (+ total number))\n"
"        (setq number (1= number)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18529
#, no-wrap
msgid ""
"* (let ((total 0)) (while (> number 0) (setq total ...)\n"
"        (setq number ...)) total)\n"
"* triangle-bugged(5)\n"
"  eval((triangle-bugged 5))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18543
msgid ""
"Finally, after you type @kbd{d} two more times, Emacs will reach the error, "
"and the top two lines of the @file{*Backtrace*} buffer will look like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18551
#, no-wrap
msgid ""
"---------- Buffer: *Backtrace* ----------\n"
"Debugger entered--Lisp error: (void-function 1=)\n"
"* (1= number)\n"
"@dots{}\n"
"---------- Buffer: *Backtrace* ----------\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18555
msgid "By typing @kbd{d}, you were able to step through the function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18558
msgid ""
"You can quit a @file{*Backtrace*} buffer by typing @kbd{q} in it; this quits "
"the trace, but does not cancel @code{debug-on-entry}."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:18559
#, no-wrap
msgid "cancel-debug-on-entry"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18562
msgid ""
"To cancel the effect of @code{debug-on-entry}, call "
"@code{cancel-debug-on-entry} and the name of the function, like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:18565
#, no-wrap
msgid "M-x cancel-debug-on-entry RET triangle-bugged RET\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18569
msgid "(If you are reading this in Info, cancel @code{debug-on-entry} now.)"
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:18571
#, no-wrap
msgid "@code{debug-on-quit} and @code{(debug)}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18575
msgid ""
"In addition to setting @code{debug-on-error} or calling "
"@code{debug-on-entry}, there are two other ways to start @code{debug}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18580
msgid ""
"You can start @code{debug} whenever you type @kbd{C-g} "
"(@code{keyboard-quit}) by setting the variable @code{debug-on-quit} to "
"@code{t}.  This is useful for debugging infinite loops."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:18582
#, no-wrap
msgid "@code{(debug)} in code"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18585
msgid ""
"Or, you can insert a line that says @code{(debug)} into your code where you "
"want the debugger to start, like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18596
#, no-wrap
msgid ""
"(defun triangle-bugged (number)\n"
"  \"Return sum of numbers 1 through NUMBER inclusive.\"\n"
"  (let ((total 0))\n"
"    (while (> number 0)\n"
"      (setq total (+ total number))\n"
"      (debug)                         ; @r{Start debugger.}\n"
"      (setq number (1= number)))      ; @r{Error here.}\n"
"    total))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18601
msgid ""
"The @code{debug} function is described in detail in @ref{Debugger, , The "
"Lisp Debugger, elisp, The GNU Emacs Lisp Reference Manual}."
msgstr ""

#. type: section
#: emacs-lisp-intro.texi:18603
#, no-wrap
msgid "The @code{edebug} Source Level Debugger"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:18604
#, no-wrap
msgid "Source level debugger"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18610
msgid ""
"Edebug is a source level debugger.  Edebug normally displays the source of "
"the code you are debugging, with an arrow at the left that shows which line "
"you are currently executing."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18613
msgid ""
"You can walk through the execution of a function, line by line, or run "
"quickly until reaching a @dfn{breakpoint} where execution stops."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18616 emacs-lisp-intro.texi:18743
msgid ""
"Edebug is described in @ref{edebug, , Edebug, elisp, The GNU Emacs Lisp "
"Reference Manual}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18621
msgid ""
"Here is a bugged function definition for @code{triangle-recursively}.  "
"@xref{Recursive triangle function, , Recursion in place of a counter}, for a "
"review of it."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18632
#, no-wrap
msgid ""
"(defun triangle-recursively-bugged (number)\n"
"  \"Return sum of numbers 1 through NUMBER inclusive.\n"
"Uses recursion.\"\n"
"  (if (= number 1)\n"
"      1\n"
"    (+ number\n"
"       (triangle-recursively-bugged\n"
"        (1= number)))))               ; @r{Error here.}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18642
msgid ""
"Normally, you would install this definition by positioning your cursor after "
"the function's closing parenthesis and typing @kbd{C-x C-e} "
"(@code{eval-last-sexp}) or else by positioning your cursor within the "
"definition and typing @kbd{C-M-x} (@code{eval-defun}).  (By default, the "
"@code{eval-defun} command works only in Emacs Lisp mode or in Lisp "
"Interaction mode.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18648
msgid ""
"However, to prepare this function definition for Edebug, you must first "
"@dfn{instrument} the code using a different command.  You can do this by "
"positioning your cursor within or just after the definition and typing"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:18651
#, no-wrap
msgid "M-x edebug-defun RET\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18656
msgid ""
"This will cause Emacs to load Edebug automatically if it is not already "
"loaded, and properly instrument the function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18659
msgid ""
"After instrumenting the function, place your cursor after the following "
"expression and type @kbd{C-x C-e} (@code{eval-last-sexp}):"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:18662
#, no-wrap
msgid "(triangle-recursively-bugged 3)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18672
msgid ""
"You will be jumped back to the source for @code{triangle-recursively-bugged} "
"and the cursor positioned at the beginning of the @code{if} line of the "
"function.  Also, you will see an arrowhead at the left hand side of that "
"line.  The arrowhead marks the line where the function is executing.  (In "
"the following examples, we show the arrowhead with @samp{=>}; in a windowing "
"system, you may see the arrowhead as a solid triangle in the window "
"`fringe'.)"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:18675
#, no-wrap
msgid "=>@point{}(if (= number 1)\n"
msgstr ""

#. type: iftex
#: emacs-lisp-intro.texi:18681
msgid ""
"In the example, the location of point is displayed with a star, "
"@samp{@point{}} (in Info, it is displayed as @samp{-!-})."
msgstr ""

#. type: ifnottex
#: emacs-lisp-intro.texi:18685
msgid ""
"In the example, the location of point is displayed as @samp{@point{}} (in a "
"printed book, it is displayed with a five pointed star)."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18689
msgid ""
"If you now press @key{SPC}, point will move to the next expression to be "
"executed; the line will look like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:18692
#, no-wrap
msgid "=>(if @point{}(= number 1)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18699
msgid ""
"As you continue to press @key{SPC}, point will move from expression to "
"expression.  At the same time, whenever an expression returns a value, that "
"value will be displayed in the echo area.  For example, after you move point "
"past @code{number}, you will see the following:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:18702
#, no-wrap
msgid "Result: 3 (#o3, #x3, ?\\C-c)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18708
msgid ""
"This means the value of @code{number} is 3, which is octal three, "
"hexadecimal three, and @sc{ascii} `control-c' (the third letter of the "
"alphabet, in case you need to know this information)."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18711
msgid ""
"You can continue moving through the code until you reach the line with the "
"error.  Before evaluation, that line looks like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:18714
#, no-wrap
msgid "=>        @point{}(1= number)))))               ; @r{Error here.}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18720
msgid ""
"When you press @key{SPC} once again, you will produce an error message that "
"says:"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18727
msgid "This is the bug."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18729
msgid "Press @kbd{q} to quit Edebug."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18734
msgid ""
"To remove instrumentation from a function definition, simply re-evaluate it "
"with a command that does not instrument it.  For example, you could place "
"your cursor after the definition's closing parenthesis and type @kbd{C-x "
"C-e}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18740
msgid ""
"Edebug does a great deal more than walk with you through a function.  You "
"can set it so it races through on its own, stopping only at an error or at "
"specified stopping points; you can cause it to display the changing values "
"of various expressions; you can find out how many times a function is "
"called, and more."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:18757
msgid ""
"Install the @code{@value{COUNT-WORDS}} function and then cause it to enter "
"the built-in debugger when you call it.  Run the command on a region "
"containing two words.  You will need to press @kbd{d} a remarkable number of "
"times.  On your system, is a `hook' called after the command finishes? (For "
"information on hooks, see @ref{Command Overview, , Command Loop Overview, "
"elisp, The GNU Emacs Lisp Reference Manual}.)"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:18764
msgid ""
"Copy @code{@value{COUNT-WORDS}} into the @file{*scratch*} buffer, instrument "
"the function for Edebug, and walk through its execution.  The function does "
"not need to have a bug, although you can introduce one if you wish.  If the "
"function lacks a bug, the walk-through completes without problems."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:18770
msgid ""
"While running Edebug, type @kbd{?} to see a list of all the Edebug "
"commands.  (The @code{global-edebug-prefix} is usually @kbd{C-x X}, i.e., "
"@kbd{@key{CTRL}-x} followed by an upper case @kbd{X}; use this prefix for "
"commands made outside of the Edebug debugging buffer.)"
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:18775
msgid ""
"In the Edebug debugging buffer, use the @kbd{p} (@code{edebug-bounce-point}) "
"command to see where in the region the @code{@value{COUNT-WORDS}} is "
"working."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:18779
msgid ""
"Move point to some spot further down the function and then type the @kbd{h} "
"(@code{edebug-goto-here}) command to jump to that location."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:18784
msgid ""
"Use the @kbd{t} (@code{edebug-trace-mode}) command to cause Edebug to walk "
"through the function on its own; use an upper case @kbd{T} for "
"@code{edebug-Trace-fast-mode}."
msgstr ""

#. type: itemize
#: emacs-lisp-intro.texi:18788
msgid ""
"Set a breakpoint, then run Edebug in Trace mode until it reaches the "
"stopping point."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18797
msgid ""
"We have now reached the end of this Introduction.  You have now learned "
"enough about programming in Emacs Lisp to set values, to write simple "
"@file{.emacs} files for yourself and your friends, and write simple "
"customizations and extensions to Emacs."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18800
msgid ""
"This is a place to stop.  Or, if you wish, you can now go onward, and teach "
"yourself."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18804
msgid ""
"You have learned some of the basic nuts and bolts of programming.  But only "
"some.  There are a great many more brackets and hinges that are easy to use "
"that we have not touched."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18807
msgid "A path you can follow right now lies among the sources to GNU Emacs and in"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18818
msgid ""
"The Emacs Lisp sources are an adventure.  When you read the sources and come "
"across a function or expression that is unfamiliar, you need to figure out "
"or find out what it does."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18825
msgid ""
"Go to the Reference Manual.  It is a thorough, complete, and fairly "
"easy-to-read description of Emacs Lisp.  It is written not only for experts, "
"but for people who know what you know.  (The @cite{Reference Manual} comes "
"with the standard GNU Emacs distribution.  Like this introduction, it comes "
"as a Texinfo source file, so you can read it on-line and as a typeset, "
"printed book.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18829
msgid ""
"Go to the other on-line help that is part of GNU Emacs: the on-line "
"documentation for all functions and variables, and @code{find-tag}, the "
"program that takes you to sources."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18835
msgid ""
"Here is an example of how I explore the sources.  Because of its name, "
"@file{simple.el} is the file I looked at first, a long time ago.  As it "
"happens some of the functions in @file{simple.el} are complicated, or at "
"least look complicated at first sight.  The @code{open-line} function, for "
"example, looks complicated."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18843
msgid ""
"You may want to walk through this function slowly, as we did with the "
"@code{forward-sentence} function.  (@xref{forward-sentence, The "
"@code{forward-sentence} function}.)  Or you may want to skip that function "
"and look at another, such as @code{split-line}.  You don't need to read all "
"the functions.  According to @code{count-words-in-defun}, the "
"@code{split-line} function contains 102 words and symbols."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18847
msgid ""
"Even though it is short, @code{split-line} contains expressions we have not "
"studied: @code{skip-chars-forward}, @code{indent-to}, @code{current-column} "
"and @code{insert-and-inherit}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18851
msgid ""
"Consider the @code{skip-chars-forward} function.  (It is part of the "
"function definition for @code{back-to-indentation}, which is shown in "
"@ref{Review, , Review}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18855
msgid ""
"In GNU Emacs, you can find out more about @code{skip-chars-forward} by "
"typing @kbd{C-h f} (@code{describe-function}) and the name of the function.  "
"This gives you the function documentation."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18861
msgid ""
"You may be able to guess what is done by a well named function such as "
"@code{indent-to}; or you can look it up, too.  Incidentally, the "
"@code{describe-function} function itself is in @file{help.el}; it is one of "
"those long, but decipherable functions.  You can look up "
"@code{describe-function} using the @kbd{C-h f} command!"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18868
msgid ""
"In this instance, since the code is Lisp, the @file{*Help*} buffer contains "
"the name of the library containing the function's source.  You can put point "
"over the name of the library and press the RET key, which in this situation "
"is bound to @code{help-follow}, and be taken directly to the source, in the "
"same way as @kbd{M-.} (@code{find-tag})."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18872
msgid ""
"The definition for @code{describe-function} illustrates how to customize the "
"@code{interactive} expression without using the standard character codes; "
"and it shows how to create a temporary buffer."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18876
msgid ""
"(The @code{indent-to} function is written in C rather than Emacs Lisp; it is "
"a `built-in' function.  @code{help-follow} takes you to its source as does "
"@code{find-tag}, when properly set up.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18882
msgid ""
"You can look at a function's source using @code{find-tag}, which is bound to "
"@kbd{M-.} Finally, you can find out what the Reference Manual has to say by "
"visiting the manual in Info, and typing @kbd{i} (@code{Info-index}) and the "
"name of the function, or by looking up the function in the index to a "
"printed copy of the manual."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18885
msgid "Similarly, you can find out what is meant by @code{insert-and-inherit}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18895
msgid ""
"Other interesting source files include @file{paragraphs.el}, "
"@file{loaddefs.el}, and @file{loadup.el}.  The @file{paragraphs.el} file "
"includes short, easily understood functions as well as longer ones.  The "
"@file{loaddefs.el} file contains the many standard autoloads and many "
"keymaps.  I have never looked at it all; only at parts.  @file{loadup.el} is "
"the file that loads the standard parts of Emacs; it tells you a great deal "
"about how Emacs is built.  (@xref{Building Emacs, , Building Emacs, elisp, "
"The GNU Emacs Lisp Reference Manual}, for more about building.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18903
msgid ""
"As I said, you have learned some nuts and bolts; however, and very "
"importantly, we have hardly touched major aspects of programming; I have "
"said nothing about how to sort information, except to use the predefined "
"@code{sort} function; I have said nothing about how to store information, "
"except to use variables and lists; I have said nothing about how to write "
"programs that write programs.  These are topics for another, and different "
"kind of book, a different kind of learning."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18907
msgid ""
"What you have done is learn enough for much practical work with GNU Emacs.  "
"What you have done is get started.  This is the end of a beginning."
msgstr ""

#. type: appendix
#: emacs-lisp-intro.texi:18911
#, no-wrap
msgid "The @code{the-the} Function"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:18913
#, no-wrap
msgid "Duplicated words function"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:18914
#, no-wrap
msgid "Words, duplicated"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18920
msgid ""
"Sometimes when you you write text, you duplicate words---as with ``you you'' "
"near the beginning of this sentence.  I find that most frequently, I "
"duplicate ``the''; hence, I call the function for detecting duplicated "
"words, @code{the-the}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18924
msgid ""
"As a first step, you could use the following regular expression to search "
"for duplicates:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:18927
#, no-wrap
msgid "\\\\(\\\\w+[ \\t\\n]+\\\\)\\\\1\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18939
msgid ""
"This regexp matches one or more word-constituent characters followed by one "
"or more spaces, tabs, or newlines.  However, it does not detect duplicated "
"words on different lines, since the ending of the first word, the end of the "
"line, is different from the ending of the second word, a space.  (For more "
"information about regular expressions, see @ref{Regexp Search, , Regular "
"Expression Searches}, as well as @ref{Regexps, , Syntax of Regular "
"Expressions, emacs, The GNU Emacs Manual}, and @ref{Regular Expressions, , "
"Regular Expressions, elisp, The GNU Emacs Lisp Reference Manual}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18943
msgid ""
"You might try searching just for duplicated word-constituent characters but "
"that does not work since the pattern detects doubles such as the two "
"occurrences of `th' in `with the'."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18948
msgid ""
"Another possible regexp searches for word-constituent characters followed by "
"non-word-constituent characters, reduplicated.  Here, @w{@samp{\\\\w+}} "
"matches one or more word-constituent characters and @w{@samp{\\\\W*}} "
"matches zero or more non-word-constituent characters."
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:18951
#, no-wrap
msgid "\\\\(\\\\(\\\\w+\\\\)\\\\W*\\\\)\\\\1\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18955
msgid "Again, not useful."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18960
msgid ""
"Here is the pattern that I use.  It is not perfect, but good enough.  "
"@w{@samp{\\\\b}} matches the empty string, provided it is at the beginning "
"or end of a word; @w{@samp{[^@@ \\n\\t]+}} matches one or more occurrences "
"of any characters that are @emph{not} an @@-sign, space, newline, or tab."
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:18963
#, no-wrap
msgid "\\\\b\\\\([^@@ \\n\\t]+\\\\)[ \\n\\t]+\\\\1\\\\b\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18967
msgid ""
"One can write more complicated expressions, but I found that this expression "
"is good enough, so I use it."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18970
msgid ""
"Here is the @code{the-the} function, as I include it in my @file{.emacs} "
"file, along with a handy global key binding:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18978
#, no-wrap
msgid ""
"(defun the-the ()\n"
"  \"Search forward for for a duplicated word.\"\n"
"  (interactive)\n"
"  (message \"Searching for for duplicated words ...\")\n"
"  (push-mark)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18986
#, no-wrap
msgid ""
"  ;; This regexp is not perfect\n"
"  ;; but is fairly good over all:\n"
"  (if (re-search-forward\n"
"       \"\\\\b\\\\([^@@ \\n\\t]+\\\\)[ \\n\\t]+\\\\1\\\\b\" nil 'move)\n"
"      (message \"Found duplicated word.\")\n"
"    (message \"End of buffer\")))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:18991
#, no-wrap
msgid ""
";; Bind `the-the' to  C-c \\\n"
"(global-set-key \"\\C-c\\\\\" 'the-the)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:18996
msgid "Here is test text:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19001
#, no-wrap
msgid ""
"one two two three four five\n"
"five six seven\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19006
msgid ""
"You can substitute the other regular expressions shown above in the function "
"definition and try each of them on this list."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:19009
#, no-wrap
msgid "Kill ring handling"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:19010
#, no-wrap
msgid "Handling the kill ring"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:19011
#, no-wrap
msgid "Ring, making a list like a"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19016
msgid ""
"The kill ring is a list that is transformed into a ring by the workings of "
"the @code{current-kill} function.  The @code{yank} and @code{yank-pop} "
"commands use the @code{current-kill} function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19020
msgid ""
"This appendix describes the @code{current-kill} function as well as both the "
"@code{yank} and the @code{yank-pop} commands, but first, consider the "
"workings of the kill ring."
msgstr ""

#. type: unnumberedsec
#: emacs-lisp-intro.texi:19030 emacs-lisp-intro.texi:19031
#, no-wrap
msgid "What the Kill Ring Does"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19038
msgid ""
"The kill ring has a default maximum length of sixty items; this number is "
"too large for an explanation.  Instead, set it to four.  Please evaluate the "
"following:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19043
#, no-wrap
msgid ""
"(setq old-kill-ring-max kill-ring-max)\n"
"(setq kill-ring-max 4)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19050
msgid ""
"Then, please copy each line of the following indented example into the kill "
"ring.  You may kill each line with @kbd{C-k} or mark it and copy it with "
"@kbd{M-w}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19059
msgid ""
"(In a read-only buffer, such as the @file{*info*} buffer, the kill command, "
"@kbd{C-k} (@code{kill-line}), will not remove the text, merely copy it to "
"the kill ring.  However, your machine may beep at you.  Alternatively, for "
"silence, you may copy the region of each line with the @kbd{M-w} "
"(@code{kill-ring-save}) command.  You must mark each line for this command "
"to succeed, but it does not matter at which end you put point or mark.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19064
msgid ""
"Please invoke the calls in order, so that five elements attempt to fill the "
"kill ring:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19072
#, no-wrap
msgid ""
"first some text\n"
"second piece of text\n"
"third line\n"
"fourth line of text\n"
"fifth bit of text\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19078
msgid "Then find the value of @code{kill-ring} by evaluating"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:19081
#, no-wrap
msgid "kill-ring\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19086
msgid "It is:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19091
#, no-wrap
msgid ""
"(\"fifth bit of text\" \"fourth line of text\"\n"
"\"third line\" \"second piece of text\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19096
msgid "The first element, @samp{first some text}, was dropped."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19099
msgid "To return to the old value for the length of the kill ring, evaluate:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:19102
#, no-wrap
msgid "(setq kill-ring-max old-kill-ring-max)\n"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:19104 emacs-lisp-intro.texi:19106
#, no-wrap
msgid "current-kill"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19115
msgid ""
"The @code{current-kill} function changes the element in the kill ring to "
"which @code{kill-ring-yank-pointer} points.  (Also, the @code{kill-new} "
"function sets @code{kill-ring-yank-pointer} to point to the latest element "
"of the kill ring.  The @code{kill-new} function is used directly or "
"indirectly by @code{kill-append}, @code{copy-region-as-kill}, "
"@code{kill-ring-save}, @code{kill-line}, and @code{kill-region}.)"
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:19122
#, no-wrap
msgid "Code for current-kill"
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:19123
#, no-wrap
msgid "The code for @code{current-kill}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19130
msgid ""
"The @code{current-kill} function is used by @code{yank} and by "
"@code{yank-pop}.  Here is the code for @code{current-kill}:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19138
#, no-wrap
msgid ""
"(defun current-kill (n &optional do-not-move)\n"
"  \"Rotate the yanking point by N places, and then return that kill.\n"
"If N is zero, `interprogram-paste-function' is set, and calling it\n"
"returns a string, then that string is added to the front of the\n"
"kill ring and returned as the latest kill.\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19145
#, no-wrap
msgid ""
"If optional arg DO-NOT-MOVE is non-nil, then don't actually move the\n"
"yanking point; just return the Nth kill forward.\"\n"
"  (let ((interprogram-paste (and (= n 0)\n"
"                                 interprogram-paste-function\n"
"                                 (funcall interprogram-paste-function))))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19155
#, no-wrap
msgid ""
"    (if interprogram-paste\n"
"        (progn\n"
"          ;; Disable the interprogram cut function when we add the new\n"
"          ;; text to the kill ring, so Emacs doesn't try to own the\n"
"          ;; selection, with identical text.\n"
"          (let ((interprogram-cut-function nil))\n"
"            (kill-new interprogram-paste))\n"
"          interprogram-paste)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19165
#, no-wrap
msgid ""
"      (or kill-ring (error \"Kill ring is empty\"))\n"
"      (let ((ARGth-kill-element\n"
"             (nthcdr (mod (- n (length kill-ring-yank-pointer))\n"
"                          (length kill-ring))\n"
"                     kill-ring)))\n"
"        (or do-not-move\n"
"            (setq kill-ring-yank-pointer ARGth-kill-element))\n"
"        (car ARGth-kill-element)))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19173
msgid ""
"Remember also that the @code{kill-new} function sets "
"@code{kill-ring-yank-pointer} to the latest element of the kill ring, which "
"means that all the functions that call it set the value indirectly: "
"@code{kill-append}, @code{copy-region-as-kill}, @code{kill-ring-save}, "
"@code{kill-line}, and @code{kill-region}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19177
msgid ""
"Here is the line in @code{kill-new}, which is explained in @ref{kill-new "
"function, , The @code{kill-new} function}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19190
msgid ""
"The @code{current-kill} function looks complex, but as usual, it can be "
"understood by taking it apart piece by piece.  First look at it in skeletal "
"form:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19197
#, no-wrap
msgid ""
"(defun current-kill (n &optional do-not-move)\n"
"  \"Rotate the yanking point by N places, and then return that kill.\"\n"
"  (let @var{varlist}\n"
"    @var{body}@dots{})\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19202
msgid ""
"This function takes two arguments, one of which is optional.  It has a "
"documentation string.  It is @emph{not} interactive."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:19210
#, no-wrap
msgid "Body of current-kill"
msgstr ""

#. type: unnumberedsubsubsec
#: emacs-lisp-intro.texi:19211
#, no-wrap
msgid "The Body of @code{current-kill}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19216
msgid ""
"The body of the function definition is a @code{let} expression, which itself "
"has a body as well as a @var{varlist}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19225
msgid ""
"The @code{let} expression declares a variable that will be only usable "
"within the bounds of this function.  This variable is called "
"@code{interprogram-paste} and is for copying to another program.  It is not "
"for copying within this instance of GNU Emacs.  Most window systems provide "
"a facility for interprogram pasting.  Sadly, that facility usually provides "
"only for the last element.  Most windowing systems have not adopted a ring "
"of many possibilities, even though Emacs has provided it for decades."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19228
msgid ""
"The @code{if} expression has two parts, one if there exists "
"@code{interprogram-paste} and one if not."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19234
msgid ""
"Let us consider the `if not' or else-part of the @code{current-kill} "
"function.  (The then-part uses the @code{kill-new} function, which we have "
"already described.  @xref{kill-new function, , The @code{kill-new} "
"function}.)"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19245
#, no-wrap
msgid ""
"(or kill-ring (error \"Kill ring is empty\"))\n"
"(let ((ARGth-kill-element\n"
"       (nthcdr (mod (- n (length kill-ring-yank-pointer))\n"
"                    (length kill-ring))\n"
"               kill-ring)))\n"
"  (or do-not-move\n"
"      (setq kill-ring-yank-pointer ARGth-kill-element))\n"
"  (car ARGth-kill-element))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19251
msgid ""
"The code first checks whether the kill ring has content; otherwise it "
"signals an error."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19255
msgid ""
"Note that the @code{or} expression is very similar to testing length with an "
"@code{if}:"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:19256
#, no-wrap
msgid "zerop"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:19257
#, no-wrap
msgid "error"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19263
#, no-wrap
msgid ""
"(if (zerop (length kill-ring))          ; @r{if-part}\n"
"    (error \"Kill ring is empty\"))       ; @r{then-part}\n"
"  ;; No else-part\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19271
msgid ""
"If there is not anything in the kill ring, its length must be zero and an "
"error message sent to the user: @samp{Kill ring is empty}.  The "
"@code{current-kill} function uses an @code{or} expression which is simpler.  "
"But an @code{if} expression reminds us what goes on."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19282
msgid ""
"This @code{if} expression uses the function @code{zerop} which returns true "
"if the value it is testing is zero.  When @code{zerop} tests true, the "
"then-part of the @code{if} is evaluated.  The then-part is a list starting "
"with the function @code{error}, which is a function that is similar to the "
"@code{message} function (@pxref{message, , The @code{message} Function}) in "
"that it prints a one-line message in the echo area.  However, in addition to "
"printing a message, @code{error} also stops evaluation of the function "
"within which it is embedded.  This means that the rest of the function will "
"not be evaluated if the length of the kill ring is zero."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19286
msgid ""
"Then the @code{current-kill} function selects the element to return.  The "
"selection depends on the number of places that @code{current-kill} rotates "
"and on where @code{kill-ring-yank-pointer} points."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19291
msgid ""
"Next, either the optional @code{do-not-move} argument is true or the current "
"value of @code{kill-ring-yank-pointer} is set to point to the list.  "
"Finally, another expression returns the first element of the list even if "
"the @code{do-not-move} argument is true."
msgstr ""

#. type: unnumberedsubsubsec
#: emacs-lisp-intro.texi:19294
#, no-wrap
msgid "Digression about the word `error'"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19305
msgid ""
"In my opinion, it is slightly misleading, at least to humans, to use the "
"term `error' as the name of the @code{error} function.  A better term would "
"be `cancel'.  Strictly speaking, of course, you cannot point to, much less "
"rotate a pointer to a list that has no length, so from the point of view of "
"the computer, the word `error' is correct.  But a human expects to attempt "
"this sort of thing, if only to find out whether the kill ring is full or "
"empty.  This is an act of exploration."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19313
msgid ""
"From the human point of view, the act of exploration and discovery is not "
"necessarily an error, and therefore should not be labeled as one, even in "
"the bowels of a computer.  As it is, the code in Emacs implies that a human "
"who is acting virtuously, by exploring his or her environment, is making an "
"error.  This is bad.  Even though the computer takes the same steps as it "
"does when there is an `error', a term such as `cancel' would have a clearer "
"connotation."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19323
msgid ""
"Among other actions, the else-part of the @code{if} expression sets the "
"value of @code{kill-ring-yank-pointer} to @code{ARGth-kill-element} when the "
"kill ring has something in it and the value of @code{do-not-move} is "
"@code{nil}."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19332
#, no-wrap
msgid ""
"(nthcdr (mod (- n (length kill-ring-yank-pointer))\n"
"             (length kill-ring))\n"
"        kill-ring)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19344
msgid ""
"This needs some examination.  Unless it is not supposed to move the pointer, "
"the @code{current-kill} function changes where @code{kill-ring-yank-pointer} "
"points.  That is what the @w{@code{(setq kill-ring-yank-pointer "
"ARGth-kill-element))}} expression does.  Also, clearly, "
"@code{ARGth-kill-element} is being set to be equal to some @sc{cdr} of the "
"kill ring, using the @code{nthcdr} function that is described in an earlier "
"section.  (@xref{copy-region-as-kill}.)  How does it do this?"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19348
msgid ""
"As we have seen before (@pxref{nthcdr}), the @code{nthcdr} function works by "
"repeatedly taking the @sc{cdr} of a list---it takes the @sc{cdr} of the "
"@sc{cdr} of the @sc{cdr} @dots{}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19351
msgid "The two following expressions produce the same result:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19355
#, no-wrap
msgid ""
"(setq kill-ring-yank-pointer (cdr kill-ring))\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19357
#, no-wrap
msgid "(setq kill-ring-yank-pointer (nthcdr 1 kill-ring))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19362
msgid ""
"However, the @code{nthcdr} expression is more complicated.  It uses the "
"@code{mod} function to determine which @sc{cdr} to select."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19365
msgid ""
"(You will remember to look at inner functions first; indeed, we will have to "
"go inside the @code{mod}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19370
msgid ""
"The @code{mod} function returns the value of its first argument modulo the "
"second; that is to say, it returns the remainder after dividing the first "
"argument by the second.  The value returned has the same sign as the second "
"argument."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19373 emacs-lisp-intro.texi:20949
msgid "Thus,"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19380
#, no-wrap
msgid ""
"(mod 12 4)\n"
"  @result{} 0  ;; @r{because there is no remainder}\n"
"(mod 13 4)\n"
"  @result{} 1\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19386
msgid ""
"In this case, the first argument is often smaller than the second.  That is "
"fine."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19393
#, no-wrap
msgid ""
"(mod 0 4)\n"
"  @result{} 0\n"
"(mod 1 4)\n"
"  @result{} 1\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19400
msgid ""
"We can guess what the @code{-} function does.  It is like @code{+} but "
"subtracts instead of adds; the @code{-} function subtracts its second "
"argument from its first.  Also, we already know what the @code{length} "
"function does (@pxref{length}).  It returns the length of a list."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19403
msgid ""
"And @code{n} is the name of the required argument to the @code{current-kill} "
"function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19408
msgid ""
"So when the first argument to @code{nthcdr} is zero, the @code{nthcdr} "
"expression returns the whole list, as you can see by evaluating the "
"following:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19418
#, no-wrap
msgid ""
";; kill-ring-yank-pointer @r{and} kill-ring @r{have a length of four}\n"
";; @r{and} (mod (- 0 4) 4) @result{} 0\n"
"(nthcdr (mod (- 0 4) 4)\n"
"        '(\"fourth line of text\"\n"
"          \"third line\"\n"
"          \"second piece of text\"\n"
"          \"first some text\"))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19425
msgid ""
"When the first argument to the @code{current-kill} function is one, the "
"@code{nthcdr} expression returns the list without its first element."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19433
#, no-wrap
msgid ""
"(nthcdr (mod (- 1 4) 4)\n"
"        '(\"fourth line of text\"\n"
"          \"third line\"\n"
"          \"second piece of text\"\n"
"          \"first some text\"))\n"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:19436
#, no-wrap
msgid "@samp{global variable} defined"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:19437
#, no-wrap
msgid "@samp{variable, global}, defined"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19445
msgid ""
"Incidentally, both @code{kill-ring} and @code{kill-ring-yank-pointer} are "
"@dfn{global variables}.  That means that any expression in Emacs Lisp can "
"access them.  They are not like the local variables set by @code{let} or "
"like the symbols in an argument list.  Local variables can only be accessed "
"within the @code{let} that defines them or the function that specifies them "
"in an argument list (and within expressions called by them)."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19458
msgid ""
"After learning about @code{current-kill}, the code for the @code{yank} "
"function is almost easy."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19463
msgid ""
"The @code{yank} function does not use the @code{kill-ring-yank-pointer} "
"variable directly.  It calls @code{insert-for-yank} which calls "
"@code{current-kill} which sets the @code{kill-ring-yank-pointer} variable."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19477
#, no-wrap
msgid ""
"(defun yank (&optional arg)\n"
"  \"Reinsert (\\\"paste\\\") the last stretch of killed text.\n"
"More precisely, reinsert the stretch of killed text most recently\n"
"killed OR yanked.  Put point at end, and set mark at beginning.\n"
"With just \\\\[universal-argument] as argument, same but put point at\n"
"beginning (and mark at end).  With argument N, reinsert the Nth most\n"
"recently killed stretch of killed text.\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19481
#, no-wrap
msgid ""
"When this command inserts killed text into the buffer, it honors\n"
"`yank-excluded-properties' and `yank-handler' as described in the\n"
"doc string for `insert-for-yank-1', which see.\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19483
#, no-wrap
msgid "See also the command \\\\[yank-pop].\"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19491
#, no-wrap
msgid ""
"  (interactive \"*P\")\n"
"  (setq yank-window-start (window-start))\n"
"  ;; If we don't get all the way thru, make last-command indicate that\n"
"  ;; for the following command.\n"
"  (setq this-command t)\n"
"  (push-mark (point))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19504
#, no-wrap
msgid ""
"  (insert-for-yank (current-kill (cond\n"
"                                  ((listp arg) 0)\n"
"                                  ((eq arg '-) -2)\n"
"                                  (t (1- arg)))))\n"
"  (if (consp arg)\n"
"      ;; This is like exchange-point-and-mark,\n"
"      ;;     but doesn't activate the mark.\n"
"      ;; It is cleaner to avoid activation, even though the command\n"
"      ;; loop would deactivate the mark because we inserted text.\n"
"      (goto-char (prog1 (mark t)\n"
"                   (set-marker (mark-marker) (point) (current-buffer)))))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19510
#, no-wrap
msgid ""
"  ;; If we do get all the way thru, make this-command indicate that.\n"
"  (if (eq this-command t)\n"
"      (setq this-command 'yank))\n"
"  nil)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19516
msgid ""
"The key expression is @code{insert-for-yank}, which inserts the string "
"returned by @code{current-kill}, but removes some text properties from it."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19522
msgid ""
"However, before getting to that expression, the function sets the value of "
"@code{yank-window-start} to the position returned by the "
"@code{(window-start)} expression, the position at which the display "
"currently starts.  The @code{yank} function also sets @code{this-command} "
"and pushes the mark."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19526
msgid ""
"After it yanks the appropriate element, if the optional argument is a "
"@sc{cons} rather than a number or nothing, it puts point at beginning of the "
"yanked text and mark at its end."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19534
msgid ""
"(The @code{prog1} function is like @code{progn} but returns the value of its "
"first argument rather than the value of its last argument.  Its first "
"argument is forced to return the buffer's mark as an integer.  You can see "
"the documentation for these functions by placing point over them in this "
"buffer and then typing @kbd{C-h f} (@code{describe-function}) followed by a "
"@kbd{RET}; the default is the function.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19536
msgid "The last part of the function tells what to do when it succeeds."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19544
msgid ""
"After understanding @code{yank} and @code{current-kill}, you know how to "
"approach the @code{yank-pop} function.  Leaving out the documentation to "
"save space, it looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19553
#, no-wrap
msgid ""
"(defun yank-pop (&optional arg)\n"
"  \"@dots{}\"\n"
"  (interactive \"*p\")\n"
"  (if (not (eq last-command 'yank))\n"
"      (error \"Previous command was not a yank\"))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19559
#, no-wrap
msgid ""
"  (setq this-command 'yank)\n"
"  (unless arg (setq arg 1))\n"
"  (let ((inhibit-read-only t)\n"
"        (before (< (point) (mark t))))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19565
#, no-wrap
msgid ""
"    (if before\n"
"        (funcall (or yank-undo-function 'delete-region) (point) (mark t))\n"
"      (funcall (or yank-undo-function 'delete-region) (mark t) (point)))\n"
"    (setq yank-undo-function nil)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19572
#, no-wrap
msgid ""
"    (set-marker (mark-marker) (point) (current-buffer))\n"
"    (insert-for-yank (current-kill arg))\n"
"    ;; Set the window start back where it was in the yank command,\n"
"    ;; if possible.\n"
"    (set-window-start (selected-window) yank-window-start t)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19584
#, no-wrap
msgid ""
"    (if before\n"
"        ;; This is like exchange-point-and-mark,\n"
"        ;;     but doesn't activate the mark.\n"
"        ;; It is cleaner to avoid activation, even though the command\n"
"        ;; loop would deactivate the mark because we inserted text.\n"
"        (goto-char (prog1 (mark t)\n"
"                     (set-marker (mark-marker)\n"
"                                 (point)\n"
"                                 (current-buffer))))))\n"
"  nil)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19593
msgid ""
"The function is interactive with a small @samp{p} so the prefix argument is "
"processed and passed to the function.  The command can only be used after a "
"previous yank; otherwise an error message is sent.  This check uses the "
"variable @code{last-command} which is set by @code{yank} and is discussed "
"elsewhere.  (@xref{copy-region-as-kill}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19599
msgid ""
"The @code{let} clause sets the variable @code{before} to true or false "
"depending whether point is before or after mark and then the region between "
"point and mark is deleted.  This is the region that was just inserted by the "
"previous yank and it is this text that will be replaced."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19604
msgid ""
"@code{funcall} calls its first argument as a function, passing remaining "
"arguments to it.  The first argument is whatever the @code{or} expression "
"returns.  The two remaining arguments are the positions of point and mark "
"set by the preceding @code{yank} command."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19606
msgid "There is more, but that is the hardest part."
msgstr ""

#. type: appendixsec
#: emacs-lisp-intro.texi:19608
#, no-wrap
msgid "The @file{ring.el} File"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:19609
#, no-wrap
msgid "@file{ring.el} file"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19615
msgid ""
"Interestingly, GNU Emacs posses a file called @file{ring.el} that provides "
"many of the features we just discussed.  But functions such as "
"@code{kill-ring-yank-pointer} do not use this library, possibly because they "
"were written earlier."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19624
msgid ""
"Printed axes help you understand a graph.  They convey scale.  In an earlier "
"chapter (@pxref{Readying a Graph, , Readying a Graph}), we wrote the code to "
"print the body of a graph.  Here we write the code for printing and labeling "
"vertical and horizontal axes, along with the body itself."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:19634
#, no-wrap
msgid "Labeled Example"
msgstr ""

#. type: unnumberedsec
#: emacs-lisp-intro.texi:19635
#, no-wrap
msgid "Labeled Example Graph"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19642
msgid ""
"Since insertions fill a buffer to the right and below point, the new graph "
"printing function should first print the Y or vertical axis, then the body "
"of the graph, and finally the X or horizontal axis.  This sequence lays out "
"for us the contents of the function:"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:19646
msgid "Set up code."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:19649
msgid "Print Y axis."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:19652
msgid "Print body of graph."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:19655
msgid "Print X axis."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19659
msgid "Here is an example of how a finished graph should look:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19674
#, no-wrap
msgid ""
"    10 -\n"
"                  *\n"
"                  *  *\n"
"                  *  **\n"
"                  *  ***\n"
"     5 -      *   *******\n"
"            * *** *******\n"
"            *************\n"
"          ***************\n"
"     1 - ****************\n"
"         |   |    |    |\n"
"         1   5   10   15\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19681
msgid ""
"In this graph, both the vertical and the horizontal axes are labeled with "
"numbers.  However, in some graphs, the horizontal axis is time and would be "
"better labeled with months, like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19691
#, no-wrap
msgid ""
"     5 -      *\n"
"            * ** *\n"
"            *******\n"
"          ********** **\n"
"     1 - **************\n"
"         |    ^      |\n"
"         Jan  June   Jan\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19699
msgid ""
"Indeed, with a little thought, we can easily come up with a variety of "
"vertical and horizontal labeling schemes.  Our task could become "
"complicated.  But complications breed confusion.  Rather than permit this, "
"it is better choose a simple labeling scheme for our first effort, and to "
"modify or replace it later."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19703
msgid ""
"These considerations suggest the following outline for the "
"@code{print-graph} function:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19710 emacs-lisp-intro.texi:20589
#, no-wrap
msgid ""
"(defun print-graph (numbers-list)\n"
"  \"@var{documentation}@dots{}\"\n"
"  (let ((height  @dots{}\n"
"        @dots{}))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19715 emacs-lisp-intro.texi:20594
#, no-wrap
msgid ""
"    (print-Y-axis height @dots{} )\n"
"    (graph-body-print numbers-list)\n"
"    (print-X-axis @dots{} )))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19720
msgid ""
"We can work on each part of the @code{print-graph} function definition in "
"turn."
msgstr ""

#. type: appendixsec
#: emacs-lisp-intro.texi:19722
#, no-wrap
msgid "The @code{print-graph} Varlist"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:19723
#, no-wrap
msgid "@code{print-graph} varlist"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19729
msgid ""
"In writing the @code{print-graph} function, the first task is to write the "
"varlist in the @code{let} expression.  (We will leave aside for the moment "
"any thoughts about making the function interactive or about the contents of "
"its documentation string.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19737
msgid ""
"The varlist should set several values.  Clearly, the top of the label for "
"the vertical axis must be at least the height of the graph, which means that "
"we must obtain this information here.  Note that the @code{print-graph-body} "
"function also requires this information.  There is no reason to calculate "
"the height of the graph in two different places, so we should change "
"@code{print-graph-body} from the way we defined it earlier to take advantage "
"of the calculation."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19743
msgid ""
"Similarly, both the function for printing the X axis labels and the "
"@code{print-graph-body} function need to learn the value of the width of "
"each symbol.  We can perform the calculation here and change the definition "
"for @code{print-graph-body} from the way we defined it in the previous "
"chapter."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19747
msgid ""
"The length of the label for the horizontal axis must be at least as long as "
"the graph.  However, this information is used only in the function that "
"prints the horizontal axis, so it does not need to be calculated here."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19750
msgid ""
"These thoughts lead us directly to the following form for the varlist in the "
"@code{let} for @code{print-graph}:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19755
#, no-wrap
msgid ""
"(let ((height (apply 'max numbers-list)) ; @r{First version.}\n"
"      (symbol-width (length graph-blank)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19760
msgid "As we shall see, this expression is not quite right."
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:19764
#, no-wrap
msgid "Axis, print vertical"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:19765
#, no-wrap
msgid "Y axis printing"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:19766
#, no-wrap
msgid "Vertical axis printing"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:19767
#, no-wrap
msgid "Print vertical axis"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19771
msgid ""
"The job of the @code{print-Y-axis} function is to print a label for the "
"vertical axis that looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19775
#, no-wrap
msgid ""
"    10 -\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19780
#, no-wrap
msgid ""
"     5 -\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19784
#, no-wrap
msgid "     1 -\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19790
msgid ""
"The function should be passed the height of the graph, and then should "
"construct and insert the appropriate numbers and marks."
msgstr ""

#. type: node
#: emacs-lisp-intro.texi:19801
#, no-wrap
msgid "print-Y-axis in Detail"
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:19802
#, no-wrap
msgid "The @code{print-Y-axis} Function in Detail"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19815
msgid ""
"It is easy enough to see in the figure what the Y axis label should look "
"like; but to say in words, and then to write a function definition to do the "
"job is another matter.  It is not quite true to say that we want a number "
"and a tic every five lines: there are only three lines between the @samp{1} "
"and the @samp{5} (lines 2, 3, and 4), but four lines between the @samp{5} "
"and the @samp{10} (lines 6, 7, 8, and 9).  It is better to say that we want "
"a number and a tic mark on the base line (number 1) and then that we want a "
"number and a tic on the fifth line from the bottom and on every line that is "
"a multiple of five."
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:19818
#, no-wrap
msgid "What height should the label be?"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19827
msgid ""
"The next issue is what height the label should be? Suppose the maximum "
"height of tallest column of the graph is seven.  Should the highest label on "
"the Y axis be @samp{5 -}, and should the graph stick up above the label? Or "
"should the highest label be @samp{7 -}, and mark the peak of the graph? Or "
"should the highest label be @code{10 -}, which is a multiple of five, and be "
"higher than the topmost value of the graph?"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19837
msgid ""
"The latter form is preferred.  Most graphs are drawn within rectangles whose "
"sides are an integral number of steps long---5, 10, 15, and so on for a step "
"distance of five.  But as soon as we decide to use a step height for the "
"vertical axis, we discover that the simple expression in the varlist for "
"computing the height is wrong.  The expression is @code{(apply 'max "
"numbers-list)}.  This returns the precise height, not the maximum height "
"plus whatever is necessary to round up to the nearest multiple of five.  A "
"more complex expression is required."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19840
msgid ""
"As usual in cases like this, a complex problem becomes simpler if it is "
"divided into several smaller problems."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19844
msgid ""
"First, consider the case when the highest value of the graph is an integral "
"multiple of five---when it is 5, 10, 15, or some higher multiple of five.  "
"We can use this value as the Y axis height."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19853
msgid ""
"A fairly simply way to determine whether a number is a multiple of five is "
"to divide it by five and see if the division results in a remainder.  If "
"there is no remainder, the number is a multiple of five.  Thus, seven "
"divided by five has a remainder of two, and seven is not an integral "
"multiple of five.  Put in slightly different language, more reminiscent of "
"the classroom, five goes into seven once, with a remainder of two.  However, "
"five goes into ten twice, with no remainder: ten is an integral multiple of "
"five."
msgstr ""

#. type: appendixsubsec
#: emacs-lisp-intro.texi:19855
#, no-wrap
msgid "Side Trip: Compute a Remainder"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:19857
#, no-wrap
msgid "% @r{(remainder function)}"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:19858
#, no-wrap
msgid "Remainder function, @code{%}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19866
msgid ""
"In Lisp, the function for computing a remainder is @code{%}.  The function "
"returns the remainder of its first argument divided by its second argument.  "
"As it happens, @code{%} is a function in Emacs Lisp that you cannot discover "
"using @code{apropos}: you find nothing if you type @kbd{M-x apropos "
"@key{RET} remainder @key{RET}}.  The only way to learn of the existence of "
"@code{%} is to read about it in a book such as this or in the Emacs Lisp "
"sources."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19869
msgid ""
"You can try the @code{%} function by evaluating the following two "
"expressions:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19873
#, no-wrap
msgid ""
"(% 7 5)\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19875
#, no-wrap
msgid "(% 10 5)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19880
msgid "The first expression returns 2 and the second expression returns 0."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19884
msgid ""
"To test whether the returned value is zero or some other number, we can use "
"the @code{zerop} function.  This function returns @code{t} if its argument, "
"which must be a number, is zero."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19889
#, no-wrap
msgid ""
"(zerop (% 7 5))\n"
"     @result{} nil\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19892
#, no-wrap
msgid ""
"(zerop (% 10 5))\n"
"     @result{} t\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19897
msgid ""
"Thus, the following expression will return @code{t} if the height of the "
"graph is evenly divisible by five:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:19900
#, no-wrap
msgid "(zerop (% height 5))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19905
msgid ""
"(The value of @code{height}, of course, can be found from @code{(apply 'max "
"numbers-list)}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19916
msgid ""
"On the other hand, if the value of @code{height} is not a multiple of five, "
"we want to reset the value to the next higher multiple of five.  This is "
"straightforward arithmetic using functions with which we are already "
"familiar.  First, we divide the value of @code{height} by five to determine "
"how many times five goes into the number.  Thus, five goes into twelve "
"twice.  If we add one to this quotient and multiply by five, we will obtain "
"the value of the next multiple of five that is larger than the height.  Five "
"goes into twelve twice.  Add one to two, and multiply by five; the result is "
"fifteen, which is the next multiple of five that is higher than twelve.  The "
"Lisp expression for this is:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:19919
#, no-wrap
msgid "(* (1+ (/ height 5)) 5)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19923
msgid "For example, if you evaluate the following, the result is 15:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:19926
#, no-wrap
msgid "(* (1+ (/ 12 5)) 5)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19933
msgid ""
"All through this discussion, we have been using `five' as the value for "
"spacing labels on the Y axis; but we may want to use some other value.  For "
"generality, we should replace `five' with a variable to which we can assign "
"a value.  The best name I can think of for this variable is "
"@code{Y-axis-label-spacing}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19937
msgid "Using this term, and an @code{if} expression, we produce the following:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19945
#, no-wrap
msgid ""
"(if (zerop (% height Y-axis-label-spacing))\n"
"    height\n"
"  ;; @r{else}\n"
"  (* (1+ (/ height Y-axis-label-spacing))\n"
"     Y-axis-label-spacing))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19953
msgid ""
"This expression returns the value of @code{height} itself if the height is "
"an even multiple of the value of the @code{Y-axis-label-spacing} or else it "
"computes and returns a value of @code{height} that is equal to the next "
"higher multiple of the value of the @code{Y-axis-label-spacing}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19957
msgid ""
"We can now include this expression in the @code{let} expression of the "
"@code{print-graph} function (after first setting the value of "
"@code{Y-axis-label-spacing}):"
msgstr ""

#. type: vindex
#: emacs-lisp-intro.texi:19957
#, no-wrap
msgid "Y-axis-label-spacing"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19963 emacs-lisp-intro.texi:21418
#, no-wrap
msgid ""
"(defvar Y-axis-label-spacing 5\n"
"  \"Number of lines from one Y axis label to next.\")\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19971
#, no-wrap
msgid ""
"@dots{}\n"
"(let* ((height (apply 'max numbers-list))\n"
"       (height-of-top-line\n"
"        (if (zerop (% height Y-axis-label-spacing))\n"
"            height\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:19978
#, no-wrap
msgid ""
"          ;; @r{else}\n"
"          (* (1+ (/ height Y-axis-label-spacing))\n"
"             Y-axis-label-spacing)))\n"
"       (symbol-width (length graph-blank))))\n"
"@dots{}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19987
msgid ""
"(Note use of the @code{let*} function: the initial value of height is "
"computed once by the @code{(apply 'max numbers-list)} expression and then "
"the resulting value of @code{height} is used to compute its final value.  "
"@xref{fwd-para let, , The @code{let*} expression}, for more about "
"@code{let*}.)"
msgstr ""

#. type: appendixsubsec
#: emacs-lisp-intro.texi:19989
#, no-wrap
msgid "Construct a Y Axis Element"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:19997
msgid ""
"When we print the vertical axis, we want to insert strings such as "
"@w{@samp{5 -}} and @w{@samp{10 - }} every five lines.  Moreover, we want the "
"numbers and dashes to line up, so shorter numbers must be padded with "
"leading spaces.  If some of the strings use two digit numbers, the strings "
"with single digit numbers must include a leading blank space before the "
"number."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:19998
#, no-wrap
msgid "number-to-string"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20004
msgid ""
"To figure out the length of the number, the @code{length} function is used.  "
"But the @code{length} function works only with a string, not with a number.  "
"So the number has to be converted from being a number to being a string.  "
"This is done with the @code{number-to-string} function.  For example,"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20009
#, no-wrap
msgid ""
"(length (number-to-string 35))\n"
"     @result{} 2\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20012
#, no-wrap
msgid ""
"(length (number-to-string 100))\n"
"     @result{} 3\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20018
msgid ""
"(@code{number-to-string} is also called @code{int-to-string}; you will see "
"this alternative name in various sources.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20022
msgid ""
"In addition, in each label, each number is followed by a string such as "
"@w{@samp{ - }}, which we will call the @code{Y-axis-tic} marker.  This "
"variable is defined with @code{defvar}:"
msgstr ""

#. type: vindex
#: emacs-lisp-intro.texi:20023
#, no-wrap
msgid "Y-axis-tic"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20028 emacs-lisp-intro.texi:21413
#, no-wrap
msgid ""
"(defvar Y-axis-tic \" - \"\n"
"   \"String that follows number in a Y axis label.\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20033
msgid ""
"The length of the Y label is the sum of the length of the Y axis tic mark "
"and the length of the number of the top of the graph."
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:20036
#, no-wrap
msgid "(length (concat (number-to-string height) Y-axis-tic)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20041
msgid ""
"This value will be calculated by the @code{print-graph} function in its "
"varlist as @code{full-Y-label-width} and passed on.  (Note that we did not "
"think to include this in the varlist when we first proposed it.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20049
msgid ""
"To make a complete vertical axis label, a tic mark is concatenated with a "
"number; and the two together may be preceded by one or more spaces depending "
"on how long the number is.  The label consists of three parts: the "
"(optional) leading spaces, the number, and the tic mark.  The function is "
"passed the value of the number for the specific row, and the value of the "
"width of the top line, which is calculated (just once) by "
"@code{print-graph}."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20057 emacs-lisp-intro.texi:21596
#, no-wrap
msgid ""
"(defun Y-axis-element (number full-Y-label-width)\n"
"  \"Construct a NUMBERed label element.\n"
"A numbered element looks like this `  5 - ',\n"
"and is padded as needed so all line up with\n"
"the element for the largest number.\"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20064 emacs-lisp-intro.texi:21603
#, no-wrap
msgid ""
"  (let* ((leading-spaces\n"
"         (- full-Y-label-width\n"
"            (length\n"
"             (concat (number-to-string number)\n"
"                     Y-axis-tic)))))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20070 emacs-lisp-intro.texi:21609
#, no-wrap
msgid ""
"    (concat\n"
"     (make-string leading-spaces ? )\n"
"     (number-to-string number)\n"
"     Y-axis-tic)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20075
msgid ""
"The @code{Y-axis-element} function concatenates together the leading spaces, "
"if any; the number, as a string; and the tic mark."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20079
msgid ""
"To figure out how many leading spaces the label will need, the function "
"subtracts the actual length of the label---the length of the number plus the "
"length of the tic mark---from the desired label width."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:20080
#, no-wrap
msgid "make-string"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20089
msgid ""
"Blank spaces are inserted using the @code{make-string} function.  This "
"function takes two arguments: the first tells it how long the string will be "
"and the second is a symbol for the character to insert, in a special "
"format.  The format is a question mark followed by a blank space, like this, "
"@samp{? }.  @xref{Character Type, , Character Type, elisp, The GNU Emacs "
"Lisp Reference Manual}, for a description of the syntax for characters.  (Of "
"course, you might want to replace the blank space by some other character "
"@dots{} You know what to do.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20093
msgid ""
"The @code{number-to-string} function is used in the concatenation "
"expression, to convert the number to a string that is concatenated with the "
"leading spaces and the tic mark."
msgstr ""

#. type: appendixsubsec
#: emacs-lisp-intro.texi:20095
#, no-wrap
msgid "Create a Y Axis Column"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20100
msgid ""
"The preceding functions provide all the tools needed to construct a function "
"that generates a list of numbered and blank strings to insert as the label "
"for the vertical axis:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20108
#, no-wrap
msgid ""
"(defun Y-axis-column (height width-of-label)\n"
"  \"Construct list of Y axis labels and blank strings.\n"
"For HEIGHT of line above base and WIDTH-OF-LABEL.\"\n"
"  (let (Y-axis)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20117
#, no-wrap
msgid ""
"    (while (> height 1)\n"
"      (if (zerop (% height Y-axis-label-spacing))\n"
"          ;; @r{Insert label.}\n"
"          (setq Y-axis\n"
"                (cons\n"
"                 (Y-axis-element height width-of-label)\n"
"                 Y-axis))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20129
#, no-wrap
msgid ""
"        ;; @r{Else, insert blanks.}\n"
"        (setq Y-axis\n"
"              (cons\n"
"               (make-string width-of-label ? )\n"
"               Y-axis)))\n"
"      (setq height (1- height)))\n"
"    ;; @r{Insert base line.}\n"
"    (setq Y-axis\n"
"          (cons (Y-axis-element 1 width-of-label) Y-axis))\n"
"    (nreverse Y-axis)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20139
msgid ""
"In this function, we start with the value of @code{height} and repetitively "
"subtract one from its value.  After each subtraction, we test to see whether "
"the value is an integral multiple of the @code{Y-axis-label-spacing}.  If it "
"is, we construct a numbered label using the @code{Y-axis-element} function; "
"if not, we construct a blank label using the @code{make-string} function.  "
"The base line consists of the number one followed by a tic mark."
msgstr ""

#. type: appendixsubsec
#: emacs-lisp-intro.texi:20142
#, no-wrap
msgid "The Not Quite Final Version of @code{print-Y-axis}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20146
msgid ""
"The list constructed by the @code{Y-axis-column} function is passed to the "
"@code{print-Y-axis} function, which inserts the list as a column."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20156
#, no-wrap
msgid ""
"(defun print-Y-axis (height full-Y-label-width)\n"
"  \"Insert Y axis using HEIGHT and FULL-Y-LABEL-WIDTH.\n"
"Height must be the maximum height of the graph.\n"
"Full width is the width of the highest label element.\"\n"
";; Value of height and full-Y-label-width\n"
";; are passed by `print-graph'.\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20165
#, no-wrap
msgid ""
"  (let ((start (point)))\n"
"    (insert-rectangle\n"
"     (Y-axis-column height full-Y-label-width))\n"
"    ;; @r{Place point ready for inserting graph.}\n"
"    (goto-char start)\n"
"    ;; @r{Move point forward by value of} full-Y-label-width\n"
"    (forward-char full-Y-label-width)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20172
msgid ""
"The @code{print-Y-axis} uses the @code{insert-rectangle} function to insert "
"the Y axis labels created by the @code{Y-axis-column} function.  In "
"addition, it places point at the correct position for printing the body of "
"the graph."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20174
msgid "You can test @code{print-Y-axis}:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20186
#, no-wrap
msgid ""
"Y-axis-label-spacing\n"
"Y-axis-tic\n"
"Y-axis-element\n"
"Y-axis-column\n"
"print-Y-axis\n"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:20194
#, no-wrap
msgid "(print-Y-axis 12 5)\n"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:20199 emacs-lisp-intro.texi:20545 emacs-lisp-intro.texi:20781
msgid ""
"Switch to the @file{*scratch*} buffer and place the cursor where you want "
"the axis labels to start."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:20209 emacs-lisp-intro.texi:20555 emacs-lisp-intro.texi:20791
msgid "Press @key{RET} to evaluate the expression."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20215
msgid ""
"Emacs will print labels vertically, the top one being @w{@samp{10 -@w{ }}}.  "
"(The @code{print-graph} function will pass the value of "
"@code{height-of-top-line}, which in this case will end up as 15, thereby "
"getting rid of what might appear as a bug.)"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:20219
#, no-wrap
msgid "Axis, print horizontal"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:20220
#, no-wrap
msgid "X axis printing"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:20221
#, no-wrap
msgid "Print horizontal axis"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:20222
#, no-wrap
msgid "Horizontal axis printing"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20226
msgid ""
"X axis labels are much like Y axis labels, except that the ticks are on a "
"line above the numbers.  Labels should look like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20231
#, no-wrap
msgid ""
"    |   |    |    |\n"
"    1   5   10   15\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20238
msgid ""
"The first tic is under the first column of the graph and is preceded by "
"several blank spaces.  These spaces provide room in rows above for the Y "
"axis labels.  The second, third, fourth, and subsequent ticks are all spaced "
"equally, according to the value of @code{X-axis-label-spacing}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20242
msgid ""
"The second row of the X axis consists of numbers, preceded by several blank "
"spaces and also separated according to the value of the variable "
"@code{X-axis-label-spacing}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20247
msgid ""
"The value of the variable @code{X-axis-label-spacing} should itself be "
"measured in units of @code{symbol-width}, since you may want to change the "
"width of the symbols that you are using to print the body of the graph "
"without changing the ways the graph is labeled."
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:20255
#, no-wrap
msgid "Similarities and differences"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20263
msgid ""
"The @code{print-X-axis} function is constructed in more or less the same "
"fashion as the @code{print-Y-axis} function except that it has two lines: "
"the line of tic marks and the numbers.  We will write a separate function to "
"print each line and then combine them within the @code{print-X-axis} "
"function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20265
msgid "This is a three step process:"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:20269
msgid ""
"Write a function to print the X axis tic marks, "
"@code{print-X-axis-tic-line}."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:20272
msgid "Write a function to print the X numbers, @code{print-X-axis-numbered-line}."
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:20277
msgid ""
"Write a function to print both lines, the @code{print-X-axis} function, "
"using @code{print-X-axis-tic-line} and @code{print-X-axis-numbered-line}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20284
msgid ""
"The first function should print the X axis tic marks.  We must specify the "
"tic marks themselves and their spacing:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20291 emacs-lisp-intro.texi:21430
#, no-wrap
msgid ""
"(defvar X-axis-label-spacing\n"
"  (if (boundp 'graph-blank)\n"
"      (* 5 (length graph-blank)) 5)\n"
"  \"Number of units from one X axis label to next.\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20302
msgid ""
"(Note that the value of @code{graph-blank} is set by another @code{defvar}.  "
"The @code{boundp} predicate checks whether it has already been set; "
"@code{boundp} returns @code{nil} if it has not.  If @code{graph-blank} were "
"unbound and we did not use this conditional construction, in a recent GNU "
"Emacs, we would enter the debugger and see an error message saying "
"@samp{@w{Debugger entered--Lisp error:} @w{(void-variable graph-blank)}}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20305
msgid "Here is the @code{defvar} for @code{X-axis-tic-symbol}:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20310 emacs-lisp-intro.texi:21423
#, no-wrap
msgid ""
"(defvar X-axis-tic-symbol \"|\"\n"
"  \"String to insert to point to a column in X axis.\")\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20315
msgid "The goal is to make a line that looks like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:20318
#, no-wrap
msgid "       |   |    |    |\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20322
msgid ""
"The first tic is indented so that it is under the first column, which is "
"indented to provide space for the Y axis labels."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20326
msgid ""
"A tic element consists of the blank spaces that stretch from one tic to the "
"next plus a tic symbol.  The number of blanks is determined by the width of "
"the tic symbol and the @code{X-axis-label-spacing}."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20343
#, no-wrap
msgid ""
";;; X-axis-tic-element\n"
"@dots{}\n"
"(concat\n"
" (make-string\n"
"  ;; @r{Make a string of blanks.}\n"
"  (-  (* symbol-width X-axis-label-spacing)\n"
"      (length X-axis-tic-symbol))\n"
"  ? )\n"
" ;; @r{Concatenate blanks with tic symbol.}\n"
" X-axis-tic-symbol)\n"
"@dots{}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20349
msgid ""
"Next, we determine how many blanks are needed to indent the first tic mark "
"to the first column of the graph.  This uses the value of "
"@code{full-Y-label-width} passed it by the @code{print-graph} function."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20353
msgid "The code to make @code{X-axis-leading-spaces} looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20360
#, no-wrap
msgid ""
";; X-axis-leading-spaces\n"
"@dots{}\n"
"(make-string full-Y-label-width ? )\n"
"@dots{}\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20366
msgid ""
"We also need to determine the length of the horizontal axis, which is the "
"length of the numbers list, and the number of ticks in the horizontal axis:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20372
#, no-wrap
msgid ""
";; X-length\n"
"@dots{}\n"
"(length numbers-list)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20378
#, no-wrap
msgid ""
";; tic-width\n"
"@dots{}\n"
"(* symbol-width X-axis-label-spacing)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20385
#, no-wrap
msgid ""
";; number-of-X-ticks\n"
"(if (zerop (% (X-length tic-width)))\n"
"    (/ (X-length tic-width))\n"
"  (1+ (/ (X-length tic-width))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20390
msgid "All this leads us directly to the function for printing the X axis tic line:"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:20391
#, no-wrap
msgid "print-X-axis-tic-line"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20399 emacs-lisp-intro.texi:21643
#, no-wrap
msgid ""
"(defun print-X-axis-tic-line\n"
"  (number-of-X-tics X-axis-leading-spaces X-axis-tic-element)\n"
"  \"Print ticks for X axis.\"\n"
"    (insert X-axis-leading-spaces)\n"
"    (insert X-axis-tic-symbol)  ; @r{Under first column.}\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20409 emacs-lisp-intro.texi:21653
#, no-wrap
msgid ""
"    ;; @r{Insert second tic in the right spot.}\n"
"    (insert (concat\n"
"             (make-string\n"
"              (-  (* symbol-width X-axis-label-spacing)\n"
"                  ;; @r{Insert white space up to second tic symbol.}\n"
"                  (* 2 (length X-axis-tic-symbol)))\n"
"              ? )\n"
"             X-axis-tic-symbol))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20415 emacs-lisp-intro.texi:21659
#, no-wrap
msgid ""
"    ;; @r{Insert remaining ticks.}\n"
"    (while (> number-of-X-tics 1)\n"
"      (insert X-axis-tic-element)\n"
"      (setq number-of-X-tics (1- number-of-X-tics))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20419
msgid "The line of numbers is equally straightforward:"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20422
msgid "First, we create a numbered element with blank spaces before each number:"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:20423
#, no-wrap
msgid "X-axis-element"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20433 emacs-lisp-intro.texi:21671
#, no-wrap
msgid ""
"(defun X-axis-element (number)\n"
"  \"Construct a numbered X axis element.\"\n"
"  (let ((leading-spaces\n"
"         (-  (* symbol-width X-axis-label-spacing)\n"
"             (length (number-to-string number)))))\n"
"    (concat (make-string leading-spaces ? )\n"
"            (number-to-string number))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20438
msgid ""
"Next, we create the function to print the numbered line, starting with the "
"number ``1'' under the first column:"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:20439
#, no-wrap
msgid "print-X-axis-numbered-line"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20448
#, no-wrap
msgid ""
"(defun print-X-axis-numbered-line\n"
"  (number-of-X-tics X-axis-leading-spaces)\n"
"  \"Print line of X-axis numbers\"\n"
"  (let ((number X-axis-label-spacing))\n"
"    (insert X-axis-leading-spaces)\n"
"    (insert \"1\")\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20456
#, no-wrap
msgid ""
"    (insert (concat\n"
"             (make-string\n"
"              ;; @r{Insert white space up to next number.}\n"
"              (-  (* symbol-width X-axis-label-spacing) 2)\n"
"              ? )\n"
"             (number-to-string number)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20464
#, no-wrap
msgid ""
"    ;; @r{Insert remaining numbers.}\n"
"    (setq number (+ number X-axis-label-spacing))\n"
"    (while (> number-of-X-tics 1)\n"
"      (insert (X-axis-element number))\n"
"      (setq number (+ number X-axis-label-spacing))\n"
"      (setq number-of-X-tics (1- number-of-X-tics)))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20470
msgid ""
"Finally, we need to write the @code{print-X-axis} that uses "
"@code{print-X-axis-tic-line} and @code{print-X-axis-numbered-line}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20475
msgid ""
"The function must determine the local values of the variables used by both "
"@code{print-X-axis-tic-line} and @code{print-X-axis-numbered-line}, and then "
"it must call them.  Also, it must print the carriage return that separates "
"the two lines."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20478
msgid ""
"The function consists of a varlist that specifies five local variables, and "
"calls to each of the two line printing functions:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20486
#, no-wrap
msgid ""
"(defun print-X-axis (numbers-list)\n"
"  \"Print X axis labels to length of NUMBERS-LIST.\"\n"
"  (let* ((leading-spaces\n"
"          (make-string full-Y-label-width ? ))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20491
#, no-wrap
msgid ""
"       ;; symbol-width @r{is provided by} graph-body-print\n"
"       (tic-width (* symbol-width X-axis-label-spacing))\n"
"       (X-length (length numbers-list))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20496
#, no-wrap
msgid ""
"       (X-tic\n"
"        (concat\n"
"         (make-string\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20502
#, no-wrap
msgid ""
"          ;; @r{Make a string of blanks.}\n"
"          (-  (* symbol-width X-axis-label-spacing)\n"
"              (length X-axis-tic-symbol))\n"
"          ? )\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20506
#, no-wrap
msgid ""
"         ;; @r{Concatenate blanks with tic symbol.}\n"
"         X-axis-tic-symbol))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20512
#, no-wrap
msgid ""
"       (tic-number\n"
"        (if (zerop (% X-length tic-width))\n"
"            (/ X-length tic-width)\n"
"          (1+ (/ X-length tic-width)))))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20517
#, no-wrap
msgid ""
"    (print-X-axis-tic-line tic-number leading-spaces X-tic)\n"
"    (insert \"\\n\")\n"
"    (print-X-axis-numbered-line tic-number leading-spaces)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20522
msgid "You can test @code{print-X-axis}:"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:20528
msgid ""
"Install @code{X-axis-tic-symbol}, @code{X-axis-label-spacing}, "
"@code{print-X-axis-tic-line}, as well as @code{X-axis-element}, "
"@code{print-X-axis-numbered-line}, and @code{print-X-axis}."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20539
#, no-wrap
msgid ""
"(progn\n"
" (let ((full-Y-label-width 5)\n"
"       (symbol-width 1))\n"
"   (print-X-axis\n"
"    '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))))\n"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:20552 emacs-lisp-intro.texi:20788
msgid "Yank the test expression into the minibuffer with @kbd{C-y} (@code{yank)}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20559
msgid "Emacs will print the horizontal axis like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20565
#, no-wrap
msgid ""
"     |   |    |    |    |\n"
"     1   5   10   15   20\n"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:20570
#, no-wrap
msgid "Printing the whole graph"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:20571
#, no-wrap
msgid "Whole graph printing"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:20572
#, no-wrap
msgid "Graph, printing all"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20575
msgid "Now we are nearly ready to print the whole graph."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20579
msgid ""
"The function to print the graph with the proper labels follows the outline "
"we created earlier (@pxref{Full Graph, , A Graph with Labeled Axes}), but "
"with additions."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20582
msgid "Here is the outline:"
msgstr ""

#. type: unnumberedsubsec
#: emacs-lisp-intro.texi:20609
#, no-wrap
msgid "Changes for the Final Version"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20617
msgid ""
"The final version is different from what we planned in two ways: first, it "
"contains additional values calculated once in the varlist; second, it "
"carries an option to specify the labels' increment per row.  This latter "
"feature turns out to be essential; otherwise, a graph may have more rows "
"than fit on a display or on a sheet of paper."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20622
msgid ""
"This new feature requires a change to the @code{Y-axis-column} function, to "
"add @code{vertical-step} to it.  The function looks like this:"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:20623
#, no-wrap
msgid "Y-axis-column @r{Final version.}"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20636
#, no-wrap
msgid ""
";;; @r{Final version.}\n"
"(defun Y-axis-column\n"
"  (height width-of-label &optional vertical-step)\n"
"  \"Construct list of labels for Y axis.\n"
"HEIGHT is maximum height of graph.\n"
"WIDTH-OF-LABEL is maximum width of label.\n"
"VERTICAL-STEP, an option, is a positive integer\n"
"that specifies how much a Y axis label increments\n"
"for each line.  For example, a step of 5 means\n"
"that each line is five units of the graph.\"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20642
#, no-wrap
msgid ""
"  (let (Y-axis\n"
"        (number-per-line (or vertical-step 1)))\n"
"    (while (> height 1)\n"
"      (if (zerop (% height Y-axis-label-spacing))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20651
#, no-wrap
msgid ""
"          ;; @r{Insert label.}\n"
"          (setq Y-axis\n"
"                (cons\n"
"                 (Y-axis-element\n"
"                  (* height number-per-line)\n"
"                  width-of-label)\n"
"                 Y-axis))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20659 emacs-lisp-intro.texi:21735
#, no-wrap
msgid ""
"        ;; @r{Else, insert blanks.}\n"
"        (setq Y-axis\n"
"              (cons\n"
"               (make-string width-of-label ? )\n"
"               Y-axis)))\n"
"      (setq height (1- height)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20667 emacs-lisp-intro.texi:21743
#, no-wrap
msgid ""
"    ;; @r{Insert base line.}\n"
"    (setq Y-axis (cons (Y-axis-element\n"
"                        (or vertical-step 1)\n"
"                        width-of-label)\n"
"                       Y-axis))\n"
"    (nreverse Y-axis)))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20673
msgid ""
"The values for the maximum height of graph and the width of a symbol are "
"computed by @code{print-graph} in its @code{let} expression; so "
"@code{graph-body-print} must be changed to accept them."
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:20674
#, no-wrap
msgid "graph-body-print @r{Final version.}"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20683
#, no-wrap
msgid ""
";;; @r{Final version.}\n"
"(defun graph-body-print (numbers-list height symbol-width)\n"
"  \"Print a bar graph of the NUMBERS-LIST.\n"
"The numbers-list consists of the Y-axis values.\n"
"HEIGHT is maximum height of graph.\n"
"SYMBOL-WIDTH is number of each column.\"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20692 emacs-lisp-intro.texi:21690
#, no-wrap
msgid ""
"  (let (from-position)\n"
"    (while numbers-list\n"
"      (setq from-position (point))\n"
"      (insert-rectangle\n"
"       (column-of-graph height (car numbers-list)))\n"
"      (goto-char from-position)\n"
"      (forward-char symbol-width)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20700 emacs-lisp-intro.texi:21698
#, no-wrap
msgid ""
"      ;; @r{Draw graph column by column.}\n"
"      (sit-for 0)\n"
"      (setq numbers-list (cdr numbers-list)))\n"
"    ;; @r{Place point for X axis labels.}\n"
"    (forward-line height)\n"
"    (insert \"\\n\")))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20705
msgid "Finally, the code for the @code{print-graph} function:"
msgstr ""

#. type: findex
#: emacs-lisp-intro.texi:20706
#, no-wrap
msgid "print-graph @r{Final version.}"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20714
#, no-wrap
msgid ""
";;; @r{Final version.}\n"
"(defun print-graph\n"
"  (numbers-list &optional vertical-step)\n"
"  \"Print labeled bar graph of the NUMBERS-LIST.\n"
"The numbers-list consists of the Y-axis values.\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20721
#, no-wrap
msgid ""
"Optionally, VERTICAL-STEP, a positive integer,\n"
"specifies how much a Y axis label increments for\n"
"each line.  For example, a step of 5 means that\n"
"each row is five units.\"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20727
#, no-wrap
msgid ""
"  (let* ((symbol-width (length graph-blank))\n"
"         ;; @code{height} @r{is both the largest number}\n"
"         ;; @r{and the number with the most digits.}\n"
"         (height (apply 'max numbers-list))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20735 emacs-lisp-intro.texi:21360 emacs-lisp-intro.texi:21861
#, no-wrap
msgid ""
"         (height-of-top-line\n"
"          (if (zerop (% height Y-axis-label-spacing))\n"
"              height\n"
"            ;; @r{else}\n"
"            (* (1+ (/ height Y-axis-label-spacing))\n"
"               Y-axis-label-spacing)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20740
#, no-wrap
msgid ""
"         (vertical-step (or vertical-step 1))\n"
"         (full-Y-label-width\n"
"          (length\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20746
#, no-wrap
msgid ""
"           (concat\n"
"            (number-to-string\n"
"             (* height-of-top-line vertical-step))\n"
"            Y-axis-tic))))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20751
#, no-wrap
msgid ""
"    (print-Y-axis\n"
"     height-of-top-line full-Y-label-width vertical-step)\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20756
#, no-wrap
msgid ""
"    (graph-body-print\n"
"     numbers-list height-of-top-line symbol-width)\n"
"    (print-X-axis numbers-list)))\n"
msgstr ""

#. type: appendixsubsec
#: emacs-lisp-intro.texi:20760
#, no-wrap
msgid "Testing @code{print-graph}"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20764
msgid "We can test the @code{print-graph} function with a short list of numbers:"
msgstr ""

#. type: enumerate
#: emacs-lisp-intro.texi:20770
msgid ""
"Install the final versions of @code{Y-axis-column}, @code{graph-body-print}, "
"and @code{print-graph} (in addition to the rest of the code.)"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:20776
#, no-wrap
msgid "(print-graph '(3 2 5 6 7 5 3 4 6 4 3 2 1))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20795
msgid "Emacs will print a graph that looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20799
#, no-wrap
msgid ""
"10 -\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20808
#, no-wrap
msgid ""
"         *\n"
"        **   *\n"
" 5 -   ****  *\n"
"       **** ***\n"
"     * *********\n"
"     ************\n"
" 1 - *************\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20811 emacs-lisp-intro.texi:20841
#, no-wrap
msgid ""
"     |   |    |    |\n"
"     1   5   10   15\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20817
msgid ""
"On the other hand, if you pass @code{print-graph} a @code{vertical-step} "
"value of 2, by evaluating this expression:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:20820
#, no-wrap
msgid "(print-graph '(3 2 5 6 7 5 3 4 6 4 3 2 1) 2)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20825
msgid "The graph looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20829
#, no-wrap
msgid ""
"20 -\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20838
#, no-wrap
msgid ""
"         *\n"
"        **   *\n"
"10 -   ****  *\n"
"       **** ***\n"
"     * *********\n"
"     ************\n"
" 2 - *************\n"
"\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20848
msgid ""
"(A question: is the `2' on the bottom of the vertical axis a bug or a "
"feature? If you think it is a bug, and should be a `1' instead, (or even a "
"`0'), you can modify the sources.)"
msgstr ""

#. type: appendixsubsec
#: emacs-lisp-intro.texi:20850
#, no-wrap
msgid "Graphing Numbers of Words and Symbols"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20856
msgid ""
"Now for the graph for which all this code was written: a graph that shows "
"how many function definitions contain fewer than 10 words and symbols, how "
"many contain between 10 and 19 words and symbols, how many contain between "
"20 and 29 words and symbols, and so on."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20859
msgid ""
"This is a multi-step process.  First make sure you have loaded all the "
"requisite code."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20864
msgid ""
"It is a good idea to reset the value of @code{top-of-ranges} in case you "
"have set it to some different value.  You can evaluate the following:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20874
#, no-wrap
msgid ""
"(setq top-of-ranges\n"
" '(10  20  30  40  50\n"
"   60  70  80  90 100\n"
"  110 120 130 140 150\n"
"  160 170 180 190 200\n"
"  210 220 230 240 250\n"
"  260 270 280 290 300)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20879
msgid "Next create a list of the number of words and symbols in each range."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20883
msgid "Evaluate the following:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20894
#, no-wrap
msgid ""
"(setq list-for-graph\n"
"       (defuns-per-range\n"
"         (sort\n"
"          (recursive-lengths-list-many-files\n"
"           (directory-files \"/usr/local/emacs/lisp\"\n"
"                            t \".+el$\"))\n"
"          '<)\n"
"         top-of-ranges))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20901
msgid ""
"On my old machine, this took about an hour.  It looked though 303 Lisp files "
"in my copy of Emacs version 19.23.  After all that computing, the "
"@code{list-for-graph} had this value:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20906
#, no-wrap
msgid ""
"(537 1027 955 785 594 483 349 292 224 199 166 120 116 99\n"
"90 80 67 48 52 45 41 33 28 26 25 20 12 28 11 13 220)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20914
msgid ""
"This means that my copy of Emacs had 537 function definitions with fewer "
"than 10 words or symbols in them, 1,027 function definitions with 10 to 19 "
"words or symbols in them, 955 function definitions with 20 to 29 words or "
"symbols in them, and so on."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20917
msgid ""
"Clearly, just by looking at this list we can see that most function "
"definitions contain ten to thirty words and symbols."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20922
msgid ""
"Now for printing.  We do @emph{not} want to print a graph that is 1,030 "
"lines high @dots{} Instead, we should print a graph that is fewer than "
"twenty-five lines high.  A graph that height can be displayed on almost any "
"monitor, and easily printed on a sheet of paper."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20925
msgid ""
"This means that each value in @code{list-for-graph} must be reduced to "
"one-fiftieth its present value."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20928
msgid ""
"Here is a short function to do just that, using two functions we have not "
"yet seen, @code{mapcar} and @code{lambda}."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20934
#, no-wrap
msgid ""
"(defun one-fiftieth (full-range)\n"
"  \"Return list, each number one-fiftieth of previous.\"\n"
" (mapcar (lambda (arg) (/ arg 50)) full-range))\n"
msgstr ""

#. type: appendixsubsec
#: emacs-lisp-intro.texi:20938
#, no-wrap
msgid "A @code{lambda} Expression: Useful Anonymity"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:20939
#, no-wrap
msgid "Anonymous function"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20945
msgid ""
"@code{lambda} is the symbol for an anonymous function, a function without a "
"name.  Every time you use an anonymous function, you need to include its "
"whole body."
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:20952 emacs-lisp-intro.texi:21144
#, no-wrap
msgid "(lambda (arg) (/ arg 50))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20957
msgid ""
"is a function definition that says `return the value resulting from dividing "
"whatever is passed to me as @code{arg} by 50'."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20963
msgid ""
"Earlier, for example, we had a function @code{multiply-by-seven}; it "
"multiplied its argument by 7.  This function is similar, except it divides "
"its argument by 50; and, it has no name.  The anonymous equivalent of "
"@code{multiply-by-seven} is:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:20966
#, no-wrap
msgid "(lambda (number) (* 7 number))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20970
msgid "(@xref{defun, , The @code{defun} Special Form}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:20974
msgid "If we want to multiply 3 by 7, we can write:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:20987 emacs-lisp-intro.texi:21009
#, no-wrap
msgid ""
"(multiply-by-seven 3)\n"
" \\_______________/ ^\n"
"         |         |\n"
"      function  argument\n"
msgstr ""

#. type: center
#: emacs-lisp-intro.texi:20993
#, no-wrap
msgid "@image{lambda-1}"
msgstr ""

#. type: tex
#: emacs-lisp-intro.texi:20998
#, no-wrap
msgid ""
"%%%% old method of including an image\n"
"% \\input /usr/local/lib/tex/inputs/psfig.tex\n"
"% \\centerline{\\psfig{figure=/usr/local/lib/emacs/man/lambda-1.eps}}\n"
"% \\catcode`\\@=0 %\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21016
msgid "This expression returns 21."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21020
msgid "Similarly, we can write:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21029 emacs-lisp-intro.texi:21051
#, no-wrap
msgid ""
"((lambda (number) (* 7 number)) 3)\n"
" \\____________________________/ ^\n"
"               |                |\n"
"      anonymous function     argument\n"
msgstr ""

#. type: center
#: emacs-lisp-intro.texi:21035
#, no-wrap
msgid "@image{lambda-2}"
msgstr ""

#. type: tex
#: emacs-lisp-intro.texi:21040
#, no-wrap
msgid ""
"%%%% old method of including an image\n"
"% \\input /usr/local/lib/tex/inputs/psfig.tex\n"
"% \\centerline{\\psfig{figure=/usr/local/lib/emacs/man/lambda-2.eps}}\n"
"% \\catcode`\\@=0 %\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21059
msgid "If we want to divide 100 by 50, we can write:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21068 emacs-lisp-intro.texi:21090
#, no-wrap
msgid ""
"((lambda (arg) (/ arg 50)) 100)\n"
" \\______________________/  \\_/\n"
"             |              |\n"
"    anonymous function   argument\n"
msgstr ""

#. type: center
#: emacs-lisp-intro.texi:21074
#, no-wrap
msgid "@image{lambda-3}"
msgstr ""

#. type: tex
#: emacs-lisp-intro.texi:21079
#, no-wrap
msgid ""
"%%%% old method of including an image\n"
"% \\input /usr/local/lib/tex/inputs/psfig.tex\n"
"% \\centerline{\\psfig{figure=/usr/local/lib/emacs/man/lambda-3.eps}}\n"
"% \\catcode`\\@=0 %\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21098
msgid ""
"This expression returns 2.  The 100 is passed to the function, which divides "
"that number by 50."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21102
msgid ""
"@xref{Lambda Expressions, , Lambda Expressions, elisp, The GNU Emacs Lisp "
"Reference Manual}, for more about @code{lambda}.  Lisp and lambda "
"expressions derive from the Lambda Calculus."
msgstr ""

#. type: appendixsubsec
#: emacs-lisp-intro.texi:21104
#, no-wrap
msgid "The @code{mapcar} Function"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21110
msgid ""
"@code{mapcar} is a function that calls its first argument with each element "
"of its second argument, in turn.  The second argument must be a sequence."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21117
msgid ""
"The @samp{map} part of the name comes from the mathematical phrase, `mapping "
"over a domain', meaning to apply a function to each of the elements in a "
"domain.  The mathematical phrase is based on the metaphor of a surveyor "
"walking, one step at a time, over an area he is mapping.  And @samp{car}, of "
"course, comes from the Lisp notion of the first of a list."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21126
#, no-wrap
msgid ""
"(mapcar '1+ '(2 4 6))\n"
"     @result{} (3 5 7)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21132
msgid ""
"The function @code{1+} which adds one to its argument, is executed on "
"@emph{each} element of the list, and a new list is returned."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21137
msgid ""
"Contrast this with @code{apply}, which applies its first argument to all the "
"remaining.  (@xref{Readying a Graph, , Readying a Graph}, for a explanation "
"of @code{apply}.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21141
msgid ""
"In the definition of @code{one-fiftieth}, the first argument is the "
"anonymous function:"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21149
msgid ""
"and the second argument is @code{full-range}, which will be bound to "
"@code{list-for-graph}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21152
msgid "The whole expression looks like this:"
msgstr ""

#. type: smallexample
#: emacs-lisp-intro.texi:21155
#, no-wrap
msgid "(mapcar (lambda (arg) (/ arg 50)) full-range))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21159
msgid ""
"@xref{Mapping Functions, , Mapping Functions, elisp, The GNU Emacs Lisp "
"Reference Manual}, for more about @code{mapcar}."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21163
msgid ""
"Using the @code{one-fiftieth} function, we can generate a list in which each "
"element is one-fiftieth the size of the corresponding element in "
"@code{list-for-graph}."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21168
#, no-wrap
msgid ""
"(setq fiftieth-list-for-graph\n"
"      (one-fiftieth list-for-graph))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21173
msgid "The resulting list looks like this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21178
#, no-wrap
msgid ""
"(10 20 19 15 11 9 6 5 4 3 3 2 2\n"
"1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 4)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21186
msgid ""
"This, we are almost ready to print! (We also notice the loss of information: "
"many of the higher ranges are 0, meaning that fewer than 50 defuns had that "
"many words or symbols---but not necessarily meaning that none had that many "
"words or symbols.)"
msgstr ""

#. type: appendixsubsec
#: emacs-lisp-intro.texi:21188
#, no-wrap
msgid "Another Bug @dots{} Most Insidious"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:21189
#, no-wrap
msgid "Bug, most insidious type"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:21190
#, no-wrap
msgid "Insidious type of bug"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21197
msgid ""
"I said `almost ready to print'! Of course, there is a bug in the "
"@code{print-graph} function @dots{} It has a @code{vertical-step} option, "
"but not a @code{horizontal-step} option.  The @code{top-of-range} scale goes "
"from 10 to 300 by tens.  But the @code{print-graph} function will print only "
"by ones."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21206
msgid ""
"This is a classic example of what some consider the most insidious type of "
"bug, the bug of omission.  This is not the kind of bug you can find by "
"studying the code, for it is not in the code; it is an omitted feature.  "
"Your best actions are to try your program early and often; and try to "
"arrange, as much as you can, to write code that is easy to understand and "
"easy to change.  Try to be aware, whenever you can, that whatever you have "
"written, @emph{will} be rewritten, if not soon, eventually.  A hard maxim to "
"follow."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21212
msgid ""
"It is the @code{print-X-axis-numbered-line} function that needs the work; "
"and then the @code{print-X-axis} and the @code{print-graph} functions need "
"to be adapted.  Not much needs to be done; there is one nicety: the numbers "
"ought to line up under the tic marks.  This takes a little thought."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21215
msgid "Here is the corrected @code{print-X-axis-numbered-line}:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21224 emacs-lisp-intro.texi:21754
#, no-wrap
msgid ""
"(defun print-X-axis-numbered-line\n"
"  (number-of-X-tics X-axis-leading-spaces\n"
"   &optional horizontal-step)\n"
"  \"Print line of X-axis numbers\"\n"
"  (let ((number X-axis-label-spacing)\n"
"        (horizontal-step (or horizontal-step 1)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21233
#, no-wrap
msgid ""
"    (insert X-axis-leading-spaces)\n"
"    ;; @r{Delete extra leading spaces.}\n"
"    (delete-char\n"
"     (- (1-\n"
"         (length (number-to-string horizontal-step)))))\n"
"    (insert (concat\n"
"             (make-string\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21245
#, no-wrap
msgid ""
"              ;; @r{Insert white space.}\n"
"              (-  (* symbol-width\n"
"                     X-axis-label-spacing)\n"
"                  (1-\n"
"                   (length\n"
"                    (number-to-string horizontal-step)))\n"
"                  2)\n"
"              ? )\n"
"             (number-to-string\n"
"              (* number horizontal-step))))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21254
#, no-wrap
msgid ""
"    ;; @r{Insert remaining numbers.}\n"
"    (setq number (+ number X-axis-label-spacing))\n"
"    (while (> number-of-X-tics 1)\n"
"      (insert (X-axis-element\n"
"               (* number horizontal-step)))\n"
"      (setq number (+ number X-axis-label-spacing))\n"
"      (setq number-of-X-tics (1- number-of-X-tics)))))\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21262
msgid ""
"If you are reading this in Info, you can see the new versions of "
"@code{print-X-axis} @code{print-graph} and evaluate them.  If you are "
"reading this in a printed book, you can see the changed lines here (the full "
"text is too much to print)."
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21270
#, no-wrap
msgid ""
"(defun print-X-axis (numbers-list horizontal-step)\n"
"  @dots{}\n"
"    (print-X-axis-numbered-line\n"
"     tic-number leading-spaces horizontal-step))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21280
#, no-wrap
msgid ""
"(defun print-graph\n"
"  (numbers-list\n"
"   &optional vertical-step horizontal-step)\n"
"  @dots{}\n"
"    (print-X-axis numbers-list horizontal-step))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21292 emacs-lisp-intro.texi:21785
#, no-wrap
msgid ""
"(defun print-X-axis (numbers-list horizontal-step)\n"
"  \"Print X axis labels to length of NUMBERS-LIST.\n"
"Optionally, HORIZONTAL-STEP, a positive integer,\n"
"specifies how much an X  axis label increments for\n"
"each column.\"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21301 emacs-lisp-intro.texi:21794
#, no-wrap
msgid ""
";; Value of symbol-width and full-Y-label-width\n"
";; are passed by `print-graph'.\n"
"  (let* ((leading-spaces\n"
"          (make-string full-Y-label-width ? ))\n"
"       ;; symbol-width @r{is provided by} graph-body-print\n"
"       (tic-width (* symbol-width X-axis-label-spacing))\n"
"       (X-length (length numbers-list))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21310 emacs-lisp-intro.texi:21803
#, no-wrap
msgid ""
"       (X-tic\n"
"        (concat\n"
"         (make-string\n"
"          ;; @r{Make a string of blanks.}\n"
"          (-  (* symbol-width X-axis-label-spacing)\n"
"              (length X-axis-tic-symbol))\n"
"          ? )\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21318 emacs-lisp-intro.texi:21811
#, no-wrap
msgid ""
"         ;; @r{Concatenate blanks with tic symbol.}\n"
"         X-axis-tic-symbol))\n"
"       (tic-number\n"
"        (if (zerop (% X-length tic-width))\n"
"            (/ X-length tic-width)\n"
"          (1+ (/ X-length tic-width)))))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21326 emacs-lisp-intro.texi:21819
#, no-wrap
msgid ""
"    (print-X-axis-tic-line\n"
"     tic-number leading-spaces X-tic)\n"
"    (insert \"\\n\")\n"
"    (print-X-axis-numbered-line\n"
"     tic-number leading-spaces horizontal-step)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21335 emacs-lisp-intro.texi:21836
#, no-wrap
msgid ""
"(defun print-graph\n"
"  (numbers-list &optional vertical-step horizontal-step)\n"
"  \"Print labeled bar graph of the NUMBERS-LIST.\n"
"The numbers-list consists of the Y-axis values.\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21342 emacs-lisp-intro.texi:21843
#, no-wrap
msgid ""
"Optionally, VERTICAL-STEP, a positive integer,\n"
"specifies how much a Y axis label increments for\n"
"each line.  For example, a step of 5 means that\n"
"each row is five units.\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21352 emacs-lisp-intro.texi:21853
#, no-wrap
msgid ""
"Optionally, HORIZONTAL-STEP, a positive integer,\n"
"specifies how much an X  axis label increments for\n"
"each column.\"\n"
"  (let* ((symbol-width (length graph-blank))\n"
"         ;; @code{height} @r{is both the largest number}\n"
"         ;; @r{and the number with the most digits.}\n"
"         (height (apply 'max numbers-list))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21369 emacs-lisp-intro.texi:21870
#, no-wrap
msgid ""
"         (vertical-step (or vertical-step 1))\n"
"         (full-Y-label-width\n"
"          (length\n"
"           (concat\n"
"            (number-to-string\n"
"             (* height-of-top-line vertical-step))\n"
"            Y-axis-tic))))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21376 emacs-lisp-intro.texi:21878
#, no-wrap
msgid ""
"    (print-Y-axis\n"
"     height-of-top-line full-Y-label-width vertical-step)\n"
"    (graph-body-print\n"
"        numbers-list height-of-top-line symbol-width)\n"
"    (print-X-axis numbers-list horizontal-step)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21396
#, no-wrap
msgid ""
"(defvar top-of-ranges\n"
" '(10  20  30  40  50\n"
"   60  70  80  90 100\n"
"  110 120 130 140 150\n"
"  160 170 180 190 200\n"
"  210 220 230 240 250)\n"
" \"List specifying ranges for `defuns-per-range'.\")\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21471
#, no-wrap
msgid ""
"  (message \"Working on `%s' ... \" filename)\n"
"  (save-excursion\n"
"    (let ((buffer (find-file-noselect filename))\n"
"          (lengths-list))\n"
"      (set-buffer buffer)\n"
"      (setq buffer-read-only t)\n"
"      (widen)\n"
"      (goto-char (point-min))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21479
#, no-wrap
msgid ""
"      (while (re-search-forward \"^(defun\" nil t)\n"
"        (setq lengths-list\n"
"              (cons (count-words-in-defun) lengths-list)))\n"
"      (kill-buffer buffer)\n"
"      lengths-list)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21492
#, no-wrap
msgid ""
"(defun lengths-list-many-files (list-of-files)\n"
"  \"Return list of lengths of defuns in LIST-OF-FILES.\"\n"
"  (let (lengths-list)\n"
";;; @r{true-or-false-test}\n"
"    (while list-of-files\n"
"      (setq lengths-list\n"
"            (append\n"
"             lengths-list\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21501
#, no-wrap
msgid ""
";;; @r{Generate a lengths' list.}\n"
"             (lengths-list-file\n"
"              (expand-file-name (car list-of-files)))))\n"
";;; @r{Make files' list shorter.}\n"
"      (setq list-of-files (cdr list-of-files)))\n"
";;; @r{Return final value of lengths' list.}\n"
"    lengths-list))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21516
#, no-wrap
msgid ""
"    ;; @r{Outer loop.}\n"
"    (while top-of-ranges\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21522
#, no-wrap
msgid ""
"      ;; @r{Inner loop.}\n"
"      (while (and\n"
"              ;; @r{Need number for numeric test.}\n"
"              (car sorted-lengths)\n"
"              (< (car sorted-lengths) top-of-range))\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21526
#, no-wrap
msgid ""
"        ;; @r{Count number of definitions within current range.}\n"
"        (setq number-within-range (1+ number-within-range))\n"
"        (setq sorted-lengths (cdr sorted-lengths)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21530
#, no-wrap
msgid ""
"      ;; @r{Exit inner loop but remain within outer loop.}\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21534
#, no-wrap
msgid ""
"      (setq defuns-per-range-list\n"
"            (cons number-within-range defuns-per-range-list))\n"
"      (setq number-within-range 0)      ; @r{Reset count to zero.}\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21548
#, no-wrap
msgid ""
"    ;; @r{Exit outer loop and count the number of defuns larger than}\n"
"    ;; @r{  the largest top-of-range value.}\n"
"    (setq defuns-per-range-list\n"
"          (cons\n"
"           (length sorted-lengths)\n"
"           defuns-per-range-list))\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21564
#, no-wrap
msgid ""
"(defun column-of-graph (max-graph-height actual-height)\n"
"  \"Return list of MAX-GRAPH-HEIGHT strings;\n"
"ACTUAL-HEIGHT are graph-symbols.\n"
"The graph-symbols are contiguous entries at the end\n"
"of the list.\n"
"The list will be inserted as one column of a graph.\n"
"The strings are either graph-blank or graph-symbol.\"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21570
#, no-wrap
msgid ""
"  (let ((insert-list nil)\n"
"        (number-of-top-blanks\n"
"         (- max-graph-height actual-height)))\n"
"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21620
#, no-wrap
msgid ""
"(defun print-Y-axis\n"
"  (height full-Y-label-width &optional vertical-step)\n"
"  \"Insert Y axis by HEIGHT and FULL-Y-LABEL-WIDTH.\n"
"Height must be the  maximum height of the graph.\n"
"Full width is the width of the highest label element.\n"
"Optionally, print according to VERTICAL-STEP.\"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21627
#, no-wrap
msgid ""
";; Value of height and full-Y-label-width\n"
";; are passed by `print-graph'.\n"
"  (let ((start (point)))\n"
"    (insert-rectangle\n"
"     (Y-axis-column height full-Y-label-width vertical-step))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21633
#, no-wrap
msgid ""
"    ;; @r{Place point ready for inserting graph.}\n"
"    (goto-char start)\n"
"    ;; @r{Move point forward by value of} full-Y-label-width\n"
"    (forward-char full-Y-label-width)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21681
#, no-wrap
msgid ""
"(defun graph-body-print (numbers-list height symbol-width)\n"
"  \"Print a bar graph of the NUMBERS-LIST.\n"
"The numbers-list consists of the Y-axis values.\n"
"HEIGHT is maximum height of graph.\n"
"SYMBOL-WIDTH is number of each column.\"\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21708
#, no-wrap
msgid ""
"(defun Y-axis-column\n"
"  (height width-of-label &optional vertical-step)\n"
"  \"Construct list of labels for Y axis.\n"
"HEIGHT is maximum height of graph.\n"
"WIDTH-OF-LABEL is maximum width of label.\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21716
#, no-wrap
msgid ""
"VERTICAL-STEP, an option, is a positive integer\n"
"that specifies how much a Y axis label increments\n"
"for each line.  For example, a step of 5 means\n"
"that each line is five units of the graph.\"\n"
"  (let (Y-axis\n"
"        (number-per-line (or vertical-step 1)))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21727
#, no-wrap
msgid ""
"    (while (> height 1)\n"
"      (if (zerop (% height Y-axis-label-spacing))\n"
"          ;; @r{Insert label.}\n"
"          (setq Y-axis\n"
"                (cons\n"
"                 (Y-axis-element\n"
"                  (* height number-per-line)\n"
"                  width-of-label)\n"
"                 Y-axis))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21767
#, no-wrap
msgid ""
"    (insert X-axis-leading-spaces)\n"
"    ;; line up number\n"
"    (delete-char (- (1- (length (number-to-string horizontal-step)))))\n"
"    (insert (concat\n"
"             (make-string\n"
"              ;; @r{Insert white space up to next number.}\n"
"              (-  (* symbol-width X-axis-label-spacing)\n"
"                  (1- (length (number-to-string horizontal-step)))\n"
"                  2)\n"
"              ? )\n"
"             (number-to-string (* number horizontal-step))))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21775
#, no-wrap
msgid ""
"    ;; @r{Insert remaining numbers.}\n"
"    (setq number (+ number X-axis-label-spacing))\n"
"    (while (> number-of-X-tics 1)\n"
"      (insert (X-axis-element (* number horizontal-step)))\n"
"      (setq number (+ number X-axis-label-spacing))\n"
"      (setq number-of-X-tics (1- number-of-X-tics)))))\n"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21827
#, no-wrap
msgid ""
"(defun one-fiftieth (full-range)\n"
"  \"Return list, each number of which is 1/50th previous.\"\n"
" (mapcar (lambda (arg) (/ arg 50)) full-range))\n"
msgstr ""

#. type: appendixsubsec
#: emacs-lisp-intro.texi:21885
#, no-wrap
msgid "The Printed Graph"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21889
msgid ""
"When made and installed, you can call the @code{print-graph} command like "
"this:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21894
#, no-wrap
msgid "(print-graph fiftieth-list-for-graph 50 10)\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21900
msgid "Here is the graph:"
msgstr ""

#. type: group
#: emacs-lisp-intro.texi:21926
#, no-wrap
msgid ""
"1000 -  *\n"
"        **\n"
"        **\n"
"        **\n"
"        **\n"
" 750 -  ***\n"
"        ***\n"
"        ***\n"
"        ***\n"
"        ****\n"
" 500 - *****\n"
"       ******\n"
"       ******\n"
"       ******\n"
"       *******\n"
" 250 - ********\n"
"       *********                     *\n"
"       ***********                   *\n"
"       *************                 *\n"
"  50 - ***************** *           *\n"
"       |   |    |    |    |    |    |    |\n"
"      10  50  100  150  200  250  300  350\n"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21933
msgid "The largest group of functions contain 10--19 words and symbols each."
msgstr ""

#. type: appendix
#: emacs-lisp-intro.texi:21934 emacs-lisp-intro.texi:21935
#, no-wrap
msgid "Free Software and Free Manuals"
msgstr ""

#. type: strong{#1}
#: emacs-lisp-intro.texi:21938
msgid "by Richard M. Stallman"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21946
msgid ""
"The biggest deficiency in free operating systems is not in the software---it "
"is the lack of good free manuals that we can include in these systems.  Many "
"of our most important programs do not come with full manuals.  Documentation "
"is an essential part of any software package; when an important free "
"software package does not come with a free manual, that is a major gap.  We "
"have many such gaps today."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21951
msgid ""
"Once upon a time, many years ago, I thought I would learn Perl.  I got a "
"copy of a free manual, but I found it hard to read.  When I asked Perl users "
"about alternatives, they told me that there were better introductory "
"manuals---but those were not free."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21956
msgid ""
"Why was this? The authors of the good manuals had written them for O'Reilly "
"Associates, which published them with restrictive terms---no copying, no "
"modification, source files not available---which exclude them from the free "
"software community."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21965
msgid ""
"That wasn't the first time this sort of thing has happened, and (to our "
"community's great loss) it was far from the last.  Proprietary manual "
"publishers have enticed a great many authors to restrict their manuals since "
"then.  Many times I have heard a GNU user eagerly tell me about a manual "
"that he is writing, with which he expects to help the GNU project---and then "
"had my hopes dashed, as he proceeded to explain that he had signed a "
"contract with a publisher that would restrict it so that we cannot use it."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21968
msgid ""
"Given that writing good English is a rare skill among programmers, we can "
"ill afford to lose manuals this way."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21978
msgid ""
"Free documentation, like free software, is a matter of freedom, not price.  "
"The problem with these manuals was not that O'Reilly Associates charged a "
"price for printed copies---that in itself is fine.  The Free Software "
"Foundation @uref{http://shop.fsf.org, sells printed copies} of free "
"@uref{http://www.gnu.org/doc/doc.html, GNU manuals}, too.  But GNU manuals "
"are available in source code form, while these manuals are available only on "
"paper.  GNU manuals come with permission to copy and modify; the Perl "
"manuals do not.  These restrictions are the problems."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21984
msgid ""
"The criterion for a free manual is pretty much the same as for free "
"software: it is a matter of giving all users certain freedoms.  "
"Redistribution (including commercial redistribution) must be permitted, so "
"that the manual can accompany every copy of the program, on-line or on "
"paper.  Permission for modification is crucial too."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:21991
msgid ""
"As a general rule, I don't believe that it is essential for people to have "
"permission to modify all sorts of articles and books.  The issues for "
"writings are not necessarily the same as those for software.  For example, I "
"don't think you or I are obliged to give permission to modify articles like "
"this one, which describe our actions and our views."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:22000
msgid ""
"But there is a particular reason why the freedom to modify is crucial for "
"documentation for free software.  When people exercise their right to modify "
"the software, and add or change its features, if they are conscientious they "
"will change the manual too---so they can provide accurate and usable "
"documentation with the modified program.  A manual which forbids programmers "
"to be conscientious and finish the job, or more precisely requires them to "
"write a new manual from scratch if they change the program, does not fill "
"our community's needs."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:22009
msgid ""
"While a blanket prohibition on modification is unacceptable, some kinds of "
"limits on the method of modification pose no problem.  For example, "
"requirements to preserve the original author's copyright notice, the "
"distribution terms, or the list of authors, are ok.  It is also no problem "
"to require modified versions to include notice that they were modified, even "
"to have entire sections that may not be deleted or changed, as long as these "
"sections deal with nontechnical topics.  (Some GNU manuals have them.)"
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:22014
msgid ""
"These kinds of restrictions are not a problem because, as a practical "
"matter, they don't stop the conscientious programmer from adapting the "
"manual to fit the modified program.  In other words, they don't block the "
"free software community from making full use of the manual."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:22019
msgid ""
"However, it must be possible to modify all the technical content of the "
"manual, and then distribute the result in all the usual media, through all "
"the usual channels; otherwise, the restrictions do block the community, the "
"manual is not free, and so we need another manual."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:22025
msgid ""
"Unfortunately, it is often hard to find someone to write another manual when "
"a proprietary manual exists.  The obstacle is that many users think that a "
"proprietary manual is good enough---so they don't see the need to write a "
"free manual.  They do not see that the free operating system has a gap that "
"needs filling."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:22029
msgid ""
"Why do users think that proprietary manuals are good enough? Some have not "
"considered the issue.  I hope this article will do something to change that."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:22036
msgid ""
"Other users consider proprietary manuals acceptable for the same reason so "
"many people consider proprietary software acceptable: they judge in purely "
"practical terms, not using freedom as a criterion.  These people are "
"entitled to their opinions, but since those opinions spring from values "
"which do not include freedom, they are no guide for those of us who do value "
"freedom."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:22042
msgid ""
"Please spread the word about this issue.  We continue to lose manuals to "
"proprietary publishing.  If we spread the word that proprietary manuals are "
"not sufficient, perhaps the next person who wants to help GNU by writing "
"documentation will realize, before it is too late, that he must above all "
"make it free."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:22047
msgid ""
"We can also encourage commercial publishers to sell free, copylefted manuals "
"instead of proprietary ones.  One way you can help this is to check the "
"distribution terms of a manual before you buy it, and prefer copylefted "
"manuals to non-copylefted ones."
msgstr ""

#. type: Plain text
#: emacs-lisp-intro.texi:22053
msgid ""
"Note: The Free Software Foundation maintains a page on its Web site that "
"lists free books available from other publishers:@* "
"@uref{http://www.gnu.org/doc/other-free-books.html}"
msgstr ""

#. type: appendix
#: emacs-lisp-intro.texi:22054 emacs-lisp-intro.texi:22055
#, no-wrap
msgid "GNU Free Documentation License"
msgstr ""

#. type: cindex
#: emacs-lisp-intro.texi:22057
#, no-wrap
msgid "FDL, GNU Free Documentation License"
msgstr ""

#. type: include
#: emacs-lisp-intro.texi:22058
#, no-wrap
msgid "doclicense.texi"
msgstr ""

#. type: unnumbered
#: emacs-lisp-intro.texi:22060 emacs-lisp-intro.texi:22061
#, no-wrap
msgid "Index"
msgstr ""

#. type: tex
#: emacs-lisp-intro.texi:22085
#, no-wrap
msgid ""
"\\par\\vfill\\supereject\n"
"\\ifodd\\pageno\n"
"    \\global\\evenheadline={\\hfil} \\global\\evenfootline={\\hfil}\n"
"    \\global\\oddheadline={\\hfil} \\global\\oddfootline={\\hfil}\n"
"    %\\page\\hbox{}\\page\n"
"\\else\n"
"%    \\par\\vfill\\supereject\n"
"    \\global\\evenheadline={\\hfil} \\global\\evenfootline={\\hfil}\n"
"    \\global\\oddheadline={\\hfil} \\global\\oddfootline={\\hfil}\n"
"    %\\page\\hbox{}%\\page\n"
"    %\\page\\hbox{}%\\page\n"
"\\fi\n"
msgstr ""

#. type: quotation
#: emacs-lisp-intro.texi:22112
msgid ""
"Robert J. Chassell has worked with GNU Emacs since 1985.  He writes and "
"edits, teaches Emacs and Emacs Lisp, and speaks throughout the world on "
"software freedom.  Chassell was a founding Director and Treasurer of the "
"Free Software Foundation, Inc.  He is co-author of the @cite{Texinfo} "
"manual, and has edited more than a dozen other books.  He graduated from "
"Cambridge University, in England.  He has an abiding interest in social and "
"economic history and flies his own airplane."
msgstr ""
